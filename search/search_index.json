{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes","text":"<p>This is my personal online notebook. I am trying to create a collection of all the notes I have. They should be organzied online and easy to find.</p>"},{"location":"book/presentation/","title":"The Presentation Secrets of Steve Jobs","text":"<ul> <li>Crafts messages</li> <li>Presents ideas</li> <li>Generates excitement for a product or feature</li> <li>Delivers a memorable experience</li> <li>Creates customer evangelists</li> </ul>"},{"location":"book/presentation/#act-1-create-the-stroy","title":"Act 1. Create the Stroy","text":""},{"location":"book/presentation/#scene-1-plan-in-analog","title":"Scene 1. Plan in Analog","text":"<ul> <li>A presentation of Steve contain all of the elements of great plays or movies: conflict, resolution, villains, and heroes.</li> <li>When creating presentations you should spend the majority of your time thinking, sketching, and scripting. That is researching topic, collecting input from experts, organizing ideas, collaborating with colleagues, and sketching the structure of the story.</li> <li>Texts and bullets are the least effective way to deliver information.</li> <li>Great ideas on Napkins</li> <li>three-step storyboard: writing-&gt;sketring-&gt;producing</li> </ul> <ul> <li>Nine elements of great presentations:<ol> <li>headline: 140 characters or less, memorable. i.e.\"Today Apple reinvents the phone!\"</li> <li>passion statement: fill in the following scentence: \"I'm excited about this product because it ...\" and share it.</li> <li>three key messages: the listeners can only recall three or four short-term messages. Develop the key messages and supporting points.</li> <li>metaphors and analogies: Metaphor-a word or phrase that denotes one thing and is used to desgnate another for purposes of comparison. Analogy-a comparison between two diffrent things in order to highlight some area of similarity.</li> <li>demonstrations: sit down and show the audience how they work</li> <li>parteners: share stage with key partners as well as his products</li> <li>customer evidence and third-party endorsements: involve several customers, mouth word</li> <li>video clip: including video in your presentation will help you stand out but no longer than 2 or 3 minutes</li> <li>flip charts, props, and show-and-tell: three types of learners: visual, auditory, kinesthetic. Comprise more than just slides. Slides don't tell stories, you do. Slides complement the story.</li> </ol> </li> </ul> <ul> <li>Aristotle's classic five-point plan to create a persuasive argument:<ol> <li>Deliver a story or statement that arouses the audience's interest.</li> <li>Pose a problem or question that has to be solved or answered.</li> <li>Offer a solution to the problem you raised.</li> <li>Describe specific benefits for adopting the course of action set forth in your solution.</li> <li>State a call to action.</li> </ol> </li> </ul>"},{"location":"book/presentation/#scene-2-answer-the-one-question-that-matters-most","title":"Scene 2. Answer the one question that matters most","text":"<ul> <li>People want to know the answer to one question: Why should I care?</li> <li>Answering that one question right out of the gate will grab people's attention and keep them engaged.</li> <li>It is about the listeners in your audience.</li> <li>Tell them the answer early, often and clearly.</li> <li>Answer the one question in all of your marketing materials: website, presentation slides and press releases.</li> <li>Your audience dosen't care about your product. People care about themselves.</li> <li>Sell dreams, not product.</li> </ul>"},{"location":"book/presentation/#scene-3-develop-a-messianic-scense-of-purpose","title":"Scene 3. Develop a messianic Scense of Purpose.","text":"<ul> <li>The Reality Distortion Field: an ability to convince anyone of practically anything.</li> <li>Find something you love to do so much, you can't wait for the sun to rise to do it all over again.</li> <li>One sure way to lose your sight of your purpose is to chase money for the sake of chasing money.</li> <li>To achieve success, do what you find interesting. Your heart knows where it wants to be.</li> <li>Jobs was never motivated to build computers. Instead, he had a burning desire to create tools to unleash human potential.</li> <li>He saw himself in the faces of those famous people who advanced the human race and changed the world.</li> <li>Share your enthusiasm with your listeners. People want to be moved and inspired, and they want to believe in something. Make them believe in you.</li> <li>Develop a personal \"passion statement\". In one sentence, tell your prospects why you are genuinely excited about working with them.</li> </ul>"},{"location":"book/presentation/#scene-4-create-twitter-like-headlines","title":"Scene 4. Create Twitter-Like Headlines","text":"<ul> <li>The headlines work so well that the media will often run with them word for word. You see reporters (and your audience) are looking for a category in which to place your product and a way of describing the product in one sentence. Take the work out of it and write the headline yourself.</li> <li>It becomes nearly impossible to create consistent messaging without a prepared headline developed early in the planning stage. The rest of the presentation should be built aroud it.</li> <li>This is typical Jobs method for introducing a product. He reveals the headline, expands on it, and hammers it home again and again.</li> <li>The headlines Steve Jobs creates work effectively because they are written from the perspective of the user.</li> <li>Three criteria: it is concise, it is spcific, and it offers a personal benefit.</li> <li>Headlines are what persuade you to read particular stories in newspapers, magazines, or blogs.</li> </ul>"},{"location":"book/presentation/#scene-5-draw-a-road-map","title":"Scene 5. Draw a Road Map","text":"<ul> <li>Verbal guideposts serve as road maps, helping your listeners follow the story. When coaching clients to appear in the media, I always instruct them to create an easy-to-follow story by clearly outlinint three or, at the most, four main points before filling in the details.</li> <li>A Verbal road map of three things will help your listeners keep their place.</li> <li>We can hold only small amounts of information in short-term, or \"active\", memory.</li> <li>Three is more persuasive than five.</li> <li>This is a simple recipe for ensring your audience will retain the information you are sharing.</li> <li>Your slides should mirror your narrative. There is no need to make the slides complicated.</li> <li>Create alist of all the key points you want your audience to know. Categorize the list until you are left with only three major message points. Add rhetorical devices to each of your three key messages, such as personal stories, facts examples, analogies, metaphors, and third-party endorsements.</li> </ul>"},{"location":"book/presentation/#scene-6-introduce-the-antagonist","title":"Scene 6. Introduce the Antagonist","text":"<ul> <li>Introducing the antagonist (the problem) rallies the audience around the hero (the solution).</li> <li>What people care about is solving problems and making their lives a little better.</li> <li>Explanations of new products or services require context, a relevance to a problem in your customer's life that is causing that person \"pain\".</li> <li>Having an identifiable enemy gives us the chance not only to articulate and showcase our faith, but also to unite ourselves with our fellow believers... this us-versus-them strategy attracts fans, incites controversy, creates loyalty, and gets us thinking-and arguing-and, ofcourse, buying.</li> <li>Establishing the antagonist early (before revealing your solution) is critical to persuasion, because our brains needs a bucket-a cateory-in which to place a new idea.</li> <li>In presentations, start with the big picture-theproblem-before filling in the details.</li> <li>Simply create a one-sentence answer for the following four questions:<ol> <li>What do you do?</li> <li>What problem do you solve?</li> <li>How are you different?</li> <li>Why should I care?</li> </ol> </li> </ul>"},{"location":"book/presentation/#scene-7-reveal-the-conquering-hero","title":"Scene 7. Reveal the conquering Hero","text":"<ul> <li>The hero is not necessary to slay the bad guy, but to make our lives better.</li> <li>Once the hero is established, the benefit must be made clear immediately.</li> <li>Describe the state of the industry as it currently stands, followed by your vision of where it could be.</li> <li>Unless you are passionate about a problem that you want to make right, you won't have the perseverance to stick it out.</li> <li>Intermission 1 Obey the Ten-Minute Rule</li> <li>Your audience checks out after ten minutes, not eleven.</li> </ul>"},{"location":"book/presentation/#act-2-deliver-the-experience","title":"Act 2. Deliver the Experience","text":""},{"location":"book/presentation/#scene-8-channel-their-inner-zen","title":"Scene 8. Channel Their Inner Zen","text":"<ul> <li>The slides should be realy simple and with no bullet point.</li> <li>Bullet points means to take notes instead of pay attention to what you are saying.</li> <li>Wordy slides detract from the experience. Simple slides keep the focus where it belongs-on you, the speaker.</li> <li>It is better to present an explanation in words and pictures than solely in words.</li> <li>When giving a multimedia explanation, present corresponding words and pictures contiguously rather than separately.</li> <li>When giving a multimedia explanation, present words as auditory narration rather than visual on-screen text.</li> <li>When giving a multimedia explannation, use few rather than many extaneous words and pictures.</li> <li>Einstein's Theory of Simplicity: If you can't explain it simply, you don't understand it well enough.</li> <li>Focus on one theme per slide, and complement that theme with a photograph or image.</li> <li>carminegallo.com</li> </ul>"},{"location":"book/presentation/#scene-9-dress-up-your-nunbers","title":"Scene 9. Dress Up Your Nunbers","text":"<ul> <li>Nuers doesn't resonate with people unless they were put in a comprehensive context, special relevent to something people really familiar with.</li> <li>Make the numbers specific, relevant, and contextual.</li> <li>The more complex the idea, the more important it is to use rhetorical devices such as analogies to facilitate understanding.</li> <li>Use data to support the key theme of your presentation.</li> <li>Don't overwhelm your audience with too many numbers.</li> </ul>"},{"location":"book/presentation/#scene-10-use-amazingly-zippy-words","title":"Scene 10. Use \"Amazingly Zippy\" Words","text":"<ul> <li>Don't be afraid of using simple words and descriptive adjectives.</li> <li>Jargons and buzzwords are meaningless and empty and will most certainly make you less understandable and therefore less persuasive.</li> </ul> <ul> <li>Three characteristics of the words:<ul> <li>Simple. Free of jargon and with few syllables.</li> <li>Concrete. Very specific phrases. Short, tangible desciptions instead of long, abstract discussions.</li> <li>Emotional. Descriptive adjectives.</li> </ul> </li> <li>When you find an analogy that works, stick with it.</li> </ul>"},{"location":"book/presentation/#scene-11-share-the-stage","title":"Scene 11. Share the Stage","text":"<ul> <li>Our brains crave variety and get bored when any one last too long on stage.</li> <li>A reference is good. A customer or partner physically sharing the stage is even better.</li> <li>Having experts, customers, or partners testify to the effectiveness of your product will help you overcom the psychological barrier to participation.</li> <li>Publicly thank employees, partners, and customers. And do it often.</li> </ul>"},{"location":"book/presentation/#scene-12-stage-your-presentation-with-props","title":"Scene 12. Stage Your Presentation with Props","text":"<ul> <li>Using props can transform what could have been boring explanation into an interesting, multisensory experience.</li> <li>Good demos are as follows: short, simple, sweet, swift, substantial.</li> <li>Don't forget to have fun with demos.</li> <li>If your product contains numerous benefits and features, often highlight just one.</li> <li>Provide something for every type of learner in your audience: visual, auditory, and kinesthetic.</li> </ul>"},{"location":"book/presentation/#scene-13-reveal-a-holy-shit-moment","title":"Scene 13. Reveal a \"Holy Shit\" Moment","text":"<ul> <li>It need not be a breakthrough announcement. Something as simple as telling a personal story, revealing some new and unexpected information, or delivering a demonstration can help create a memorable moment for your audience. The more unexpected, the better.</li> <li>The people only remember how they feel.</li> <li>Build up to the big moment before laying it on your audience.</li> <li>Rhearse the big moment.</li> <li></li> <li>Intermission 2 Schiller Learns from the Best</li> </ul>"},{"location":"book/presentation/#act-3-refine-and-rehearse","title":"Act 3. Refine and Rehearse","text":""},{"location":"book/presentation/#scene-14-master-stage-presence","title":"Scene 14. Master Stage Presence","text":"<ul> <li>To enhance one's speedking and presentation skills: one should make eye contact, maintain an open posture, and use frequent hand gestures.</li> <li>Four related tech niques to keep your listeners engaged: inflection, pauses, volume, and rate.</li> <li>Record yourself. Watch your body language, and listen to your vocal delivery. Watching your self on video is the best way to improve your presentation skills.</li> </ul>"},{"location":"book/presentation/#scene-15-make-it-look-effortless","title":"Scene 15. Make It Look Effortless","text":"<ul> <li>Set specific goals, ask for feed back, and continually strive to improve over the long run.</li> <li>Making your presentation \"more alive\" takes practice.</li> <li>Ten thousand hours of practice is required to achieve the level of mastery associated with being a world-class expert in anything.</li> <li>Use a video camera and a external clip-on microphone during rehearsals.</li> <li>As you watch the video, pay close attention to these five areas: eye contact, body language, filler words, vocal delivery, energy.</li> <li>Let your energy go a little over the top and to leave your comfort zone, you will hit the right note.</li> </ul> <ul> <li>The bucket method:<ol> <li>Identify the most common questions likely to be raised.</li> <li>Place the questions into \"buckets\", or categories.</li> <li>Create the best answer you have for the category. The answer must make sense regardless of how the question is phrased.</li> <li>Listen carefully to the question, and identify a key word-a trigger-that will help you isolate the correct bucket from which to pull to your answer.</li> <li>Look the person in the eye and respond with confidence.</li> </ol> </li> </ul> <ul> <li>Three ways to eliminate fillers:<ol> <li>Ask for feed back.</li> <li>Tap the glass. Ask another person to watch you and tap the glass of water using a spoon while you are using filler.</li> <li>Record your self, and play it back in the presence of others.</li> </ol> </li> </ul>"},{"location":"book/presentation/#scene-16-wear-the-appropriate-costume","title":"Scene 16. Wear the Appropriate Costume","text":"<ul> <li>Always dress a little better than everyone else, but appropriate for the culture.</li> <li>Dress like the leader you want to become.</li> </ul>"},{"location":"book/presentation/#scene-17-toss-the-script","title":"Scene 17. Toss the Script","text":"<ul> <li>Five steps to tossing the script<ol> <li>Write your script in full sentences in the \"notes\" section of PowerPoint.</li> <li>Highlight or underline the key word form each sentence, and practice your presentation.</li> <li>Delete extraneous words from your scripted sentences, leaving only the key words.</li> <li>Memorize the one key idea per slide.</li> <li>Practice the entire presentation without notes, simply using the slides as your prompter.</li> </ol> </li> </ul> <ul> <li>When you are actually delivering the final presentation, if the notes give you peace of mind, by all means, keep them available.</li> <li>Don't read from notes if you don't have to.</li> <li>When you must read from notes, create no more than three or four large-font bullet points on one note card or sheet of paper.</li> <li>Think \"one theme per slide\".</li> </ul>"},{"location":"book/presentation/#scene-18-have-fun","title":"Scene 18. Have Fun","text":"<ul> <li>Your audience will forgive a blooper as long as you get it right.</li> <li>Your audience wants to be educated and entertained.</li> <li>If your presentation hits a glitch, acknowledge it, smile and move on.</li> <li>Don't let something that does not go exactly as planned derail the rest of your presentation.</li> <li>Encore One More Thing</li> <li>Powerful rhetorical device is available to any person who wants to command an audience.</li> <li>Believe in yourself and your story.</li> </ul>"},{"location":"book/why/","title":"The Book of Why","text":""},{"location":"book/willpower/","title":"\u81ea\u63a7\u529b","text":"<ul> <li>\u51a5\u60f3\uff0c\u7761\u7720\uff0c\u953b\u70bc\u8eab\u4f53\uff0c\u90fd\u53ef\u4ee5\u589e\u5f3a\u81ea\u63a7\u529b\u3002</li> <li>\u653e\u677e\u548c\u653e\u6162\u547c\u5438\u90fd\u80fd\u5feb\u901f\u6062\u590d\u81ea\u63a7\u529b\u3002</li> <li>\u51a5\u60f3\u8fd8\u80fd\u5e2e\u52a9\u63d0\u5347\u7761\u7720\u8d28\u91cf\u3002</li> <li>\u51a5\u60f3\u4e4b\u6240\u4ee5\u80fd\u63d0\u5347\u81ea\u63a7\u529b\u662f\u56e0\u4e3a\uff0c\u51a5\u60f3\u8fc7\u7a0b\u4e2d\u4f1a\u8d70\u795e\uff0c\u800c\u540e\u8981\u4e3b\u52a8\u8bb2\u6ce8\u610f\u529b\u62c9\u56de\u5230\u547c\u5438\uff0c\u8fd9\u79cd\u53cd\u590d\u5c06\u6ce8\u610f\u529b\u62c9\u56de\u5230\u8be5\u505a\u7684\u4e8b\u60c5\u4e0a\u7684\u80fd\u529b\uff0c\u5c31\u662f\u81ea\u63a7\u529b\u3002</li> <li>\u201c\u6211\u8981\u201d\u505a\u4ec0\u4e48\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u201c\u6211\u4e0d\u8981\u201d\u505a\u90a3\u4e9b\u5f71\u54cd\u6211\u8fbe\u5230\u76ee\u6807\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u6211\u8981\u65e9\u7761\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6211\u4e0d\u8981\u5728\u7761\u524d\u73a9\u624b\u673a\u3002</li> <li>\u538b\u529b\u548c\u81ea\u63a7\u529b\u662f\u5bf9\u7acb\u7684\u3002\u538b\u529b\u8ba9\u4eba\u4e13\u6ce8\u4e8e\u5373\u65f6\u76ee\u6807\uff0c\u81ea\u63a7\u529b\u8ba9\u4eba\u4e13\u6ce8\u4e8e\u957f\u671f\u76ee\u6807\u3002</li> </ul>"},{"location":"competitive_programming/combinatorics/","title":"Combinatorics","text":""},{"location":"competitive_programming/combinatorics/#polya","title":"polya\u5b9a\u7406","text":"<p>\u5728\u8fd9\u91cc\u53ea\u8c08\u4e00\u4e0bpolya\u5b9a\u7406\u662f\u5982\u4f55\u5e94\u7528\u7684\u3002\u5bf9\u4e8e\u6392\u6210\u4e00\u6392\u7684\u5e26\u7f16\u53f7\u7684\u5c0f\u7403\uff0c\u6309\u7167\u67d0\u4e00\u79cd\u65b9\u6848\u6539\u53d8\u5176\u4e2d\u4e00\u4e9b\u7403\u7684\u653e\u7f6e\u987a\u5e8f\uff0c\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u7f6e\u6362\u3002\u6bcf \u4e00\u79cd\u7f6e\u6362\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e24\u6392\u6570\u5b57\u4f86\u8868\u793a\uff0c\u7b2c\u4e00\u6392\u6570\u5b57\u548c\u7b2c\u4e8c\u6392\u6570\u5b57\u4e00\u4e00\u5bf9\u5e94\uff0c\u7b2c\u4e00\u6392\u6570\u5b57\u8868\u793a\u5c0f\u7403\u7684\u539f\u6765\u4f4d\u7f6e\uff081\uff5en\uff09\uff0c\u7b2c\u4e8c\u6392\u6570\u5b57\u8868\u793a\u5c0f\u7403\u4ea4\u6362\u540e\u7684\u4f4d\u7f6e\u3002\u73b0\u5728\u6211 \u4eec\u6709n\u4e2a\u5c0f\u7403\uff0cm\u79cd\u989c\u8272\u3002\u6709k\u79cd\u7f6e\u6362\u65b9\u6cd5\uff0c\u6211\u4eec\u8ba4\u4e3a\u80fd\u901a\u8fc7\u7f6e\u6362\u65b9\u6cd5\u4ea4\u6362\u4f4d\u7f6e\u540e\u53d8\u6210\u540c\u4e00\u79cd\u67d3\u8272\u60c5\u51b5\uff08\u989c\u8272\u7684\u6392\u5217\u72b6\u51b5\u76f8\u540c\uff0c\u5ffd\u7565\u5c0f\u7403\u7f16\u53f7\uff09\uff0c\u5219\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u4e92 \u76f8\u901a\u8fc7\u7f6e\u6362\u80fd\u8fbe\u5230\u7684\u72b6\u6001\u4e3a\u540c\u4e00\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\u6211\u4eec\u73b0\u5728\u8981\u6c42\u603b\u5171\u6709\u591a\u5c11\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\u8981\u8ba1\u7b97\u65b9\u6cd5\u6570\uff0c\u6211\u4eec\u5148\u8981\u8ba1\u7b97k\u79cd\u7f6e\u6362\u65b9\u6cd5\u4e2d\u6bcf\u79cd\u7f6e\u6362\u65b9\u6cd5\u4e2d\u542b\u6709\u7684\u73af\u6570\uff0c\u5373\u5efa \u7acb\u4e00\u4e2a\u56fe\uff0c\u6709n\u4e2a\u70b9\uff0c\u628a\u6bcf\u4e2a\u7f6e\u6362\u65b9\u6cd5\u4e24\u6392\u6570\u5b57\u4e2d\u7684\u4e0a\u4e0b\u4e00\u4e00\u5bf9\u5e94\u7684\u6570\u5b57\u5bf9\u770b\u6210\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8ba1\u7b97\u8fd9\u4e2a\u56fe\u4e2d\u6709\u51e0\u4e2a\u73af\u3002\u6211\u4eec\u8bbe\u73af\u6570\u5206\u522b\u4e3ac1~ck\u3002\u90a3\u4e48\u67d3\u8272 \u65b9\u6cd5\u6570\u4e3a(m^c1+m^c2+...+m^ck)/k\u3002\u4ee5\u4e0a\u5c31\u662fpolya\u5b9a\u7406\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7684\u662f\u7f6e\u6362\u65b9\u6cd5\u96c6\u5408\u5fc5\u987b\u662f\u7fa4\uff0c\u9700\u8981\u6ee1\u8db3\u5c01\u95ed\u6027\uff0c\u5373\u5982\u679c\u628a\u901a\u8fc7\u8be5 \u96c6\u5408\u4e2d\u7684\u82e5\u5e72\u4e2a\u65b9\u6cd5\u8fde\u7eed\u8fdb\u884c\u7f6e\u6362\u538b\u7f29\u6210\u4e00\u4e2a\u7f6e\u6362\u65b9\u6cd5\uff08\u7528\u4e24\u6392\u6570\u5b50\u8868\u793a\uff09\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b0\u7684\u7f6e\u6362\u65b9\u6cd5\u4e5f\u5fc5\u987b\u5c5e\u4e8e\u8be5\u96c6\u5408\u3002</p>"},{"location":"competitive_programming/combinatorics/#_1","title":"\u5bb9\u65a5\u539f\u7406","text":"<p>\u5047\u8bbe\u5e73\u9762\u4e0a\u6709\u4e00\u4e9b\u5706\uff0c\u4e92\u76f8\u4e4b\u95f4\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u6211\u4eec\u8981\u6c42\u8fd9\u4e9b\u5706\u8986\u76d6\u7684\u603b\u9762\u79ef\uff08\u91cd\u53e0\u90e8\u5206\u53ea\u8bb0\u4e00\u6b21\uff09\u3002\u8ba1\u7b97\u65b9\u6cd5\u5c31\u662f\uff1a\u52a0\u4e0a\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c111\u6b21\u7684\u9762\u79ef\u52a0\uff0c\u51cf\u53bb\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c112\u6b21\u7684\u9762\u79ef\uff0c\u52a0\u4e0a\u6240\u6709\u88ab\u8986\u76d6\u4e86\u81f3\u5c113\u6b21\u7684\u9762\u79ef\u2026\u2026\u5bf9\u4e8e\u5947\u6570\u7684\u5c31\u52a0\uff0c\u5bf9\u4e8e\u5076\u6570\u7684\u5c31\u51cf\uff0c\u6700\u7ec8\u7ed3\u679c\u5373\u4e3a\u8986\u76d6\u7684\u603b\u9762\u79ef\u3002\u628a\u8fd9\u4e9b\u5706\u53d8\u6210\u662f\u96c6\u5408\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u662f\u5bb9\u65a5\u539f\u7406\u3002</p>"},{"location":"competitive_programming/combinatorics/#_2","title":"\u6709\u91cd\u590d\u7ec4\u5408","text":"<p>\u4ecen\u4e2a\u5143\u7d20\u4e2d\u6709\u91cd\u590d\u5730\u53d6r\u4e2a\uff0c\u4e0d\u8ba1\u987a\u5e8f\uff0c\u5219\u4e0d\u540c\u7684\u53d6\u6cd5\u6709\u591a\u5c11\u79cd\uff1f</p> <p>\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u88ab\u79f0\u4e3a\u6709\u91cd\u590d\u7ec4\u5408\u6570\u3002\u7ed3\u679c\u5f88\u7b80\u6d01\uff0c\u662fC(n+r-1,r)\u3002(\u6ce8\uff1a\u8fd9\u8868\u793a\u4ecen+r-1\u4e2a\u6570\u4e2d\u53d6\u51far\u4e2a\u6570\u7684\u7ec4\u5408\u6570)</p> <p>\u3010\u8bc1\u660e\u3011</p> <p>\u5c06n\u4e2a\u5143\u7d20\u770b\u505an\u4e2a\u76d2\u5b50,r\u770b\u4f5cr\u4e2a\u65e0\u533a\u522b\u7684\u7403,\u5219\u76f8\u5f53\u4e8e:</p> <p>\u628ar\u4e2a\u540c\u6837\u7684\u7403\u653e\u5165n\u4e2a\u987a\u6b21\u6392\u5217\u7684\u76d2\u5b50,\u6c42\u4e0d\u8ba1\u653e\u7403\u987a\u5e8f\u7684\u653e\u6cd5\u79cd\u6570</p> <p>\u75280\u8868\u793a\u76d2\u5b50,1\u8868\u793a\u7403</p> <p>\u6211\u4eec\u628a\u8fd9n\u4e2a0\u548cr\u4e2a1\u5199\u5728\u4e00\u884c\u4e0a\u3002</p> <p>\u7531\u4e8e\u7403\u5fc5\u987b\u653e\u5728\u76d2\u5b50\u4e2d,\u89c4\u5b9a\u67d0\u4e2a0\u4e4b\u524d,\u5230\u4e0a\u4e00\u4e2a0\u4e3a\u6b62\u76841\u7684\u4e2a\u6570,\u8868\u793a\u8be5\u76d2\u5b50\u4e2d\u88c5\u7684\u7403\u6570</p> <p>\u6ce8\u610f\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5fc5\u987b\u662f0</p> <p>\u6240\u4ee5\u76f8\u5f53\u4e8e\u4ece\u524d\u9762n+r-1\u4e2a\u4f4d\u7f6e\u4e2d\u6311\u51far\u4e2a\u4f4d\u7f6e\u653e1\uff0c\u5176\u4f59n-1\u4e2a\u4f4d\u7f6e\u653e0</p>"},{"location":"competitive_programming/combinatorics/#rank","title":"\u6c42\u6392\u5217Rank","text":"<p>\u6c42\u4e00\u4e2a\u6392\u5217\u662f\u7b2c\u51e0\u79cd\u6392\u5217\u7684\u65b9\u6cd5\uff1a\u8bbef(x)\u8868\u793ax\u4f4d\u540e\u9762\u6bd4x\u5c0f\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u8be5\u6392\u5217\u7684\u5728\u5168\u6392\u5217\u4e2d\u7684\u6392\u4f4drank=\\sum_{i=1}^{n}{( f(i) * ( (n-i)! ) )}\u3002rank \\in [0, n!-1]\u3002</p>"},{"location":"competitive_programming/combinatorics/#_3","title":"\u671f\u671b\u91cd\u7ec4","text":"<p>\u73b0\u6709\u968f\u673a\u53d8\u91cfX\uff0c\u4f20\u7edf\u6c42X\u671f\u671b\u7684\u65b9\u6cd5\u662f\u628aX\u7684\u6bcf\u4e2a\u53d6\u503c\u4e58\u4ee5\u5176\u6982\u7387\u518d\u52a0\u548c\u3002</p> <p>\u800c\u73b0\u5728\u6211\u4eec\u8981\u5bf9X\u7684\u6bcf\u4e2a\u53d6\u503c\u8fdb\u884c\u91cd\u7ec4\u3002</p> <p>\u4f8b\u5982\uff0cE(X)=\\sum{x_i p_i}\u3002\u5f53X=x_i\u65f6\uff0c\u6211\u4eec\u628aX\u770b\u4f5c\u662fn\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u548c\u3002p_i\u662f\u6070\u597d\u548c\u4e3ax_i\u65f6\u7684\u6982\u7387\u3002</p> <p>\u8fd9\u60f3\u5f53\u4e0e\u662f\u6309\u7167X\u7684\u6bcf\u79cd\u53d6\u503c\u8fdb\u884c\u5206\u7c7b\u8ba1\u7b97\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u7ed9\u51fa\u53e6\u5916\u4e00\u79cd\u6c42\u6cd5\u3002</p> <p>\u8bbe\u8fd9n\u4e2a\u968f\u673a\u53d8\u91cf\u603b\u5171\u6709M\u79cd\u4e0d\u540c\u7684\u53d6\u503c\u65b9\u6cd5\u3002</p> <p>\uff08\u5982\u679c\u8fd9\u4e9b\u968f\u673a\u53d8\u91cf\u76f8\u4e92\u72ec\u7acb\uff0c\u90a3\u4e48<code>M=m1*m2*...*mn</code>\uff0cmi\u8868\u793a\u7b2ci\u4e2a\u968f\u673a\u53d8\u91cf\u6709\u591a\u5c11\u79cd\u53d6\u503c\u3002\uff09</p> <p>\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u968f\u673a\u53d8\u91cfai\u90fd\u628aM\u79cd\u60c5\u51b5\u679a\u4e3e\u4e00\u6b21\uff0c\u8ba1\u7b97\u6bcf\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u4e58\u4ee5ai\u5728\u8be5\u79cd\u60c5\u51b5\u4e0b\u7684\u53d6\u503c\uff0c\u5e76\u52a0\u548c\u3002</p> <p>\u6700\u540e\u628a\u6240\u6709\u968f\u673a\u53d8\u91cf\u7684\u52a0\u548c\u518d\u52a0\u548c\uff0c\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684E(X)\u3002</p>"},{"location":"competitive_programming/computational_geometry/","title":"Computational Geometry","text":"<ul> <li>Pick\u516c\u5f0f\uff1a\u5e73\u9762\u4e0a\u4ee5\u683c\u5b50\u70b9\u4e3a\u9876\u70b9\u7684\u7b80\u5355\u591a\u8fb9\u5f62\uff0c\u5982\u679c\u8fb9\u4e0a\u7684\u70b9\u6570\u4e3aon\uff0c\u5185\u90e8\u7684\u70b9\u6570\u4e3ain\uff0c\u5219\u5b83\u7684\u9762\u79ef\u4e3aarea=on/2+in-1</li> <li>\u4e8c\u5206\u6cd5\u5728\u51e0\u4f55\u8ba1\u7b97\u4e2d\u662f\u5e38\u7528\u7684\u3002</li> </ul>"},{"location":"competitive_programming/computational_geometry/#similar-polygons","title":"Similar Polygons","text":"<p>\u770b\u4e24\u4e2a\u591a\u8fb9\u5f62\u662f\u5426\u76f8\u4f3c\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u5bf9\u5e94\u4e24\u70b9\u7684\u8ddd\u79bb\u662f\u5426\u6210\u6bd4\u4f8b\u3002\u6ce8\u610f\uff1a\u4e0d\u53ea\u662f\u76f8\u90bb\u70b9\uff0c\u4e0d\u76f8\u90bb\u7684\u4e5f\u8981\u5224\u65ad\u3002</p>"},{"location":"competitive_programming/computational_geometry/#_1","title":"\u591a\u7ef4\u5750\u6807\u6700\u8fdc\u66fc\u54c8\u987f\u8ddd\u79bb\u70b9\u5bf9","text":"<p>\u5bf9\u4e8e\u4e24\u7ef4\u7684\u60c5\u51b5\uff0c\u4e24\u4e2a\u70b9(x1,y1)(x2,y2)\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a|x1-x2|+|y1-y2|\uff0c\u53ef\u80fd\u53d6\u00b1(x1-x2)\u00b1(y1-y2)\uff0c\u5047\u5982\u771f\u5b9e\u7684\u60c5\u51b5\u662f(x1-x2)+(y1-y2)\uff0c\u90a3\u4e2a\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u7b97\u51fa\u6765\u7684\u5173\u4e8e\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u5927\u8ddd\u79bb\u80af\u5b9a\u6bd4\u8fd9\u4e2a\u5c0f\uff08\u53bb\u6389\u7edd\u5bf9\u503c\u7b26\u53f7\u4e86\uff09\uff0c\u7136\u800c\u00b1(x1-x2)\u00b1(y1-y2)\u53ef\u4ee5\u5199\u6210(x1\u00b1y1)-(x2\u00b1y2)\u3002\u628a\u4e8e\u662f(x\u00b1y)\u770b\u6210\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u3002\u53ea\u8981\u679a\u4e3e\u6bcf\u4e00\u7ef4\u7684\u5206\u91cf\u524d\u9762\u7684\u7b26\u53f7\u5373\u53ef\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u679a\u4e3e\u7b97\u51fa\u6240\u6709\u7684n\u4e2a\u70b9\u4e2d\u6743\u503c\u6700\u5927\u7684\u548c\u6700\u5c0f\u7684\uff0c\u6c42\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u6c42\u6700\u5927\u5373\u53ef\u3002</p>"},{"location":"competitive_programming/cpp/","title":"C++ Grammar","text":"<ul> <li>\u8c03\u8bd5\u7684\u65f6\u5019<code>#define D(x) x</code>\u4e0d\u8c03\u8bd5\u7684\u65f6\u5019<code>#define D(x)</code>\uff0c\u628a\u8c03\u8bd5\u7684\u8f93\u51fa\u5199\u6210<code>D(printf(\u201c%d\\n\u201d, a));</code>\u3002</li> <li><code>long long = int * int</code>\u7684\u65f6\u5019\u4e00\u4e2a<code>int</code>\u8981\u5f3a\u5236\u8f6c\u6362\u4e3a<code>long long</code>\u3002</li> <li>c\u8bed\u8a00\u4e2d<code>struct</code>\u4e0d\u80fd\u6709\u6784\u9020\u51fd\u6570\uff0c\u5f00\u6570\u7ec4\u4e0d\u80fd\u4f7f\u7528<code>const</code>\u7684\u503c\u4f5c\u4e3a\u5927\u5c0f\uff0c\u800c\u8981\u7528<code>define</code>.</li> <li>\u4ee3\u66ff<code>vector</code>\u7684\u5efa\u56fe\u65b9\u6cd5\uff0c\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u6cd5\uff0c<code>map[i]</code>\u5b58\u7b2c<code>i</code>\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\u5728<code>e</code>\u4e2d\u7684\u4e0b\u6807\u3002<code>e</code>\u7528\u6765\u5b58\u8fb9\uff0c<code>next</code>\u8bb0\u5f55\u8be5\u70b9\u7684\u4e0b\u4e00\u6761\u8fb9\u7684\u5750\u6807\u3002</li> <li>\u4f7f\u7528<code>vector</code>\u7684\u6548\u7387\u6781\u4f4e\u3002</li> <li>\u7528c\u8bed\u8a00\u5199\u7684\uff0c<code>memset</code>\u4e0d\u7528\u5305\u542b\u5934\u6587\u4ef6</li> <li>\u56db\u820d\u4e94\u5165\u7684\u65b9\u6cd5\u662f<code>(int)(x + 0.5)</code></li> <li><code>cmath</code>\u4e2d\u7684<code>exp(x)</code>\u51fd\u6570\u662f\u7528\u6765\u6c42e\u7684<code>x</code>\u6b21\u5e42\u3002</li> <li>\u5bf9\u4e8e<code>double</code>\u7c7b\u578b<code>scanf</code>\u65f6\u8981\u7528<code>%lf</code>\uff0c<code>printf</code>\u65f6\u8981\u7528<code>%f</code>\u3002</li> <li><code>next_permutation(f, f+n);</code>\u662f\u5c06f\u770b\u505a\u4e00\u4e2a\u6392\u5217\uff0c\u5e76\u6c42\u5176\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u6240\u6709\u6c42\u5f97\u7684\u6392\u5217\u662f\u4e0d\u91cd\u590d\u7684\uff0c\u9700\u8981a<code>lgorithm</code>\u5934\u6587\u4ef6\u3002\u5728\u9047\u5230\u6700\u540e\u4e00\u4e2a\u6392\u5217\u540e\u4f1a\u8fd4\u56de<code>false</code>\uff0c\u5e76\u8df3\u8f6c\u5230\u7b2c\u4e00\u79cd\u6392\u5217\uff0c\u5426\u5219\u4f1a\u8fd4\u56de<code>true</code>.</li> <li><code>putchar()</code>,<code>getchar()</code>\u6bd4<code>scanf()</code>,<code>printf()</code>\u5feb\u3002</li> <li><code>strtok(char *st1, char *st2)</code>\u7528<code>st2</code>\u5206\u5272<code>st1</code>\uff0c\u635f\u574f\u539f\u4e32\uff0c\u8fd4\u56de\u5206\u5272\u540e\u7684\u7b2c\u4e00\u4e2a\u4e32\u7684\u6307\u9488\uff0c\u60f3\u83b7\u5f97\u88ab\u5206\u5272\u7684\u7b2c\u4e8c\u4e2a\u4e32\u5219\u9700\u8981\u8c03\u7528\u7b2c\u4e8c\u6b21\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ed9<code>NULL</code></li> <li><code>unget(ch, stdin);</code>\u53ef\u4ee5\u628a\u8bfb\u5230\u7684\u5b57\u7b26ch\u653e\u56de\u5230\u8f93\u5165\u6587\u4ef6\u4e2d\u53bb\u3002\u76f8\u5f53\u4e8e<code>getchar()</code>\u7684\u9006\u7a0b\u3002</li> <li><code>reverse(f, f+n)</code>\u53ef\u4ee5\u53cd\u8f6cf\u6570\u7ec4\u7684\u524dn\u4f4d\uff0c\u8fd9\u4e2a\u51fd\u6570\u8981\u5305\u542b<code>algorithm</code>\u3002</li> <li><code>string::find(char *, pos);</code>\u8fd8\u8981\u6ce8\u610freplace\u7684\u7528\u6cd5<code>string::replace(pos, length, char*);</code></li> <li><code>map</code>\u5e38\u7528\u4e8e\u67e5\u627e\u67d0\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002</li> <li>\u6c42\u548c\u51fd\u6570<code>accumulate</code>\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6<code>numeric</code>\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3a<code>sum = accumulate(f, f + n, 0);</code></li> <li>\u6c42\u6700\u5927\u503c\u51fd\u6570<code>max_element</code>\u8fd4\u56de\u6700\u5927\u503c\u6307\u9488\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6<code>algorithm</code>\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e3a<code>max_value=*max_element(f, f+n);</code></li> <li>\u7528<code>sort</code>\u6392\u5e8f\u91cd\u8f7d<code>&lt;</code>\u7684\u65f6\u5019\u8981\u6ce8\u610f\u7b49\u4e8e\u7684\u60c5\u51b5\u4e5f\u8981\u8fd4\u56de<code>false</code>\u3002</li> <li>map\u5982\u679c\u8981\u4f7f\u7528<code>char*</code>\u4f5c\u4e3a<code>key</code>\uff0c\u4e0d\u80fd\u7b80\u5355\u7684\u76f4\u63a5\u4f7f\u7528\uff0c\u53ef\u4ee5\u7528<code>string</code>\u4f5c\u4e3a<code>map</code>\u7684<code>key</code>\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u5c06<code>char*</code>\u8f6c\u6362\u4e3a<code>string</code>\u3002\u8f6c\u6362\u7684\u65b9\u6cd5\u662f\u4f7f\u7528<code>string</code>\u7684<code>assign</code>\u51fd\u6570\u3002<code>string.assign(char*);</code>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528<code>string</code>\u7684\u6784\u9020\u51fd\u6570\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a<code>cmp</code>\u51fd\u6570<code>map&lt;char*,int,cmp&gt;</code>\u3002</li> <li><code>&lt;ctime&gt;</code>\u4e2d<code>clock()/CLOCK_PER_SEC</code>\u53ef\u4ee5\u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u3002</li> <li><code>strchr(char*, char)</code>\u67e5\u627e<code>char</code>\u5728<code>char*</code>\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de<code>NULL</code>\u3002</li> <li><code>strstr(char*,char*)</code>\u540c<code>strchr</code>,\u53ea\u662f\u67e5\u627e\u5bf9\u8c61\u662f\u5b57\u7b26\u4e32\u3002</li> <li><code>isalpha()</code>,<code>isdigit()</code>,<code>isupper()</code>,<code>islower()</code>\u53ef\u4ee5\u5224\u65adchar\u7684\u7c7b\u578b\u662f\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u5927\u5199\u5b57\u6bcd\u3001\u5c0f\u5199\u5b57\u6bcd\u3002\u5728\u5934\u6587\u4ef6<code>cctype</code>\u4e2d\u3002<code>toupper()</code>,<code>tolower()</code>\u53ef\u7528\u4e8e<code>char</code>\u5927\u5c0f\u5199\u8f6c\u6362\uff0c\u5982\u679c\u53c2\u6570\u4e0d\u7b26\u5408\u8981\u6c42\u5219\u8fd4\u56de\u539f\u503c\u3002</li> <li><code>fgets(s, sizeof(s), stdin)</code>\u7b49\u4ef7\u4e8e<code>gets(s)</code>\u7b49\u4ef7\u4e8e<code>cin.getline(s, s_size);</code>\u8fd8\u53ef\u4ee5\u5bf9\u8f93\u5165\u8bbe\u7f6e\u622a\u6b62\u5b57\u7b26,<code>cin.getline(s, s_size, \u2018\\n\u2019);</code></li> <li>\u5728\u4f7f\u7528<code>printf</code>\u65f6\uff0c<code>%</code>\u540e\u9762\u8ddf<code>-</code>\u53f7\u8868\u793a\u5de6\u5bf9\u9f50\uff0c\u5426\u5219\u53f3\u5bf9\u9f50\u3002<code>%</code>\u540e\u8ddf0\u8868\u793a\u75280\u8865\u9f50\uff0c\u5426\u5219\u8868\u793a\u7528\u7a7a\u683c\u8865\u9f50\uff0c<code>%</code>\u540e\u8ddf\u6570\u5b57\u8868\u793a\u5bf9\u9f50\u5bbd\u5ea6\u3002\u4f8b\u5982\uff1a<code>%-05s</code>\uff0c\u8868\u793a\u5bbd\u5ea6\u4e3a5\u53f3\u5bf9\u9f50\u8f93\u51fa<code>s</code>\uff0c\u5de6\u9762\u7a7a\u4f59\u533a\u57df\u75280\u8865\u9f50\u3002</li> <li>\u96c6\u5750\u6807\u6392\u5e8f\u6700\u597d\u7528<code>atan2</code>\uff0c\u6ce8\u610f<code>atan2(y,x)</code>\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c<code>y</code>\u5728\u524d\uff0c<code>x</code>\u5728\u540e\u3002\u8fd4\u56deX\u8f74\u6b63\u65b9\u5411\u5230\u539f\u70b9\u5230\uff08x\uff0cy\uff09\u70b9\u7684\u5c04\u7ebf\u7684\u5230\u89d2\u3002</li> <li>\u6ce8\u610f<code>vector</code>\u7528\u6cd5\uff0c<code>erase</code>\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5220\u9664\u540e\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\u8fed\u4ee3\u5668\u7684\u5199\u6cd5\u662f\uff1a<code>vector&lt;  &gt;::iterator i;</code>\u3002\u6216\u8005<code>typeof(v.begin()) i</code>\u3002</li> <li><code>priority_queue</code>\u5982\u679c\u60f3\u540c\u65f6\u5efa\u7acb\u5c0f\u6839\u5806\u548c\u5927\u6839\u5806\u9700\u8981\u8fd9\u6837\u5199<code>priority_queue&lt;Elem, vector&lt;Elem&gt; , greater&lt;Elem&gt; &gt; pq3; //\u5c0f\u6839</code>, <code>priority_queue&lt;Elem, vector&lt;Elem&gt; , less&lt;Elem&gt; &gt; pq2;//\u5927\u6839</code>\u3002\u5e76\u91cd\u8f7d\u5927\u4e8e\u548c\u5c0f\u4e8e\u53f7\u3002\u3002</li> <li><code>search(f, f+n, g, g+m);</code>\u5728<code>f</code>\u4e2d\u67e5\u627e<code>g</code>\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u4e0e<code>g</code>\u5b8c\u5168\u5339\u914d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u82e5\u65e0\u6cd5\u5339\u914d\u5219\u8fd4\u56de<code>f+m</code>\u3002</li> <li><code>copy(f,f+n,g);</code>\u5c06f\u4e2d\u7684<code>n</code>\u4e2a\u5143\u7d20\u62f7\u8d1d\u5230<code>g</code>\u4e2d\u3002</li> <li>\u4f7f\u7528<code>map</code>,\u9996\u5148<code>#include &lt;map&gt;</code>\uff0c\u7136\u540e\u58f0\u660e<code>map&lt;A\uff0cB&gt;</code>\uff0c<code>map</code>\u53ef\u4ee5\u5f53<code>B</code>\u7c7b\u578b\u6570\u7ec4\u7528\uff0c\u4e0b\u6807\u4e3a<code>A</code>\u7c7b\u578b\u3002\u6210\u5458\u51fd\u6570<code>find()</code>\u53ef\u4ee5\u67e5\u627e\u6570\u7ec4\u4e0b\u6807\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8fd4\u56de\u503c\u4e3a\u6210\u5458\u51fd\u6570<code>.end()</code>\u7684\u503c\u3002\u627e\u5230\u4e86\u8fd4\u56de\u4e0b\u6807\u3002</li> <li><code>scanf</code>\u7684\u7528\u6cd5\uff0c<code>%*[ ]</code>,\u8868\u793a\u8d8a\u8fc7<code>[ ]</code>\u4e2d\u7684\u5b57\u7b26\uff0c<code>%[a-z]</code>\u8868\u793a\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230\u4e0d\u662f<code>a-z</code>\u4e2d\u7684\u5b57\u7b26\u4e3a\u6b62\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e2d\u62ec\u53f7\u91cc\u8f93\u5165\u591a\u4e2a\u5b57\u7b26\u7528\u9017\u53f7\u9694\u5f00\u3002<code>%[^a]</code>\u8868\u793a\u8bfb\u5165\u5b57\u7b26\u4e32\u76f4\u5230\u9047\u5230\u5b57\u7b26<code>a</code>\u4e3a\u6b62\uff0c\u4f46<code>a</code>\u5e76\u6ca1\u6709\u88ab\u8bfb\u5165\u3002</li> <li><code>multiset</code>\u662f\u4e00\u4e2a\u53ef\u5b58\u50a8\u91cd\u590d\u5143\u7d20\u7684<code>set</code>\u3002\u67e5\u627e\u67d0\u5143\u7d20\u7684\u6307\u9488\u53ef\u4ee5\u7528<code>a.lower_bound(target)</code>\u3002\u63d2\u5165\u7528<code>insert</code>\uff0c\u5220\u9664\u7528<code>erase</code>\uff0c\u4e24\u8005\u6548\u7387\u90fd\u662flogN\u3002\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u4e0d\u65ad\u4fee\u6539\u4e00\u4e2a\u96c6\u5408\u5185\u5143\u7d20\u7684\u5185\u5bb9\u8fd8\u4e0d\u65ad\u8be2\u95ee\u6700\u5927\u6700\u5c0f\u503c\u7684\u95ee\u9898\u3002</li> <li><code>deque</code>\u662f\u4e00\u4e2a\u53cc\u5411\u961f\u5217\u4e5f\u53ef\u4ee5\u6c42\u89e3\u79fb\u52a8\u7a97\u53e3\u95ee\u9898\u3002</li> <li><code>stringstream</code>\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\u6d41\uff0c\u4ece\u4e2d\u8bfb\u5165\u5185\u5bb9\u3002\u7528<code>stringstream sin(inputstring);</code> \u4e4b\u540e\u8bfb\u5165\u65b9\u6cd5\u4e0e<code>cin</code>\u4e00\u6837\u3002\u9700\u8981\u5305\u542b<code>sstream</code>\u5934\u6587\u4ef6\u3002</li> <li><code>char*</code>\u8f6c\u5316\u6210string\u53ef\u4ee5\u76f4\u63a5\u7528\u7b49\u53f7\u8d4b\u503c\u3002</li> <li>\u5927\u6570\u7ec4\u4e0d\u80fd\u5f00\u5728\u51fd\u6570\u4e2d\uff0c\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf</li> <li>\u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf\u4ee5\u53ca\u7ed3\u6784\u4f53\u4e2d\u7684\u53d8\u91cf\u6700\u597d\u4e0d\u8981\u4f7f\u7528\u76f8\u540c\u7684\u540d\u5b57\uff0c\u5426\u5219\u5f53\u540d\u5b57\u6307\u4ee3\u9519\u8bef\u5f15\u8d77bug\u65f6\uff0c\u5f88\u96be\u53d1\u73b0\u9519\u8bef\u3002</li> </ul>"},{"location":"competitive_programming/data_structures/","title":"Data Structures","text":""},{"location":"competitive_programming/data_structures/#_1","title":"\u540e\u7f00\u6570\u7ec4","text":"<p>\u6784\u9020\u540e\u7f00\u6570\u7ec4\u6709\u4e24\u79cd\u7b97\u6cd5\uff0cdc3\u548c\u500d\u589e\uff0c\u6548\u7387\u5206\u522b\u4e3aO(n)\u548cO(nlogn)\uff0c\u4f46\u524d\u8005\u7684\u5b9e\u73b0\u8f83\u56f0\u96be\u3002\u540e\u7f00\u6570\u7ec4\u6784\u9020\u540e\u83b7\u5f97\u4e863\u4e2a\u6570\u7ec4\uff0csa[i]\u8868\u793a\u6240\u6709\u540e\u7f00\u6392\u5e8f\u540e\u7684\u6392\u5728\u7b2ci\u4f4d\u7684\u540e\u7f00\uff0crank[i]\u8868\u793a\u539f\u4e32\u4ece\u7b2ci\u4f4d\u5230\u7ed3\u5c3e\u7684\u90a3\u4e2a\u540e\u7f00\u5728sa\u4e2d\u7684\u6392\u540d\u662f\u591a\u5c11\u3002height[i]\u8868\u793asa[i]\u548csa[i + 1]\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002</p> <p>\u540e\u7f00\u6570\u7ec4\u7684\u6240\u6709\u540e\u7f00\u4e2d\u5305\u62ec\u7a7a\u4e32\uff0c\u56e0\u6b64\u6709strlen(s)+1\u4e2a\u540e\u7f00\u3002</p>"},{"location":"competitive_programming/data_structures/#_2","title":"\u6811\u72b6\u6570\u7ec4","text":"<p>\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u79cd\u53ef\u4ee5\u4ee5logN\u7684\u6548\u7387\u8be2\u95ee\u6570\u7ec4\u524dx\u9879\u548c\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5176\u539f\u7406\u662f\u5728\u539f\u6570\u7ec4\u4e4b\u5916\u518d\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e00\u4f4d\u5b58\u50a8\u7684\u662f\u524d\u9762\u67d0\u4e9b\u9879\u7684\u548c\uff0c\u5177\u4f53\u662f\u54ea\u4e9b\u9879\u5462\uff1f\u4f8b\u5982\uff1a\u73b0\u5728\u6211\u4eec\u6c42\u524dx\u9879\u7684\u548c\uff0c\u90a3\u4e48\u5c31\u8981\u627e\u5230\u6700\u5927\u7684a\u4f7f\u5f97x%\uff082^a\uff09=0\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5b58\u50a8\u539f\u6570\u7ec4\u4e2d\u4ecex-2^a+1 ~ x\u8fd9\u4e9b\u4f4d\u7684\u548c\u3002\u7136\u800c\u5728\u8fd9\u4e2a\u65b0\u5efa\u7684\u6570\u7ec4\u4e2d\u8fd9\u4e9b\u4f4d\u7684\u548c\u53ef\u4ee5\u66f4\u5bb9\u6613\u7684\u8868\u793a\uff0c\u56e0\u4e3a\u8be5\u5757\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65\u7684\u62c6\u5206\u6210\u4e00\u4e9b\u5728\u65b0\u5efa\u6570\u7ec4\u4e2d\u5df2\u7ecf\u6c42\u8fc7\u548c\u7684\u5757\u3002\u5177\u4f53\u5b9e\u73b0\u7528lowbit\u7684\u65b9\u6cd5\u3002</p> <p>\u5177\u4f53\u6c42a\u7684\u65b9\u6cd5\u5176\u5b9e\u5c31\u662flowbit\u561b\u3002</p> <p>\u6811\u72b6\u6570\u7ec4\u5e38\u4e0e\u4e8c\u5206\u67e5\u627e\u5171\u540c\u4f7f\u7528\uff0c\u7528\u6765\u67e5\u627e\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57k\uff0c\u6c42\u524d\u591a\u5c11\u4f4d\u6070\u597d\u548c\u4e3ak\u3002</p> <p>\u6811\u72b6\u7ed3\u6784\u9891\u7e41\u5f00\u8f9f\u6307\u9488\u7a7a\u95f4\u6d6a\u8d39\u65f6\u95f4\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f00\u8f9f\u8282\u70b9\u6570\u7ec4\uff0c\u5e76\u8ba9\u6307\u9488\u6307\u5411\u6570\u7ec4\u4e2d\u7684\u672a\u4f7f\u7528\u4f4d\u3002</p>"},{"location":"competitive_programming/data_structures/#_3","title":"\u7ebf\u6bb5\u6811","text":"<p>\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u601d\u60f3\uff0c\u65e0\u8bba\u662f\u66f4\u65b0\u8fd8\u662f\u67e5\u8be2\u90fd\u8981\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff0c\u5f53\u7ebf\u6bb5\u6070\u597d\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u65f6\u5c31\u76f4\u63a5\u5bf9\u8be5\u8282\u64cd\u4f5c\u800c\u4e0d\u518d\u5411\u4e0b\u64cd\u4f5c\u3002\u7edd\u5bf9\u4e0d\u80fd\u628a\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u5168\u90e8\u4e00\u4ee3\u5230\u5e95\uff0c\u5230\u53f6\u5b50\u8282\u70b9\u3002</p> <p>\u73b0\u5728\u9047\u5230\u7684\u7ebf\u6bb5\u6811\u5171\u6709\u5982\u4e0b\u51e0\u79cd\uff1a</p>"},{"location":"competitive_programming/data_structures/#1","title":"1.\u63d2\u5165\u70b9\u578b","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u7ebf\u6bb5\u6811\uff0c\u901a\u5e38\u662f\u5411\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u70b9\uff0c\u5373\u5bf9\u5e94\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u800c\u7ebf\u6bb5\u6811\u4e2d\u6240\u6709\u8282\u70b9\u4e5f\u90fd\u662f\u8bb0\u5f55\u7684\u5173\u4e8e\u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5df2\u63d2\u5165\u7684\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\uff0c\u8be2\u95ee\u901a\u5e38\u662f\u95ee\u7ebf\u6bb5\u6811\u4e2d\u67d0\u4e2a\u533a\u95f4\u5bf9\u53f6\u5b50\u8282\u70b9\u7684\u7edf\u8ba1\u4fe1\u606f\u3002</p>"},{"location":"competitive_programming/data_structures/#2","title":"2.\u7ebf\u8986\u76d6\u578b","text":"<p>\u5bf9\u4e8e\u8fd9\u79cd\u7ebf\u6bb5\u6811\uff0c\u4e0e\u7b2c\u4e09\u79cd\u6709\u4ee5\u4e0b\u5171\u540c\u7279\u70b9\uff1a\u6240\u6709\u8be2\u95ee\u548c\u63d2\u5165\u64cd\u4f5c\u90fd\u662f\u4ee5\u533a\u95f4\u4e3a\u5355\u4f4d\u7684\uff0c\u6bcf\u6b21\u90fd\u662f\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002\u6bcf\u4e2a\u8282\u70b9\u901a\u5e38\u4f1a\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u4ee5\u5b83\u4e3a\u8ddf\u7684\u5b50\u6811\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5728\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u6b64\u53d8\u91cf\u3002\u5f53\u64cd\u4f5c\u7684\u533a\u95f4\u80fd\u5b8c\u6574\u7684\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4\u65f6\u76f4\u63a5\u5bf9\u8be5\u8282\u70b9\u64cd\u4f5c\uff0c\u4e0d\u518d\u5411\u4e0b\u64cd\u4f5c\u3002</p> <p>\u8fd9\u79cd\u7ebf\u6bb5\u6811\u8fd8\u6709\u5176\u72ec\u6709\u7684\u7279\u70b9\uff1a\u5f53\u64cd\u4f5c\u4e00\u4e2a\u77ed\u7ebf\u6bb5\u65f6\uff0c\u8fd9\u4e2a\u77ed\u7ebf\u6bb5\u5728\u7ebf\u6bb5\u6811\u4e2d\u7531\u4e0a\u81f3\u4e0b\u8fd0\u884c\u5230\u81ea\u5df1\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u5bf9\u5e94\u957f\u7ebf\u6bb5\u7684\u8282\u70b9\uff0c\u5728\u7ecf\u8fc7\u957f\u7ebf\u6bb5\u65f6\uff0c\u8981\u628a\u957f\u7ebf\u6bb5\u7684\u8282\u70b9\u4e2d\u7684\u4fe1\u606f\u79fb\u52a8\u5230\u5176\u4e24\u4e2a\u76f4\u63a5\u5b50\u8282\u70b9\u4e2d\uff0c\u7136\u540e\u518d\u7ee7\u7eed\u5411\u4e0b\u8d70\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u533a\u95f4\u4fe1\u606f\u5b58\u50a8\u4f4d\u7f6e\u7684\u5728\u6811\u4e2d\u7684\u7eb5\u5411\u4e13\u4e00\u6027\uff0c\u5373\u6811\u4e2d\u8282\u70b9\u7684\u76f4\u7cfb\u8840\u4eb2\u4e4b\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u70b9\u8bb0\u5f55\u4fe1\u606f\u3002</p> <p>\u539f\u56e0\u5982\u4e0b\uff1a\u5728\u8fd9\u79cd\u7ebf\u6bb5\u6811\u7684\u9898\u901a\u5e38\u5177\u6709\u4e00\u4e0b\u6027\u8d28\uff1a(1)\u65b0\u63d2\u5165\u7ebf\u6bb5\u4e0e\u65e7\u7684\u7ebf\u6bb5\u91cd\u53e0\u7684\u90e8\u5206\u7684\u4fe1\u606f\u5982\u679c\u7eb5\u5411\u5206\u5e03\uff0c\u4e0d\u5b58\u50a8\u5728\u540c\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u5219\u5728\u56de\u6eaf\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u8fc7\u7a0b\u5f88\u96be\u8ba1\u7b97\u3002(2)\u65b0\u63d2\u5165\u7684\u7ebf\u6bb5\u4e0e\u65e7\u7ebf\u6bb5\u7684\u91cd\u53e0\u90e8\u5206\u53ef\u4ee5\u53ea\u4fdd\u5b58\u65b0\u7ebf\u6bb5\u4fe1\u606f\uff0c\u8fd9\u6837\u624d\u80fd\u63d2\u5165\u8fc7\u7a0b\u4e2d\u5b8c\u6574\u8986\u76d6\u4e00\u4e2a\u8282\u70b9\u65f6\u4e0d\u7528\u5411\u4e0b\u64cd\u4f5c\u3002</p>"},{"location":"competitive_programming/data_structures/#3","title":"3.\u7ebf\u4fdd\u7559\u578b","text":"<p>\u8fd9\u79cd\u7ebf\u6bb5\u6811\u9664\u4e86\u4e0e\u7b2c\u4e8c\u79cd\u7ebf\u6bb5\u6811\u7684\u5171\u540c\u7279\u70b9\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u6027\u5c31\u662f\u5373\u4f7f\u65e7\u7ebf\u6bb5\u4e0e\u65b0\u7ebf\u6bb5\u91cd\u53e0\u4e86\u65e7\u7ebf\u6bb5\u4e2d\u7684\u4fe1\u606f\u4e5f\u4ecd\u7136\u6709\u610f\u4e49\uff0c\u6216\u8005\u8981\u6c42\u63d2\u5165\u7684\u7ebf\u6bb5\u5fc5\u987b\u4fdd\u6301\u5728\u5176\u63d2\u5165\u7684\u4f4d\u7f6e\u4e0d\u5411\u4e0b\u8fed\u4ee3\u3002</p> <p>\u5176\u4e2d\u4fdd\u6301\u4f4d\u7f6e\u7684\u4e00\u79cd\u5178\u578b\u60c5\u51b5\u5c31\u662f\u6709\u5220\u9664\u64cd\u4f5c\u3002\u5220\u9664\u5e76\u4e0d\u662f\u968f\u610f\u7684\u5220\u9664\uff0c\u6bcf\u6b21\u5220\u9664\u7684\u7ebf\u6bb5\u4e0e\u539f\u6765\u63d2\u5165\u7684\u7ebf\u6bb5\u76f8\u5bf9\u5e94\uff0c\u53ea\u5220\u9664\u90a3\u4e9b\u66fe\u7ecf\u63d2\u5165\u8fc7\u7684\u7ebf\u6bb5\u3002\u8fd9\u79cd\u901a\u5e38\u6211\u4eec\u4e3a\u4e86\u5220\u9664\u65f6\u5019\u65b9\u4fbf\uff0c\u5728\u77ed\u7ebf\u6bb5\u5411\u4e0b\u8fd0\u884c\u7ecf\u8fc7\u957f\u7ebf\u6bb5\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u628a\u957f\u7ebf\u6bb5\u5411\u4e0b\u8fed\u4ee3\uff0c\u56e0\u4e3a\u957f\u7ebf\u6bb5\u662f\u8981\u88ab\u5220\u9664\u7684\uff0c\u5982\u679c\u5411\u4e0b\u8fed\u4ee3\u5220\u9664\u65f6\u5c31\u6ca1\u6709\u529e\u6cd5\u5bf9\u957f\u7ebf\u6bb5\u539f\u6765\u7684\u5b58\u50a8\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ea\u80fd\u5bf9\u5176\u8bb8\u8bb8\u591a\u591a\u7684\u540e\u4ee3\u8282\u70b9\u4e2d\u7684\u4e00\u4e9b\uff08\u90a3\u4e9b\u88ab\u8fed\u4ee3\u5230\u4e86\u7684\u8282\u70b9\uff09\u8fdb\u884c\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u6781\u9ad8\u3002\u8fd9\u79cd\u7ebf\u6bb5\u6811\u7684\u9898\u901a\u5e38\u4fe1\u606f\u7eb5\u5411\u5206\u5e03\u4e5f\u662f\u53ef\u4ee5\u56de\u6eaf\u8ba1\u7b97\u7684\u3002</p> <p>\u6709\u65f6\u5019\u53ef\u80fd\u8fd8\u8981\u7efc\u5408\u8fd0\u7528\u7b2c2\u30013\u79cd\u7ebf\u6bb5\u6811\u3002</p> <p>\u5f53\u8981\u5bf9\u4e00\u68f5\u6811\u7684\u8bb8\u591a\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u65f6\u95f4\u6233\u5bf9\u6811\u8fdb\u884c\u6807\u8bb0\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5bf9\u5b50\u6811\u8fdb\u884c\u64cd\u4f5c\u3002</p>"},{"location":"competitive_programming/data_structures/#_4","title":"\u6811\u7684\u6700\u5c0f\u8868\u793a","text":"<p>\u6811\u7684\u6700\u5c0f\u8868\u793a\u5224\u65ad\u540c\u6784\uff0c</p> <p>\u5b9a\u4e49S[t]\u8868\u793a\u4ee5t\u4e3a\u6839\u7684\u5b50\u6811\u7684\u62ec\u53f7\u5e8f\u5217</p> <p>S[t]={\u2018(\u2018,S[c1],S[c2],\u2026,S[ck],\u2019)\u2019 (c1,c2,\u2026,ck\u4e3at\u7684k\u4e2a\u5b50\u8282\u70b9\uff0cS[c1],S[c2],\u2026,S[ck]\u8981\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217)}</p> <p>\u4e3a\u4e86\u4fdd\u8bc1\u540c\u6784\u7684\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u8868\u793a\u5177\u6709\u552f\u4e00\u6027\uff0c\u6211\u4eec\u5fc5\u987b\u89c4\u5b9a\u5b50\u6811\u70b9\u7684\u987a\u5e8f\u3002\u6309\u7167\u5b50\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u5c31\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u65b9\u6cd5\u3002</p> <p>\u82e5\u6700\u5c0f\u8868\u793a\u76f8\u540c\uff0c\u5219\u4e24\u6811\u540c\u6784\u3002</p>"},{"location":"competitive_programming/dynamic_programming/","title":"Dynamic Programming","text":"<ul> <li>\u6709\u4e9b\u80fd\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u4f46\u662f\u8d85\u65f6\u7684\u9898\u76ee\uff0c\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u6cd5\u3002</li> <li>\u5f53\u770b\u5230\u6570\u636e\u8303\u56f4\u6781\u5c0f\u7684\u65f6\u5019\u8981\u8003\u8651\u7528\u4f4d\u4e8c\u8fdb\u5236\u5b58\u50a8\u72b6\u6001\uff0c\u6216\u8005\u8003\u8651\u66b4\u529b\u6c42\u89e3\u3002</li> </ul>"},{"location":"competitive_programming/dynamic_programming/#_1","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u591a\u91cd\u80cc\u5305\uff0c\u591a\u91cd\u80cc\u5305\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5b8c\u5168\u80cc\u5305\u548c01\u80cc\u5305\u3002\u5982\u679c\u67d0\u4e1c\u897f\u7684\u603b\u4f53\u79ef\u5927\u4e8e\u5305\u4f53\u79ef\uff0c\u5219\u53ef\u4ee5\u5f53\u6210\u662f\u5b8c\u5168\u80cc\u5305\u3002\u5426\u5219\u6309\u7269\u54c1\u4f53\u79ef\u76841\uff0c2\uff0c4...\u500d\u5206\u522b\u8fdb\u884c01\u80cc\u5305\u3002\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6784\u6210\u4e86\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u4f8b\u59825 \uff1d 4 \uff0b 1\uff0c 7 \uff1d 1 \uff0b 2 \uff0b 4\u3002\u90fd\u53ef\u4ee5\u7531\u8fd9\u4e9b\u6570\u5b57\u6784\u6210\u3002</p> <p>\uff08\u4e0b\u9762\u8fd9\u79cd\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8eBOOL\u578b\u7684\u80cc\u5305\uff0c\u5373weight\u548cvalue\u76f8\u7b49\u7684\u60c5\u51b5\uff09\u591a\u91cd\u80cc\u5305\uff0c\u5b66\u4e86</p> <p>\u5b66\u4e86\u79cd\u5f88\u5feb\u7684\u65b0\u65b9\u6cd5\uff0c\u5c31\u662f\u6bcf\u6b21\u586bf[j]\u65f6\u76f4\u63a5\u7531f[j-weight[i]]\u63a8\u51fa\uff0c\u524d\u63d0\u662fnum[j - weight[i]] &lt; sum[i]</p> <p>num\u6bcf\u586b\u4e00\u884c\u90fd\u8981\u6e05\u96f6\uff0cnum[j]\u8868\u793a\u5f53\u524d\u7269\u54c1\u586b\u5145j\u5927\u5c0f\u7684\u5305\u9700\u8981\u81f3\u5c11\u4f7f\u7528\u591a\u5c11\u4e2a</p> <p>\u4f46\u662f\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u6709\u4e00\u4e2a\u6761\u4ef6\uff0c\u5c31\u662f\u8981\u6c42f\u6570\u7ec4\u53ea\u80fd\u662fbool\u7c7b\u578b\u3002\u5426\u5219\u4f1a\u51fa\u9519\u3002</p> <p>\u5bf9\u4e8ebool\u578b\u5219\u4e0d\u4f1a\u6709\u6027\u4ef7\u6bd4\u7684\u95ee\u9898\uff0c\u53ea\u6709\u4f53\u79ef\u53ef\u8fbe\u548c\u4e0d\u53ef\u8fbe\u7684\u95ee\u9898\uff0c\u5728\u53ef\u8fbe\u524d\u63d0\u4e0b\u53ea\u8981\u5c3d\u91cf\u5c11\u7684\u4f7f\u7528\u5f53\u524d\u7269\u54c1\u5373\u53ef\uff0cvalue\u578b\u5219\u4e0d\u884c\uff0c\u53ef\u8fbe\u4e0d\u4e00\u5b9a\u5c11\u7528\u5f53\u524d\u7269\u54c1\uff0c\u56e0\u4e3a\u591a\u7528\u5f53\u524d\u7269\u54c1\u53ef\u80fd\u4f1a\u83b7\u5f97\u9ad8\u4ef7\u503c\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u5f53\u524d\u7269\u54c1\u6027\u4ef7\u6bd4\u6781\u9ad8\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u5927\u5c0f\u7684\u5305\u90fd\u5e94\u8be5\u5c3d\u91cf\u591a\u7684\u5f53\u524d\u7269\u54c1\u4ee5\u8ffd\u6c42\u9ad8\u4ef7\u503c\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u4f1a\u4f7f\u5f97\u540e\u9762\u5305\u5bb9\u91cf\u8db3\u591f\u5927\u65f6\uff0c\u4f1a\u6709\u4e9b\u4f4d\u7f6e\uff08j=(sum[i]+1) * weight[i]\uff09\u56e0\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6num[j - weight[i]] &lt; sum[i]\uff08\u5373\u4e4b\u524d\u5df2\u7ecf\u628a\u5f53\u524d\u7269\u54c1\u4e70\u5b8c\uff09\uff0c\u800c\u65e0\u6cd5\u8d2d\u4e70\u5f53\u524d\u7269\u54c1\u3002</p>"},{"location":"competitive_programming/dynamic_programming/#dp","title":"\u6811\u5f62DP","text":"<p>\u6811\u72b6dp\uff0c\u4e00\u822c\u91c7\u7528\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u5229\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5bf9\u6811\u8fdb\u884c\u4ece\u4e0b\u5230\u4e0a\uff0c\u5bf9\u5b50\u6811\u94fe\u8fdb\u884c\u4ece\u53f3\u5230\u5de6\u7684\u586b\u5199\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u56fe\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u7136\u540e\u4fbf\u5229\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u5728\u4fbf\u5229\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u79ef\u7d2f\u66f4\u65b0\u7236\u8282\u70b9\u7684\u503c\u3002</p>"},{"location":"competitive_programming/dynamic_programming/#dp_1","title":"\u6982\u7387DP","text":"<p>\u6982\u7387DP\u6c42\u671f\u671b\uff1a \u6211\u4eec\u4ee5\u524d\u5b66\u8fc7\u7684\u6c42\u671f\u671b\u7684\u65b9\u6cd5\u662f\u6bcf\u79cd\u7ed3\u679c\u51fa\u73b0\u7684\u6982\u7387\u4e58\u4ee5\u6bcf\u79cd\u7ed3\u679c\u7684\u503c\uff0c\u7136\u540e\u76f8\u52a0\u3002\u4f46\u662f\u901a\u5e38\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u6211\u4eec\u90fd\u8981\u5bf9\u6bcf\u4e2a\u4e2d\u95f4\u72b6\u6001\u6c42\u671f\u671b\u503c\uff0c\u6700\u7ec8\u7b97\u51fa\u603b\u7684\u671f\u671b\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u72b6\u6001\u7684\u540e\u7ee7\u72b6\u6001\uff08\u5b50\u95ee\u9898\uff09\u770b\u6210\u662f\u4e00\u4e2a\u7ed3\u679c\u503c\uff0c\u800c\u4e0d\u662f\u671f\u671b\u503c\u3002</p> <p>\u5982\u679c\u662f\u7b97\u671f\u671b\u901a\u5e38\u9700\u8981\u9006\u5411\u601d\u7ef4E(u)=sigma(pv * E(v)+C)\uff0c\u5176\u4e2dC\u662f\u72b6\u6001u\u548c\u72b6\u6001v\u4e4b\u95f4\u7684\u671f\u671b\u5dee\u503c\uff0cpv\u662fu\u72b6\u6001\u8f6c\u79fb\u5230v\u72b6\u6001\u7684\u6982\u7387\u3002v\u662fu\u62c6\u5206\u540e\u7684\u5b50\u95ee\u9898\u3002</p> <p>\u6ce8\u610f\uff1asigma(pv)=1</p> <p>\u5728\u6982\u7387dp\u4e2d\u6709\u65f6\u5019\u6211\u4eec\u8981\u6c42\u89e3\u7684f[i][j]\u53ef\u80fd\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u6211\u4eec\u5217\u51fa\u7684\u8f6c\u79fb\u65b9\u7a0b\u7684\u4e24\u4fa7\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u89e3\u65b9\u7a0b\uff0c\u5c06\u5176\u7edf\u4e00\u5230\u65b9\u7a0b\u7b49\u53f7\u7684\u4e00\u8fb9\u6765\u3002</p> <p>\u6982\u7387DP\u4e2d\u6c42\u6982\u7387\u901a\u5e38\u9700\u8981\u6b63\u5411\u601d\u7ef4\uff0c\u7531\u60c5\u51b5i\u51fa\u53d1\u5230\u8fbe\u60c5\u51b5v\u3002\u90a3\u4e48\u7528\u5982\u4e0b\u516c\u5f0f\u66f4\u65b0\u6240\u6709\u7684\u60c5\u51b5v\uff0cP(v)+=P(i) * P(v|i)\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684i\uff0c\u6240\u6709\u5230\u4e0d\u540c\u7684v\u7684\u6982\u7387\u603b\u548csigma(P(v|i))=1\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u4e2d\u72b6\u6001\u7ef4\u548c\u503c\u662f\u53ef\u4ee5\u76f8\u4e92\u8f6c\u5316\u7684\u3002\u72b6\u6001\u7ef4\u8fc7\u591a\uff0c\u6548\u7387\u4f4e\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u628a\u5c06\u5176\u8f6c\u5316\u4e3a\u6570\u7ec4\u503c\uff1b\u540c\u7406\uff0c\u6570\u7ec4\u503c\u4e0d\u552f\u4e00\u65e0\u6cd5\u89c4\u5212\u65f6\uff0c\u53ef\u4ee5\u589e\u52a0\u72b6\u6001\u7ef4\u4f7f\u72b6\u6001\u66f4\u8be6\u7ec6\u3002</p>"},{"location":"competitive_programming/game_theory/","title":"Game Theory","text":""},{"location":"competitive_programming/game_theory/#np","title":"NP\u95ee\u9898","text":"<p>NP\u95ee\u9898\uff0c\u5fc5\u80dc\u6001N\uff08next player wins\uff09,\u5fc5\u8d25\u6001P(previous player wins)</p> <p>\u5982\u679c\u67d0\u72b6\u6001\u7684\u76f4\u63a5\u540e\u7ee7\u4e2d\u6709\u5fc5\u8d25\u6001\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u5fc5\u80dc\u6001\uff0c\u5426\u5219\u4e3a\u5fc5\u8d25\u6001\u3002</p>"},{"location":"competitive_programming/game_theory/#sg","title":"SG\u51fd\u6570","text":"<p>\u8bbe\u51fd\u6570g(x)\u3002\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u6700\u7ec8\u5c40\u9762\uff08\u6700\u7ec8\u5c40\u9762\u5747\u4e3a\u5fc5\u8d25P\u5c40\u9762\uff09g(x)\u8d4b\u503c\u4e3a0\u3002\u7136\u540e\u6240\u6709\u5176\u4ed6\u5c40\u9762g(x)\u7b49\u4e8e\u5176\u76f4\u63a5\u540e\u7ee7\u72b6\u6001\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6700\u5c0f\u81ea\u7136\u6570\u3002\u8fd9\u6837\u4e00\u6765\u6240\u6709\u662fg(x)\uff1d0\u7684\u72b6\u6001\u5c31\u662f\u5fc5\u8d25\u6001\uff0c\u5176\u4ed6\u4e3a\u5fc5\u80dc\u6001\u3002</p> <p>\u6839\u636e\u5b9a\u7406\uff1a\u6709\u8fd9\u6837\u4e00\u4e2a\u6e38\u620f\uff0c\u662f\u591a\u4e2a\u6e38\u620f\u5171\u540c\u8fdb\u884c\uff0c\u6bcf\u4e2a\u6e38\u620f\u90fd\u6267\u884c\u5230\u5e95\u65f6\u624d\u7b97\u6574\u4e2a\u6e38\u620f\u7ed3\u675f\uff0c\u6bcf\u6b21\u4e00\u4e2a\u9009\u624b\u53ef\u4ee5\u628a\u4e00\u4e2a\u6e38\u620f\u8fdb\u884c\u4e00\u6b65\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u6e38\u620f\u5b83\u7684\u67d0\u72b6\u6001\u7684g(x)\u503c\uff0c\u4e3a\u6bcf\u4e2a\u5b50\u6e38\u620f\u7684\u73b0\u5728\u6240\u5904\u7684\u72b6\u6001\u7684g(x)\u503c\u6291\u6216\u8d77\u6765\u7684\u7ed3\u679c\u3002</p>"},{"location":"competitive_programming/graph_theory/","title":"Graph Theory","text":"<ul> <li>priority_queue\u7684bfs\u76f8\u5f53\u4e8e\u4f7f\u7528\u4e86dijkstra\u7684\u601d\u60f3\u3002</li> <li>\u62d3\u6251\u5e8f\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u6709\u73af\uff0c\u65b9\u6cd5\u662f\u5728BFS\u4e4b\u540e\u770b\u662f\u5426\u6709\u5165\u5ea6\u4e0d\u4e3a0\u7684\u70b9\u3002</li> </ul>"},{"location":"competitive_programming/graph_theory/#_1","title":"\u5f3a\u8fde\u901a\u5206\u652f","text":"<p>\u6c42\u5f3a\u8fde\u901a\u5206\u652f\u6709\u4e24\u79cd\u65b9\u6cd5\uff0ckorasaju\u548ctarjan\u3002</p> <p>korasaju\u662f\u8fdb\u884c\u4e24\u6b21dfs\u8986\u76d6\u5168\u56fe\uff08\u5b9e\u9645\u4e0a\u662f\u4e24\u79cddfs\uff0c\u8986\u76d6\u5168\u56fe\u9700\u8981\u591a\u6b21dfs\uff09\uff0c\u7b2c\u4e00\u6b21\u7ed9\u7ed3\u70b9\u6807\u8d77\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\uff0c\u7b2c\u4e8c\u6b21\u628a\u56fe\u53cd\u5411\u5e76\u4ece\u7ed3\u675f\u65f6\u95f4\u6700\u5927\u7684\u7ed3\u70b9\u5f00\u59cbdfs\uff0c\u6bcf\u6b21dfs\u6240\u80fd\u5230\u8fbe\u7684\u7ed3\u70b9\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u3002\u4e0b\u9762\u6765\u7b80\u5355\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u3002\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u6bcf\u6b21dfs\u7684\u8d77\u70b9\u4e3a\u7ed3\u675f\u65f6\u95f4\u6700\u5927\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u662f\u7b2c\u4e00\u6b21dfs\u4e2d\u7684\u67d0\u4e00\u68f5\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u3002\u90a3\u4e48\u4ece\u4efb\u610f\u4e00\u4e2a\u7b2c\u4e00\u6b21dfs\u7684\u6839\u8282\u70b9\u5f00\u59cb\u7684\u5bf9\u53cd\u56fe\u7684dfs\u90fd\u4e0d\u53ef\u80fd\u8de8\u8d8a\u5230\u5728\u7b2c\u4e00\u6b21dfs\u4e2d\u6bd4\u8be5\u6839\u8282\u70b9\u66f4\u65e9\u7684\u641c\u7d22\u6811\u4e2d\u3002\u56e0\u4e3a\u5047\u8bbe\u80fd\u8de8\u8d8a\uff0c\u8bf4\u660e\u53cd\u56fe\u4e2d\u665a\u7684\u641c\u7d22\u6811\u6709\u6307\u5411\u66f4\u65e9\u641c\u7d22\u6811\u7684\u8fb9\uff0c\u5373\u539f\u56fe\u4e2d\u6709\u4ece\u66f4\u65e9\u641c\u7d22\u6811\u6307\u5411\u665a\u641c\u7d22\u6811\u7684\u8fb9\u3002\u90a3\u4e48\u665a\u641c\u7d22\u6811\u6839\u672c\u5c31\u4e0d\u4f1a\u5355\u72ec\u6210\u6811\uff0c\u4e0e\u4e4b\u524d\u5047\u8bbe\u77db\u76fe\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7b2c\u4e8c\u6b21dfs\u8fc7\u7a0b\u4e2d\u6bcf\u6b21dfs\u53ea\u53ef\u80fd\u5728\u7b2c\u4e00\u6b21\u7684\u67d0\u4e00\u68f5\u5b50\u6811\u4e2d\u8fdb\u884c\uff0c\u4e0d\u53ef\u80fd\u8de8\u6811\u641c\u7d22\u3002\u7b2c\u4e8c\u6b21\u80fd\u6839u\u641c\u5230\u7684\u70b9v\uff0c\u8bf4\u660e\u539f\u56fe\u4e2dv\u53ef\u4ee5\u5230\u8fbeu\uff0c\u800c\u7b2c\u4e00\u6b21v\u4e00\u5b9a\u662fu\u6811\u4e2d\u7684\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4u\u53ef\u5230\u8fbev,\u4ece\u800c\u4e00\u5b9a\u80fd\u5f62\u6210\u5f3a\u8fde\u901a\u5206\u652f\u3002</p> <p>tarjan\u7b97\u6cd5\u5219\u662f\u5229\u7528\u4e00\u6b21dfs\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u8bb0\u5f55\u4e24\u4e2a\u503c\uff0cdfn[u]\u7ed3\u70b9\u7684\u8bbf\u95ee\u65f6\u95f4\uff0clow[u]\u7ed3\u70b9\u53ca\u5176\u5b50\u8282\u70b9\u6240\u80fd\u76f4\u63a5\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9v\u4e2ddfn[v]\u7684\u6700\u5c0f\u503c\u3002\uff08\u8fd9\u91cc\u5355\u6b21\u8fd4\u7956\u548c\u591a\u6b21\u8fd4\u7956\u662f\u65e0\u6240\u8c13\u7684\uff09\u6bcf\u6b21\u628a\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u5165\u6808\uff0c\u4e00\u65e6\u641c\u7d22\u5b8c\u67d0\u4e00\u7ed3\u70b9u\u7684\u6240\u6709\u5b50\u8282\u70b9\u540e\u53d1\u73b0low[u]==dfn[u]\u5219\u5f39\u6808\u76f4\u5230u\u88ab\u5f39\u51fa\uff0c\u6b64\u8fc7\u7a0b\u5f39\u51fa\u7684\u70b9\u4e3a\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u3002\u8fd9\u6837\u4e5f\u5c31\u4fdd\u8bc1\u4e86\uff0c\u6808\u4e2d\u6240\u6709\u7ed3\u70b9\u90fd\u662f\u53ef\u4ee5\u5230\u8fbe\u67d0\u4e00\u7236\u8282\u70b9\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u65e6\u67d0\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u6808\u4e2d\u67d0\u4e2a\u70b9\uff0c\u5b83\u4e00\u5b9a\u53ef\u4ee5\u5230\u8fbe\u67d0\u7236\u8282\u70b9\u3002</p>"},{"location":"competitive_programming/graph_theory/#2-sat","title":"2-sat\u95ee\u9898","text":"<p>\u6709n\u7ec4\u5143\u7d20\uff0c\u6bcf\u7ec4\u4e24\u4e2a\uff0c\u4ece\u4e2d\u9009\u51fan\u4e2a\uff0c\u6bcf\u7ec4\u9009\u4e14\u53ea\u9009\u4e00\u4e2a\u3002\u8fd92n\u4e2a\u5143\u7d20\u4e2d\u6709\u4e9b\u5143\u7d20\u4e4b\u95f4\u6709\u77db\u76fe\u5173\u7cfb\uff0c\u8981\u6c42\u9009\u51fa\u7684n\u4e2a\u5143\u7d20\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u4e0d\u5b58\u5728\u77db\u76fe\u3002\u95ee\u662f\u5426\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u9009\u53d6\u65b9\u6848\u3002\u8fd9\u5c31\u662f2-sat\u95ee\u9898\u3002\u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff0c\u4f8b\u5982a,b\u4e00\u7ec4\uff0cc,d\u4e00\u7ec4\uff0ca,c\u6709\u77db\u76fe\uff0c\u90a3\u4e48\u9009a\u5219\u4e0d\u80fd\u9009c\uff0c\u4e0d\u9009c\u5219\u5fc5\u987b\u9009d\u3002\u6240\u4ee5\u9009a\u5c31\u5fc5\u987b\u9009d\u3002\u540c\u7406\u9009c\u5c31\u5fc5\u987b\u9009b\u3002\u6211\u4eec\u5f15\u4e24\u6761\u8fb9\uff0ca-&gt;d, c-&gt;b\u3002\u5bf9\u4e8e\u6240\u6709\u7684\u77db\u76fe\u90fd\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u52a0\u8fb9\u3002\u8fd9\u6837\u53ea\u8981\u4ecex\u70b9\u53ef\u4ee5\u8d70\u5230y\u70b9\uff0c\u90a3\u4e48\u9009x\u70b9\u5c31\u5fc5\u987b\u9009y\u70b9\u3002\u7136\u540e\u5bf9\u5168\u56fe\u6c42\u5f3a\u8fde\u901a\u5206\u652f\u3002\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\u4e2d\uff0c\u9009\u4e86\u4e00\u4e2a\u70b9\uff0c\u5219\u5fc5\u987b\u9009\u5f3a\u8fde\u901a\u5206\u652f\u4e2d\u7684\u6240\u6709\u70b9\u3002\u5982\u679c\u6709\u67d0\u4e24\u4e2a\u70b9\u5c5e\u4e8e\u540c\u4e00\u7ec4\uff0c\u4e14\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u652f\uff0c\u5219\u5fc5\u7136\u65e0\u89e3\uff0c\u5426\u5219\u6709\u89e3\u3002\u4e3a\u4ec0\u4e48\u5426\u5219\u5fc5\u7136\u6709\u89e3\u5462\uff1f\u5047\u8bbe\u65e0\u73af\u4ecd\u65e0\u89e3\u3002\u90a3\u4e48\u4e0d\u59a8\u8bbe\u7531a\u7ecf\u8fc7\u5f88\u591a\u70b9\u6700\u7ec8\u8d70\u5411b\uff08ab\u5728\u540c\u4e00\u7ec4\uff09\u5bfc\u81f4\u4e86\u65e0\u89e3\u3002\u56e0\u4e3a\u539f\u56fe\u5177\u6709\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027\uff0c\u90a3\u4e48b\u5fc5\u7136\u4e5f\u80fd\u8d70\u5230a\uff0c\u6240\u4ee5\u5c31\u6210\u4e86\u73af\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002\u6240\u4ee5\u5047\u8bbe\u4e0d\u6210\u7acb\u3002</p>"},{"location":"competitive_programming/graph_theory/#_2","title":"\u6b27\u62c9\u8def\u5f84","text":"<p>1.\u5b9a\u7406\uff1a\u65e0\u5411\u56feG\u6709\u6b27\u62c9\u901a\u8def\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662fG\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14G\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u6216\u8005\u65e0\u5947\u5ea6\u7ed3\u70b9\u3002</p> <p>\uff081\uff09\u5f53G\u662f\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u7684\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u6b64\u4e24\u4e2a\u7ed3\u70b9\u4e3a\u7aef\u70b9\u3002</p> <p>\uff082\uff09\u5f53G\u662f\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u5fc5\u6709\u6b27\u62c9\u56de\u8def\u3002</p> <p>2.\u4e00\u4e2a\u6709\u5411\u56feD\u5177\u6709\u6b27\u62c9\u901a\u8def\uff0c\u5f53\u4e14\u4ec5\u5f53D\u662f\u8fde\u901a\u7684\uff0c\u4e14\u9664\u4e86\u4e24\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u5165\u5ea6\u5747\u7b49\u4e8e\u51fa\u5ea6\uff0c\u8fd9\u4e24\u4e2a\u7279\u6b8a\u7684\u9876\u70b9\u4e2d\uff0c\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5927\uff11\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u6bd4\u51fa\u5ea6\u5c0f\uff11\uff0e\u63a8\u8bba\uff1a\u4e00\u4e2a\u6709\u5411\u56feD\u662f\u6b27\u62c9\u56fe\uff08\u5177\u6709\u6b27\u62c9\u56de\u8def\uff09\uff0c\u5f53\u4e14\u4ec5\u5f53D\u662f\u8fde\u901a\u7684\uff0c\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u5ea6\u7b49\u4e8e\u5165\u5ea6\u3002</p>"},{"location":"competitive_programming/graph_theory/#_3","title":"\u6c42\u6b27\u62c9\u56de\u8def","text":"<p>\u5bf9\u5168\u56fe\u8fdb\u884cdfs\uff0c\u4ece\u89c4\u5b9a\u8d77\u70b9\u5f00\u59cb\u3002\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u7ecf\u8fc7\u4e86\u54ea\u4e9b\u8fb9\uff0c\u4ee5\u4fdd\u8bc1\u6bcf\u6761\u8fb9\u53ea\u7ecf\u8fc7\u4e00\u6b21\u3002\u5f53\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u8fb9\u90fd\u904d\u5386\u5b8c\u6210\u540e\uff0c\u628a\u8be5\u70b9\u5165\u6808\u3002\u6700\u540e\u4f9d\u6b21\u5f39\u6808\u5f97\u5230\u7684\u5c31\u662f\u6b27\u62c9\u8def\u5f84\u3002\u88ab\u5165\u6808\u7684\u70b9\u90fd\u662f\u8d70\u6295\u65e0\u8def\u7684\u70b9\uff0c\u5982\u679c\u5b58\u5728\u6b27\u62c9\u8def\u5f84\uff0c\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u8d70\u6295\u65e0\u8def\u4e00\u5b9a\u662f\u5728\u8d70\u56de\u5230\u8d77\u70b9\u65f6\uff0c\u56e0\u4e3a\u5176\u4ed6\u60c5\u51b5\u65e0\u8bba\u600e\u4e48\u8d70\u53ea\u53ef\u80fd\u7565\u8fc7\u4e00\u4e9b\u8fb9\uff0c\u800c\u4e0d\u53ef\u80fd\u8d70\u8fdb\u6b7b\u8def\u3002</p>"},{"location":"competitive_programming/graph_theory/#_4","title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf","text":"<p>\u5bf9\u4e8e\u4e00\u7ec4\u7c7b\u4f3c\u4e8exa-xb&gt;=c\u7684\u4e0d\u7b49\u5f0f\u6c42\u662f\u5426\u6709\u6ee1\u8db3\u7684\u89e3\uff0c\u7528bellman\u6765\u89e3\uff0cbellman\u662f\u4f7f\u5f97dist[v] &lt;= dist[u] + c\u3002</p> <p>\u5dee\u5206\u7ea6\u675f\u662f\u4f7f\u5f97A-B&gt;=C\u5373 B&lt;=A+(-C)\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8fd9\u6837\u7684\u4e0d\u7b49\u5f0f\u6211\u4eec\u5c31\u4eceA\u5411B\u8fde\u4e00\u6761\u8fb9\u8fb9\u7684\u6743\u503c\u4e3a-C\u3002</p> <p>\u89c2\u5bdf\u662f\u5426\u6709\u8d1f\u6743\u56de\u8def\uff0c\u6ca1\u6709\u5219\u6709\u89e3\uff0c\u6709\u5219\u65e0\u89e3\u3002\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5373\u4e3a\u6700\u5927\u89e3\u3002\u5982\u679c\u9898\u76ee\u6ca1\u6709\u89c4\u5b9a\u6e90\u70b9\u7684\u503c\u53ef\u4ee5\u968f\u610f\uff0c\u5176\u4f59\u70b9\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff0c\u56e0\u4e3a\u5dee\u5206\u7ea6\u675f\u7684\u6761\u4ef6\u5c31\u662f\u5404\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u8981\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u3002\u5e76\u6ca1\u6709\u89c4\u5b9a\u67d0\u4e2a\u6570\u5b57\u7684\u786e\u5b9a\u503c\uff0c\u6240\u4ee5\u7ecf\u8fc7\u6700\u77ed\u8def\u8fd0\u7b97\u540e\u4e5f\u53ea\u80fd\u5f97\u5230\u76f8\u5bf9\u503c\u3002</p> <p>\u7528spfa\u505a\u5dee\u5206\u7ea6\u675f\u3002\u4e0d\u80fd\u5411bellman\u4e00\u6837\u3002\u8fd8\u662f\u628a\u5dee\u5206\u7ea6\u675f\u7406\u89e3\u4e3a\u6c42\u6700\u957f\u8def\u6bd4\u8f83\u76f4\u89c2\u3002</p> <p>\u5bf9\u4e8edist[a]-dist[b]&gt;=c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4f5cdist[a]&gt;=dist[b]+c\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u521d\u59cb\u5316\u4e3a\u8d1f\u65e0\u7a77\uff0c\u8d77\u70b9\u521d\u59cb\u5316\u4e3a0\uff0c\u5e76\u8ba9\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u6ee1\u8db3\uff0c\u90a3\u4e48\u5c31\u662f\u5728\u6c42\u4e00\u4e2a\u6700\u957f\u8def\u3002</p> <p>spfa\u4e0d\u80fd\u5904\u7406\u975e\u8fde\u901a\u56fe\uff0c\u9700\u8981\u52a0\u5165\u8d85\u7ea7\u6e90\uff08\u4e00\u4e2a\u5230\u6240\u6709\u70b9\u90fd\u6709\u4e00\u6761\u957f\u5ea6\u4e3a0\u7684\u8fb9\u7684\u70b9\uff09\uff0c\u5e76\u628a\u8d85\u7ea7\u6e90\u4f5c\u4e3a\u8d77\u70b9\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u6269\u5c55\u8fc7\u7a0b\u4e2d\u5230\u8fbe\u6bcf\u4e2a\u70b9\u3002\u5426\u5219\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u90e8\u5206\u5185\u5bb9\u5c31\u4e0d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002</p> <p>\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u4e24\u79cd\u65b9\u5f0f\u53ef\u4ee5\u6c42\u89e3\uff0c\u6700\u77ed\u8def\u548c\u6700\u957f\u8def\u3002\u5f53\u6211\u4eec\u628a\u4e0d\u7b49\u5f0f\u6574\u7406\u6210d[a]+w&lt;=d[b]\u65f6\uff0c\u6211\u4eec\u6c42\u6700\u957f\u8def\u3002\u6574\u7406\u6210d[a]+w&gt;=d[b]\u65f6\uff0c\u6211\u4eec\u6c42\u6700\u77ed\u8def\u3002\u5f53\u6c42\u6700\u77ed\u8def\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8981\u628a\u5404\u70b9\u8ddd\u79bb\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\uff0c\u6c42\u6700\u77ed\u8def\uff0c\u628a\u5404\u70b9\u8ddd\u79bb\u9010\u6e10\u51cf\u5c0f\uff0c\u76f4\u5230\u7b26\u5408\u6240\u6709\u4e0d\u7b49\u5f0f\u3002\u4e5f\u5c31\u662f\u5f00\u59cb\u5404\u70b9\u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u540e\u6765\u901a\u8fc7\u51cf\u5c0f\u53d8\u5f97\u7b26\u5408\u4e86\uff0c\u6240\u4ee5\u4e00\u5b9a\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c\u3002\u65e2\u7136\u662f\u6c42\u6700\u5927\u503c\uff0c\u5e76\u4e14\u662f\u51cf\u5c0f\u5404\u70b9\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u628a\u5404\u70b9\u7531\u6570\u8f74\u7684\u53f3\u4fa7\u5411\u5de6\u4fa7\u62c9\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u8981\u9009\u62e9\u4e00\u4e2a\u6700\u7ec8\u5728\u6570\u8f74\u6700\u5de6\u4fa7\u7684\u70b9\uff0c\u5e76\u521d\u59cb\u5316\u4e3a0\uff0c\u628a\u6240\u6709\u6b63\u65e0\u7a77\u7684\u70b9\u62c9\u8fd1\u5230\u7b26\u5408\u4e0d\u7b49\u5f0f\u3002\u6700\u957f\u8def\u540c\u7406\u3002</p>"},{"location":"competitive_programming/graph_theory/#_5","title":"\u53cc\u8fde\u901a\u5206\u652f","text":"<p>\u53cc\u8fde\u901a\u5206\u652f\u5206\u5c31\u662f\u4e00\u4e2a\u6781\u5927\u5316\uff08\u4e00\u4e2a\u70b9\u53ea\u8981\u52a0\u8fdb\u6765\u4e4b\u540e\u8be5\u5206\u652f\u4ecd\u7136\u662f\u53cc\u8fde\u901a\u5206\u652f\u5c31\u52a0\u8fdb\u6765\uff09\u7684\u5206\u652f\uff0c\u53bb\u6389\u4efb\u610f\u4e00\u6761\u8fb9\u8fd9\u4e2a\u5206\u652f\u5185\u90e8\u4ecd\u7136\u8fde\u901a\u3002\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u53bb\u6389\u6865\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8fde\u901a\u5206\u652f\u5c31\u662f\u539f\u56fe\u7684\u53cc\u8fde\u901a\u5206\u652f\u3002</p> <p>\u6ce8\u610f\uff1a\u5317\u5927\u57f9\u8bad\u4e2d\u8bf4\u6709\u4e24\u79cd\u53cc\u8fde\u901a\uff08\u8fb9\u7684\u548c\u70b9\u7684\uff09\uff0c\u5176\u5b9e\u53ea\u6709\u8fb9\u7684\u53cc\u8fde\u901a\u624d\u662f\u53cc\u8fde\u901a\u7684\u6b63\u89c4\u5b9a\u4e49\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u5bf9\u70b9\u7684\u53cc\u8fde\u901a\u8fdb\u884c\u8ba8\u8bba\u3002</p> <p>\u6c42\u5272\u70b9\u548c\u6865\u53ef\u4ee5\u7528tarjan\u7b97\u6cd5\uff0c\u5bf9\u56fe\u8fdb\u884cdfs\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7b2c\u4e00\u6b21\u5230\u8fbe\u65f6\u95f4dfn[i]\u3002\u5e76\u8bb0\u5f55\u4e00\u4e2alow[i]\u8868\u793a\u8be5\u70b9\u53ca\u5176\u5b50\u5b59\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684dfn\u6700\u5c0f\u7684\u70b9\u3002\u8fd9\u4e2a\u5230\u8fbe\u5e76\u4e0d\u662f\u666e\u901a\u610f\u4e49\u7684\u5230\u8fbe\uff0c\u800c\u662f\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u975e\u6811\u679d\u8fb9\uff08\u4e00\u5b9a\u662f\u8fd4\u7956\u8fb9\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6ca1\u6709\u6a2a\u53c9\u8fb9\uff09\u80fd\u591f\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\uff08\u800c\u4e0d\u662f\u8fde\u7eed\u4f7f\u7528\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684\uff09\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u628alow\u603b\u7ed3\u4e3alow[u] = min(low[v]\uff08v\u4e3au\u7684\u513f\u5b50\u7ed3\u70b9\uff09,dfn[v]\uff08v\u662fu\u901a\u8fc7\u8fd4\u7956\u8fb9\u80fd\u5230\u8fbe\u7684\u70b9\uff09,dfn(u));</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7c97\u7565\u5730\u8ba4\u4e3a\u8fd4\u7956\u8fb9\u53ef\u4ee5\u8fde\u540c\u6811\u679d\u8fb9\u5171\u540c\u6784\u6210\u4e00\u4e2a\u73af\u3002\u73af\u4e00\u5b9a\u662f\u53cc\u8fde\u901a\u7684\uff08\u4e00\u5b9a\u4e0d\u662f\u6865\uff09\uff0c\u4e0d\u5728\u73af\u5185\u7684\u8fb9\u4e00\u5b9a\u662f\u6865\u3002</p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a\u82e5\u8fb9(u,v)\uff0cdfn[u] &lt; low[v]\uff08\u5373\u4e0d\u5728\u73af\u5185\uff09\uff0c\u5219\u4e3a\u6865\u3002</p> <p>\u53e6\u5916\u6709\u5b9a\u7406\uff0c\u5f53\u628a\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u7f29\u70b9\u540e\u5f62\u6210\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u53f6\u5b50\uff08\u5ea6\u4e3a1\u7684\u70b9\uff09\u7684\u4e2a\u6570\u4e3an\uff0c\u5219\u9700\u8981\u5728\u539f\u56fe\u4e2d\u6dfb\u52a0(n + 1)/2\u6761\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u539f\u56fe\u53d8\u4e3a\u6ca1\u6709\u6865\u7684\u53cc\u8fde\u901a\u56fe\u3002</p> <p>\u6c42\u5272\u70b9\u9664\u4e86tarjan\u7b97\u6cd5\uff0c\u8fd8\u6709\u4e00\u79cdO(n^2)\u7684\u7b97\u6cd5\uff0c\u5c31\u662f\u5206\u522b\u628a\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6839\uff0c\u8fdb\u884cdfs\uff0c\u770b\u6839\u6709\u51e0\u4e2a\u5b50\u7ed3\u70b9\uff0c\u5982\u679c\u5927\u4e8e\u4e00\u4e2a\u5219\u4e3a\u5272\u70b9\u5426\u5219\u4e0d\u662f\u5272\u70b9\u3002</p> <p>\u6211\u4eec\u6b63\u5e38\u7684\u505a\u6cd5\u662f\u6c42\u6865\uff0c\u5220\u6865\uff0c\u6c42\u8fde\u901a\u5206\u652f\uff0c\u7f29\u70b9\uff0c\u6784\u5efa\u65b0\u56fe\uff0c\u6c42\u53f6\u5b50\u6570\u3002</p>"},{"location":"competitive_programming/graph_theory/#_6","title":"\u6c42\u8fb9\u5f97\u53cc\u8fde\u901a\u5206\u652f\u7684\u65b9\u6cd5","text":"<p>\u6211\u4eec\u6b63\u5e38\u7684\u505a\u6cd5\u662f\u6c42\u6865\uff0c\u5220\u6865\uff0c\u6c42\u8fde\u901a\u5206\u652f\u3002</p> <p>\u6211\u4eec\u6709\u4e00\u79cd\u7b80\u4fbf\u65b9\u6cd5\u3002\u9700\u8981\u5bf9tarjan\u7b97\u6cd5\u505a\u4e00\u4e9b\u53d8\u5316\u3002\u6211\u4eec\u4e4b\u524d\u89c4\u5b9alow[u]\u662f\u5176\u5b50\u5b59\u901a\u8fc7\u4e00\u6761\u8fd4\u7956\u8fb9\u76f4\u63a5\u5230\u8fbe\u7684\u70b9\uff0c\u628a\u8fd9\u4e2a\u6539\u6210\u662f\u5176\u5b50\u5b59\u53ef\u4ee5\u8fde\u7eed\u901a\u8fc7\u591a\u6761\u8fd4\u7956\u8fb9\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u3002\u90a3\u4e48low[u]=min(low[v],dfn[u]);</p> <p>\u8fd9\u6837\u505a\u7684\u7f3a\u9677\u662f\uff0c\u4e0d\u80fd\u6c42\u5272\u70b9\u4e86\uff0c\u591a\u6b21\u8fd4\u7956\u4f1a\u5bfc\u81f4\u6c42\u5272\u70b9\u7684\u9519\u8bef\uff0c\u5728\u591a\u73af\u4e24\u4e24\u4ee5\u5355\u4e2a\u70b9\u76f8\u8fde\u6392\u6210\u4e00\u6761\u7ebf\uff0c\u4e14\u6bcf\u4e24\u4e2a\u8fde\u63a5\u70b9\u95f4\u53ea\u6709\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e2d\uff0c\u90a3\u4e9b\u8fde\u63a5\u70b9\u672c\u5e94\u662f\u5272\u70b9\uff0c\u4f46\u662f\u5728dfs\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u8fde\u63a5\u70b9\u4e4b\u95f4\u7684\u8fb9\u53c8\u6070\u597d\u4e0d\u662f\u6811\u679d\u8fb9\u7684\u8bdd\uff0clow[u]\u53ef\u80fd\u4f1a\u901a\u8fc7\u591a\u6b21\u8fd4\u7956,\u4ece\u4e00\u4e2a\u5272\u70b9\u4e0d\u65ad\u7684\u7ecf\u8fc7\u8fd9\u4e9b\u5272\u70b9\u5230\u8fbe\u6700\u4e0a\u8fb9\u7684\u5272\u70b9\u624d\u8bb0\u5f55\u4e0blow[u]\u3002</p> <p>\u8fd9\u6837\u4e2d\u95f4\u7684\u5272\u70b9\u5c31\u90fd\u4e0d\u7b26\u5408dfn(u)&lt;=low[v]\u4e86\u3002</p> <p>\u4f46\u662f\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u6240\u6709\u7684\u5bf9\u4e8e\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u90fd\u4ee5low\u6807\u8bb0\u51fa\u6765\u4e86\uff0c\u5373\u5c5e\u4e8e\u540c\u4e00\u53cc\u8fde\u901a\u5206\u652f\u7684\u6240\u6709\u70b9\u7684low\u90fd\u7b49\u4e8e\u540c\u4e00\u4e2a\u503c\u3002\u56e0\u4e3a\u5728\u4e0d\u9047\u5230\u6865\u7684\u60c5\u51b5\u4e0b\uff0clow\u53ef\u4ee5\u8fd4\u7956\u5230\u8be5\u8fde\u540c\u5206\u652f\u5728\u904d\u5386\u6811\u4e2d\u7684\u6700\u9ad8\u70b9\uff08dfn\u6700\u5c0f\u7684\u70b9\uff09\u3002</p> <p>\u8fd9\u6837\u5c31\u76f8\u5f53\u4e8e\u6574\u7406\u51fa\u4e86\u6240\u6709\u7684\u5bf9\u4e8e\u8fb9\u7684\u53cc\u8fde\u901a\u5206\u652f\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97\u65b0\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5ea6\uff0c\u6211\u4eec\u76f4\u63a5\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u89c2\u5bdf\u8fb9\u7684\u4e24\u7aef\u70b9\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u5206\u652f\uff0c\u82e5\u4e0d\u5c5e\u4e8e\u5219\u628a\u4e24\u70b9\u5728\u65b0\u56fe\u4e2d\u7684\u5ea6\u6570+1\u3002\u7136\u540e\u770b\u6709\u591a\u5c11\u4e2a\u5ea6\u6570\u4e3a1\u7684\u70b9\uff08\u5373\u53f6\u5b50\u6570\uff09\uff0c\u518d\u901a\u8fc7\u516c\u5f0f\u8ba1\u7b97\u5373\u53ef\u3002</p>"},{"location":"competitive_programming/graph_theory/#_7","title":"\u6c42\u70b9\u53cc\u8fde\u901a\u5206\u652f\u7684\u65b9\u6cd5","text":"<p>\u9996\u5148\uff0c\u7528tarjan\u7b97\u6cd5\uff0cdfs\u904d\u5386\u5168\u56fe\uff0c\u7528dfs_dep\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u6df1\u5ea6\uff0c\u7528low_point\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u90bb\u5c45\u4e2d\uff08\u4e0d\u5305\u62ec\u7236\u4eb2\uff09\u6df1\u5ea6\u6700\u6d45\u7684\u8282\u70b9\uff0c\u628a\u904d\u5386\u8fc7\u7a0b\u4e2d\u6240\u6709\u6811\u679d\u8fb9\u5165\u6808\u3002\u6211\u4eec\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9u\uff0c\u5982\u679c\u5728\u904d\u5386\u5b8c\u6210\u5b83\u7684\u67d0\u5b50\u8282\u70b9v\u4e4b\u540e\uff0c\u53d1\u73b0low_point[v]==dfs_dep[u]\u5219\u8bf4\u660eu\u4e0ev\u53ca\u5176\u5b50\u5b59\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u6211\u4eec\u4e0d\u505c\u5f39\u6808\u76f4\u5230\u8fb9(u,v)\u88ab\u5f39\u51fa\uff0c\u548c\u8fd9\u4e9b\u8fb9\u76f8\u5173\u7684\u70b9\u6784\u6210\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u5f53\u6211\u4eec\u904d\u5386\u5b8c\u70b9u\u7684\u6240\u6709\u5b50\u5b59\u4e4b\u540e\uff0c\u82e5\u53d1\u73b0low_point[u]==dfs_dep[u]\uff0c\u5219\u8bf4\u660eu\u4e0d\u4f1a\u518d\u4e0e\u5176\u7956\u5b97\u8282\u70b9\u6784\u6210\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u4f46\u6b64\u65f6\u8fd8\u6709\u4e00\u6761u\u7684\u7236\u4eb2\u548cu\u7684\u8fde\u8fb9\u5b58\u5728\u4e8e\u6808\u9876\uff0c\u6211\u4eec\u8981\u628a\u5b83\u5f39\u51fa\u5e76\u4e22\u5f03\u3002</p>"},{"location":"competitive_programming/graph_theory/#_8","title":"\u65e0\u5411\u56fe\u7684\u6700\u5c0f\u5272","text":"<p>stoer_wagner\u7b97\u6cd5</p> <p>\u6bcf\u6b21\u4ece0\u70b9\u5f00\u59cb\uff0c\u8fdb\u884c\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u6700\u5927\u751f\u6210\u6811\u7684\u64cd\u4f5c\uff0c\u552f\u4e00\u4e0e\u6700\u5927\u751f\u6210\u6811\u7684\u533a\u522b\u5c31\u662f\u5728\u9009\u62e9\u628a\u54ea\u4e2a\u70b9\u52a0\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u6839\u636e\u8fde\u5230\u5b83\u7684\u8fb9\u7684\u957f\u5ea6\uff0c\u800c\u662f\u6839\u636e\u5b83\u5230\u6811\u7684\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u548c\u3002\u7136\u540e\u8bb0\u5f55\u6700\u540e\u4e24\u4e2a\u8fdb\u6811\u7684\u70b9\u5408\u5e76\uff08\u7f29\u70b9\uff09\uff0c\u5e76\u7528\u8fd9\u4e24\u70b9\u95f4\u7684\u5272\u6765\u66f4\u65b0\u6700\u5c0f\u503c\u3002\u7136\u540e\u4e0d\u65ad\u91cd\u590d\u6b64\u64cd\u4f5c\uff08\u751f\u6210\u6811\u3001\u7f29\u70b9\u3001\u6700\u5c0f\u503c\uff09\uff0c\u76f4\u5230\u6240\u6709\u70b9\u90fd\u7f29\u4e3a1\u70b9\u3002</p>"},{"location":"competitive_programming/graph_theory/#_9","title":"\u6811\u5f62\u56fe\u4e2d\u7684\u6700\u957f\u8def","text":"<p>\u6c42\u6811\u5f62\u56fe\u4e2d\u6700\u957f\u8def\u7684\u65b9\u6cd5\uff1a\u4efb\u9009\u4e00\u7ed3\u70b9\u4e3a\u6839\uff0c\u627e\u6700\u6df1\u7ed3\u70b9\u3002\u5e76\u4ee5\u6700\u6df1\u7ed3\u70b9\u4e3a\u6839\uff0c\u627e\u6700\u6df1\u7ed3\u70b9\uff0c\u5176\u6df1\u5ea6\u5373\u4e3a\u6240\u6c42\u3002</p>"},{"location":"competitive_programming/hash/","title":"Hashing","text":"<ul> <li>hash\u6570\u7ec4\u7684\u65b9\u6cd5\u662fret = ((ret &lt;&lt; 2) + (a[i] &gt;&gt; 4)) ^ (a[i] &lt;&lt; 10);</li> <li>hash\u4e00\u4e2a\u6570\u5217f\uff0c\u6570\u5217\u4e2d\u7684\u6bcf\u4e00\u4f4d\u90fd\u6709\u4e00\u4e2a\u4e0a\u9650g\uff0c\u5373f[i]&lt;=g[i]\u3002\u90a3\u4e48\u53ef\u4ee5\u5c06\u8be5\u6570\u5217hash\u4e3a\u8fd9\u6837\u4e00\u4e2a\u6574\u6570\uff0c\u8fd9\u4e2a\u6574\u6570\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7684\u8fdb\u5236\u90fd\u4e0d\u540c\uff0c\u7b2ci\u4f4d\u7684\u8fdb\u5236\u662fg[i] + 1\uff0c\u5373\u7b2ci\u4f4d\u6ee1g[i]+1\u5219\u53ef\u8fdb\u4f4d\u3002\uff08\u5f53\u7136\u7531\u4e8eg[i]\u662f\u8be5\u4f4d\u7684\u4e0a\u9650\uff0c\u6240\u4ee5\u6c38\u8fdc\u4e0d\u53ef\u80fd\u8fdb\u4f4d\uff09\u7528p[i]\u8868\u793a(g[0]+1) * (g[1]+1) * ... * (g[i - 1]+1)\u3002\u90a3\u4e48\u6700\u7ec8f\u88abhash\u7684\u7ed3\u679c\u662fp[0] * f[0]+p[1] * f[1]+...\u3002</li> </ul>"},{"location":"competitive_programming/interview/","title":"Interview Tips","text":"<ul> <li>If you cannot finish all, try to achieve something complete by not implementing all the subroutines.</li> <li>Use the first 5 minutes to confirm the details of the problem interactively with the interviewer.</li> <li>When confirming the details, try to use the testing techniques to test the details of the problem definition.</li> <li>When testing, use CLEAN: corner cases, large cases, empty cases, average cases, negative cases.</li> <li>Ask for hints if you don't have the optimal solution.,</li> </ul>"},{"location":"competitive_programming/interview/#google-docs-settings","title":"Google Docs Settings","text":"<ul> <li><code>Tools</code> -&gt; <code>Preference</code>: Uncheck <code>Automatically capitalize words</code> and <code>Use smart quotes</code>.</li> <li>Change font to <code>Roboto Mono</code>.</li> </ul>"},{"location":"competitive_programming/java/","title":"Java Grammar","text":"<ul> <li>java\u8f93\u51fa\u53ef\u4ee5\u4f7f\u7528<code>System.out.format();</code>\u8fd9\u4e2a\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0e<code>printf();</code>\u76f8\u540c\u3002</li> <li>\u4f7f\u7528\u6587\u4ef6\u8f93\u5165\u8981\u629b\u51fa\u5f02\u5e38\u3002</li> </ul> <pre><code>public static void main(String args[]) throws FileNotFoundException\nScanner cin =new Scanner (new FileInputStream(\"t.txt\"));\n</code></pre> <ul> <li>\u7528java,\u9ad8\u7cbe\u5ea6\u3002\u8bfb\u5165\u9ad8\u7cbe\u5ea6\u6570\u53ef\u4ee5\u76f4\u63a5\u7528<code>cin.nextBigInteger();</code></li> <li>\u4f7f\u7528BigDecimal\u80fd\u5904\u7406\u8f93\u5165\u7684\u6570\u5b57\u524d\u7aef\u6709\uff0b\u53f7\u7684\u60c5\u51b5</li> <li>java\u4e2dStringBuffer\u7c7b\u4f3c\u4e8eC++\u4e2d\u7684String\uff0cappend\u51fd\u6570\u53ef\u4ee5\u5728\u5176\u540e\u9762\u6dfb\u52a0\u5b57\u7b26\uff0creverse\u53ef\u4ee5\u53cd\u8f6c\u3002</li> <li>java\u4e2dBigInteger\u7684intValue\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5176\u8f6c\u4e3aint\u3002</li> </ul>"},{"location":"competitive_programming/network_flow/","title":"Network Flow","text":"<ul> <li>\u6e10\u6e10\u5f00\u59cb\u7406\u89e3\u7f51\u7edc\u6d41\u7684\u9898\u578b\u4e86\uff0c\u662f\u4e00\u79cd\u53ef\u4ee5\u81ea\u7531\u5206\u914d\uff0c\u6c42\u6700\u4f18\u5206\u914d\u65b9\u6848\u7684\u9898\u3002</li> <li>\u7531\u4e8e\u6700\u77ed\u8def\u7b97\u6cd5\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u5b50\u7b97\u6cd5\uff0c\u6240\u4ee5\u6709\u4e9b\u6700\u77ed\u8def\u7684\u9898\u53ef\u80fd\u8981\u7528\u5230\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002</li> <li>\u5728\u6700\u5c0f\u8def\u7ecf\u8986\u76d6\u4e2d\uff0c\u539f\u56fe\u7684\u90bb\u63a5\u77e9\u9635\u548c\u4e8c\u5206\u56fe\u5339\u914d\u7684\u90bb\u63a5\u77e9\u9635\u4e3a\u540c\u4e00\u77e9\u9635\u3002</li> <li>\u5f53\u7f51\u7edc\u6d41\u7684\u8282\u70b9\u6570\u8fc7\u591a\u4e14\u53ef\u5206\u7c7b\u7684\u65f6\u5019\uff0c\u5e94\u601d\u8003\u662f\u5426\u53ef\u4ee5\u5206\u591a\u6b21\u8fdb\u884c\u6700\u5927\u6d41\u6765\u6c42\u89e3\u3002</li> </ul>"},{"location":"competitive_programming/network_flow/#_1","title":"\u6700\u5c0f\u5272","text":"<p>\u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u95ee\u9898\uff0c\u770b\u5230\u5206\u914d\u6210\u4e24\u90e8\u5206\u7684\u9898\uff0c\u5c31\u8981\u60f3\u5230\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u3002\u6700\u5c0f\u5272\u5c31\u662f\u5c06\u539f\u56fe\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6e90\uff0c\u4e00\u90e8\u5206\u5305\u542b\u6c47\u3002\u5272\u503c\u662f\u4e00\u90e8\u5206\u6307\u5411\u53e6\u4e00\u90e8\u5206\u7684\u8fb9\u7684\u521d\u59cb\u5bb9\u91cf\u7684\u603b\u548c\uff0c\u4e0d\u52a0\u4e0a\u53e6\u4e00\u90e8\u5206\u6307\u5411\u672c\u90e8\u5206\u7684\u8fb9\u7684\u5bb9\u91cf\u3002\u800c\u5bf9\u4e8e\u6700\u5c0f\u5272\u6765\u8bf4\uff0c\u6700\u5927\u6d41\u6d41\u91cf\u5c31\u662f\u6700\u5c0f\u5272\u7684\u5bb9\u91cf\u3002\u56e0\u4e3a\u5728\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\u4e2d\u603b\u6709\u4e00\u4e9b\u8fb9\u6210\u4e3a\u6d41\u91cf\u7ee7\u7eed\u589e\u52a0\u7684\u74f6\u9888\uff0c\u800c\u8fd9\u4e9b\u8fb9\u4e00\u5b9a\u662f\u6d41\u6ee1\u7684\uff0c\u53ea\u8981\u5c06\u8fd9\u4e9b\u8fb9\u5272\u5f00\u5c31\u5fc5\u5b9a\u53ef\u4ee5\u963b\u65ad\u6240\u6709\u6d41\u3002\u6700\u5927\u6d41\u540e\u5206\u6790\u539f\u56fe\u5982\u4f55\u5212\u5206\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5c06\u6700\u5927\u6d41\u540e\u6b8b\u4f59\u7f51\u7edc\u4e2ds\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u5212\u4e3as\u96c6\u5408\uff0c\u5176\u4f59\u70b9\u5212\u4e3at\u96c6\u5408\uff0c\u6ce8\u610f\uff0c\u4e0d\u662f\u53ef\u4ee5\u8d70\u5230t\u7684\u70b9\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6709\u4e00\u6761\u7ebf\u4e0a\u7684\u591a\u6761\u8fb9\u90fd\u6d41\u6ee1\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6709\u4e9b\u70b9\u5c31\u65e0\u6cd5\u8d70\u5230t\uff0c\u800c\u4e14s\u4e5f\u8d70\u4e0d\u5230\u5b83\u3002 \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe</p> <p>\u5bf9\u4e8e\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u7684\u5efa\u56fe\uff0c\u901a\u5e38\u5e76\u4e0d\u662f\u76f4\u63a5\u60f3\u5230\u6700\u5c0f\u5272\uff0c\u800c\u662f\u5148\u5efa\u7acb\u4e00\u4e2a\u7ed3\u70b9\u5e26\u6743\uff0c\u8fb9\u4e0d\u5e26\u6743\u7684\u56fe\uff0c\u5e76\u5bf9\u8be5\u56fe\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\u95ed\u5408\u5b50\u56fe\uff1a\u4ece\u56fe\u4e2d\u9009\u51fa\u82e5\u5e72\u4e2a\u70b9\uff0c\u53ca\u8fd9\u4e9b\u70b9\u76f8\u90bb\u7684\u8fb9\uff0c\u82e5\u6240\u6709\u8fb9\u7684\u7aef\u70b9\u90fd\u662f\u88ab\u9009\u51fa\u7684\u70b9\uff0c\u5219\u8be5\u5b50\u56fe\u4e3a\u95ed\u5408\u5b50\u56fe\u3002\u4e3a\u6c42\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u800c\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u3002\u8f6c\u5316\u7684\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u628a\u6240\u6709\u7ed3\u70b9\u5230\u7ed3\u70b9\u7684\u8fb9\u90fd\u8bbe\u7f6e\u4e3a\u5bb9\u91cf\u4e3a\u6b63\u65e0\u7a77\u7684\u8fb9\uff0c\u5e76\u4ece\u6e90\u5f15\u8fb9\u5230\u6743\u503c\u4e3a\u6b63\u7684\u7ed3\u70b9\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u70b9\u7684\u6743\u503c\u3002\u4ece\u6743\u503c\u4e3a\u8d1f\u7684\u70b9\u5f15\u8fb9\u5230\u6c47\uff0c\u8fb9\u7684\u5bb9\u91cf\u4e3a\u7ed3\u70b9\u6743\u503c\u7684\u76f8\u53cd\u6570\u3002</p> <p>\u7f51\u7edc\u6d41\u7684\u6700\u5c0f\u5272\u5bf9\u5e94\u7740\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u8fd9\u4e2a\u95ed\u5408\u5b50\u56fe\u662f\u6240\u6709\u5272\u540e\u6e90\u70b9\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u3002\u800c\u8fd9\u4e2a\u95ed\u5408\u5b50\u56fe\u7684\u6743\u5c31\u7b49\u4e8e\u539f\u56fe\u4e2d\u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002\u4e00\u4e2a\u6b63\u6743\u70b9\u7684\u8fb9\u88ab\u5272\uff0c\u5219\u5176\u80fd\u5230\u8fbe\u7684\u8d1f\u6743\u70b9\u4e0d\u5fc5\u56e0\u4e3a\u5b83\u88ab\u5272\uff0c\u82e5\u6b63\u6743\u70b9\u4e0d\u88ab\u5272\uff0c\u5219\u5176\u80fd\u5230\u8fbe\u7684\u8d1f\u6743\u70b9\u5fc5\u987b\u88ab\u5272\uff0c\u5426\u5219\u56fe\u8fde\u901a\u3002\u6ca1\u88ab\u5272\u7684\u6b63\u6743\u70b9\u548c\u88ab\u5272\u7684\u8d1f\u6743\u70b9\u5fc5\u7136\u7ec4\u6210\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\u6240\u4ee5\u6bcf\u79cd\u5272\u6cd5\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\u3002\u88ab\u5272\u6389\u7684\u8fb9\u5bf9\u5e94\u7684\u70b9\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u6b63\u6743\u70b9\uff0c\u53e6\u4e00\u79cd\u662f\u88ab\u9009\u4e2d\u4e86\u7684\u8d1f\u6743\u70b9\u3002\u6211\u4eec\u7528\u6b63\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5f97\u5230\u7684\u662f\uff0c\u88ab\u9009\u4e2d\u7684\u6b63\u6743\u70b9\u51cf\u53bb\u88ab\u9009\u4e2d\u7684\u8d1f\u6743\u70b9\u7684\u6743\u503c\uff08\u7edd\u5bf9\u503c\uff09\u3002\u51cf\u6570\u8d8a\u5c0f\uff0c\u7ed3\u679c\u8d8a\u5927\u3002\u4e3a\u4fdd\u8bc1\u95ed\u5408\u5b50\u56fe\u6743\u503c\u6700\u5927\uff0c\u5f97\u662f\u5272\u503c\u6700\u5c0f\u3002</p>"},{"location":"competitive_programming/network_flow/#_2","title":"\u6700\u5927\u6743\u72ec\u7acb\u96c6","text":"<p>\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u8fd8\u5bf9\u5e94\u7740\u4e8c\u5206\u56fe\u6700\u5927\u6743\u72ec\u7acb\u96c6\u3002\u5373\u6bcf\u4e2a\u70b9\u6709\u4e2a\u6743\u503c\uff08\u6b63\u503c\uff09\uff0c\u9009\u4e2d\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u70b9\u4e0d\u76f8\u90bb\uff0c\u4e14\u6743\u503c\u6700\u5927\u3002\u6700\u5927\u6743\u72ec\u7acb\u96c6\u7b49\u4e8e\u70b9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u3002\u6700\u5c0f\u6743\u8986\u76d6\u96c6\u7b49\u4e8e\u6700\u5c0f\u5272\u3002\u7f51\u7edc\u6d41\u5efa\u56fe\u65b9\u6cd5\uff1a\u6e90\u4e0e\u4e8c\u5206\u56fe\u7b2c\u4e00\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u63a5\uff0c\u4e8c\u5206\u56fe\u7b2c\u4e8c\u96c6\u5408\u4e2d\u7684\u70b9\u4e0e\u6c47\u8fde\u63a5\uff0c\u6d41\u91cf\u5747\u4e3a\u6743\u503c\u3002\u628a\u4e8c\u5206\u56fe\u4e4b\u95f4\u7684\u8fb9\u5728\u7f51\u7edc\u6d41\u56fe\u4e2d\u6dfb\u52a0\u4e3a\u6d41\u91cf\u6b63\u65e0\u7a77\u7684\u8fb9\u3002\u82e5\u4e00\u4e2a\u4e0e\u6e90\u8fde\u63a5\u7684\u70b9\u672a\u88ab\u5272\uff0c\u5219\u5176\u76f8\u90bb\u7684\u4e0e\u6c47\u8fde\u63a5\u7684\u70b9\u5fc5\u5b9a\u88ab\u5272\u3002\u8fd9\u51e0\u4e2a\u4e8c\u5206\u56fe\u4e2d\u7684\u8fb9\u5c31\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u88ab\u5272\u3002\u6240\u4ee5\u6bcf\u79cd\u5272\u5bf9\u5e94\u4e00\u4e2a\u70b9\u96c6\u8986\u76d6\u3002\u6700\u5c0f\u5272\u5bf9\u5e94\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002</p>"},{"location":"competitive_programming/network_flow/#_3","title":"\u7f51\u7edc\u6d41\u7684\u5316\u7b80","text":"<p>\u7f51\u7edc\u6d41\u6709\u65f6\u9700\u8981\u5bf9\u56fe\u8fdb\u884c\u5316\u7b80</p> <p>\u5316\u7b80\u89c4\u5219\uff1a</p> <ul> <li>\u89c4\u5f8b 1. \u5982\u679c\u51e0\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7684\u6765\u6e90\u5b8c\u5168\u76f8\u540c\uff0c\u4e14\u6d41\u91cf\u4e3a+\u221e\uff0c\u5219\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u3002</li> <li>\u89c4\u5f8b 2. \u5982\u679c\u51e0\u4e2a\u8282\u70b9\u7684\u6d41\u91cf\u7684\u53bb\u5411\u5b8c\u5168\u76f8\u540c\uff0c\u4e14\u6d41\u91cf\u4e3a+\u221e\uff0c\u5219\u53ef\u4ee5\u628a\u5b83\u4eec\u5408\u5e76\u6210\u4e00\u4e2a\u3002</li> <li>\u89c4\u5f8b 3. \u5982\u679c\u4ece\u70b9 u \u5230\u70b9 v \u6709\u4e00\u6761\u5bb9\u91cf\u4e3a +\u221e \u7684\u8fb9\uff0c\u5e76\u4e14 u \u662f v \u7684\u552f\u4e00\u6d41\u91cf\u6765\u6e90\uff0c\u6216\u8005 v \u662f u \u7684\u552f\u4e00\u6d41\u91cf\u53bb\u5411\uff0c\u5219\u53ef\u4ee5\u628a u \u548c v \u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u3002</li> </ul>"},{"location":"competitive_programming/network_flow/#_4","title":"\u6700\u5c0f\u70b9\u96c6\u8986\u76d6","text":"<p>\u6700\u5c0f\u70b9\u96c6\u8986\u76d6==\u6700\u5927\u5339\u914d\u3002\u5728\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u539f\u56e0\uff0c\u9996\u5148\uff0c\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e00\u5b9a&gt;=\u6700\u5927\u5339\u914d\uff0c\u56e0\u4e3a\u5047\u8bbe\u6700\u5927\u5339\u914d\u4e3an\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f97\u5230\u4e86n\u6761\u4e92\u4e0d\u76f8\u90bb\u7684\u8fb9\uff0c\u5149\u8986\u76d6\u8fd9\u4e9b\u8fb9\u5c31\u8981\u7528\u5230n\u4e2a\u70b9\u3002\u73b0\u5728\u6211\u4eec\u6765\u601d\u8003\u4e3a\u4ec0\u4e48\u6700\u5c0f\u70b9\u51fb\u8986\u76d6\u4e00\u5b9a&lt;=\u6700\u5927\u5339\u914d\u3002\u4efb\u4f55\u4e00\u79cdn\u4e2a\u70b9\u7684\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\uff0c\u4e00\u5b9a\u53ef\u4ee5\u8f6c\u5316\u6210\u4e00\u4e2an\u7684\u6700\u5927\u5339\u914d\u3002\u56e0\u4e3a\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u80fd\u627e\u5230\u81f3\u5c11\u4e00\u6761\u53ea\u6709\u4e00\u4e2a\u7aef\u70b9\u5728\u70b9\u96c6\u4e2d\u7684\u8fb9\uff08\u5982\u679c\u627e\u4e0d\u5230\u5219\u8bf4\u660e\u8be5\u70b9\u6240\u6709\u7684\u8fb9\u7684\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u90fd\u88ab\u8986\u76d6\uff0c\u6240\u4ee5\u8be5\u70b9\u5219\u6ca1\u5fc5\u8981\u88ab\u8986\u76d6\uff0c\u548c\u5b83\u5728\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e2d\u76f8\u77db\u76fe\uff09\uff0c\u53ea\u8981\u6bcf\u4e2a\u7aef\u70b9\u90fd\u9009\u62e9\u4e00\u4e2a\u8fd9\u6837\u7684\u8fb9\uff0c\u5c31\u5fc5\u7136\u80fd\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5339\u914d\u6570\u4e0e\u70b9\u96c6\u8986\u76d6\u7684\u70b9\u6570\u76f8\u7b49\u7684\u5339\u914d\u65b9\u6848\u3002\u591a\u4e2a\u8986\u76d6\u70b9\u90fd\u53ea\u80fd\u9009\u5219\u540c\u4e00\u4e2a\u70b9\u7ec4\u6210\u5339\u914d\u7684\u60c5\u51b5\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\u3002\u56e0\u4e3a\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u51e0\u4e2a\u70b9\u4e00\u5b9a\u4e0d\u662f\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002\u56e0\u4e3a\u8fd9\u51e0\u4e2a\u70b9\uff08\u8bbe\u4e3a\u70b9\u96c6\u5408S\uff09\u65e2\u7136\u53ea\u6709\u4e00\u4e2a\u70b9A\u53ef\u4ee5\u7ec4\u6210\u5339\u914d\uff0c\u8bf4\u660e\u8fd9\u4e9bS\u4e2d\u7684\u70b9\u9664\u53bb\u4e0e\u70b9A\u7684\u8fb9\u4e4b\u5916\u7684\u5176\u4ed6\u8fb9\u7684\u53e6\u4e00\u7aef\u90fd\u662f\u8986\u76d6\u70b9\uff0c\u5373S\u4e2d\u70b9\u7684\u5176\u4ed6\u8fb9\u90fd\u5df2\u88ab\u5176\u4ed6\u70b9\u8986\u76d6\u5230\uff0cS\u91cc\u70b9\u88ab\u9009\u4e3a\u8986\u76d6\u96c6\u662f\u8981\u8986\u76d6S\u4e0eA\u8fde\u63a5\u7684\u90a3\u6761\u8fb9\uff0c\u6240\u4ee5\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u5e94\u8be5\u9009\u90a3\u4e2a\u70b9A\u5373\u53ef\u8986\u76d6\u8fd9\u4e9b\u8fb9\uff0c\u800c\u4e0d\u9009S\u4e2d\u7684\u70b9\u3002\u6240\u4ee5\u6700\u5927\u5339\u914d\u81f3\u5c11\u4e3a\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u6570\uff0c\u5373\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u4e00\u5b9a&lt;=\u6700\u5927\u5339\u914d\u3002\u7efc\u4e0a\uff0c\u4e8c\u8005\u76f8\u7b49\u3002</p>"},{"location":"competitive_programming/network_flow/#_5","title":"\u6700\u5927\u72ec\u7acb\u96c6","text":"<p>\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6 \uff1d x + y \u2013 maxmatch;</p> <p>\u539f\u56e0\u5982\u4e0b\uff0cmaxmatch\u4e3a\u6700\u5927\u5339\u914d\uff0c\u6700\u5927\u5339\u914d=\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u3002\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u8981\u6c42\u6bcf\u4e2a\u8fb9\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7aef\u70b9\u88ab\u9009\u4e2d\uff0c\u6700\u5c11\u9009\u51e0\u4e2a\u3002\u800c\u7528\u603b\u70b9\u96c6\u53d6\u6700\u5c0f\u70b9\u96c6\u8986\u76d6\u7684\u8865\u96c6\u7684\u610f\u4e49\u5c31\u662f\uff0c\u6bcf\u6761\u8fb9\u81f3\u591a\u6709\u4e00\u4e2a\u70b9\u88ab\u9009\u4e2d\uff0c\u6700\u591a\u9009\u51e0\u4e2a\u3002\u8fd9\u6070\u597d\u5c31\u662f\u6700\u5927\u72ec\u7acb\u96c6\u7684\u8981\u6c42/</p>"},{"location":"competitive_programming/network_flow/#_6","title":"\u6700\u5c0f\u8def\u5f84\u8986\u76d6","text":"<p>\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u7684\u67d0\u4e9b\u70b9\u4e0a\u653e\u4f1e\u5175\uff0c\u53ef\u4ee5\u4f7f\u4f1e\u5175\u53ef\u4ee5\u8d70\u5230\u56fe\u4e0a\u6240\u6709\u7684\u70b9\u3002\u4e14\u6bcf\u4e2a\u70b9\u53ea\u88ab\u4e00\u4e2a\u4f1e\u5175\u8d70\u4e00\u6b21\u3002\u95ee\u81f3\u5c11\u653e\u591a\u5c11\u4f1e\u5175\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5728\u56fe\u4e0a\u7684\u8fb9\u4e2d\u9009\u51fa\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e0d\u8d85\u8fc71\u3002</p> <p>\u6211\u4eec\u5f00\u59cb\u5728\u56fe\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u653e\u4e0a\u4f1e\u5175\uff0c\u7136\u540e\u6ca1\u9009\u51fa\u4e00\u6761\u8fb9\uff0c\u5c31\u610f\u5473\u7740\u6709\u4e00\u4e2a\u4f1e\u5175\u53ef\u4ee5\u88ab\u53d6\u6d88\u6389\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u7684\u6700\u5c11\u4f1e\u5175\u6570=\u70b9\u603b\u6570\uff0d\u80fd\u9009\u51fa\u7684\u6700\u5927\u8fb9\u6570\u3002</p> <p>\u6211\u4eec\u53ea\u8981\u6c42\u6700\u5927\u8fb9\u6570\u5373\u53ef\u3002\u7528\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u52a0\u5165\u4e8c\u5206\u56fe\u7684\u4e24\u4e2a\u70b9\u96c6\uff0c\u539f\u56fe\u4e2d\u4e00\u6761\u7531a\u5230b\u7684\u8fb9\u5728\u4e8c\u5206\u56fe\u4e2d\u662f\u4e00\u6761\u7531\u7b2c\u4e00\u4e2a\u70b9\u96c6\u4e2d\u7684\u7b2ca\u4e2a\u70b9\u5230\u7b2c\u4e8c\u4e2a\u70b9\u96c6\u4e2d\u7684\u7b2cb\u4e2a\u70b9\u3002\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u70b9\u96c6\u7684\u70b9\u4e0e\u51fa\u8fb9\u6709\u5173\uff0c\u7b2c\u4e8c\u4e2a\u4e0e\u5165\u8fb9\u6709\u5173\u3002\u5339\u914d\u65f6\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u7684\u5982\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e0d\u8d85\u8fc71\u3002\u6c42\u6700\u5927\u5339\u914d\u5373\u4e3a\u80fd\u9009\u51fa\u7684\u6700\u5927\u8fb9\u6570\u3002</p>"},{"location":"competitive_programming/network_flow/#_7","title":"\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41","text":"<p>\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u610f\u601d\u662f\uff1a\u6700\u5c0f\u8d39\u7528\u7684\u6700\u5927\u6d41\uff0c\u5373\u5728\u4f17\u591a\u60c5\u51b5\u7684\u6700\u5927\u6d41\u4e2d\u6311\u9009\u4e00\u4e2a\u8d39\u7528\u6700\u5c0f\u7684\u3002\u5176\u8ba1\u7b97\u6d41\u7a0b\u5927\u81f4\u662f\uff1a\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u6839\u636e\u8d39\u7528\u6765\u770b\u7684\u6700\u77ed\u8def\uff0c\u7136\u540e\u5bf9\u8fd9\u6761\u6700\u77ed\u8def\u8fdb\u884c\u589e\u52a0\u6d41\u91cf\uff0c\u76f4\u5230\u6240\u6709\u8def\u5f84\u6d41\u91cf\u90fd\u4e0d\u80fd\u589e\u52a0\u4e3a\u6b62\u3002</p> <p>\u7f51\u7edc\u6d41\uff0c\u5bf9\u6d41\u8fc7\u6bcf\u4e2a\u70b9\u7684\u6d41\u91cf\u6709\u9650\u5236\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u62c6\u70b9\uff0c\u628a\u6bcf\u4e2a\u7ed3\u70b9\u62c6\u6210\u4e24\u4e2a\uff0c\u4e00\u4e2a\u5165\u70b9\uff0c\u4e00\u4e2a\u51fa\u70b9\uff0c\u5e76\u4ece\u5165\u70b9\u5230\u51fa\u70b9\u8fde\u63a5\u4e00\u6761\u8fb9\u6d41\u91cf\u4e3a\u70b9\u7684\u7684\u6d41\u5411\u9650\u5236\u3002\u81f3\u4e8e\u539f\u6765\u7684\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u6d41\u91cf\u5c31\u662f\u6b63\u65e0\u7a77\u3002</p>"},{"location":"competitive_programming/number_theory/","title":"Number Theory","text":"<ul> <li>\u5982\u679c\u4e00\u4e2a\u8d28\u6570\u53ef\u4ee5\u8868\u793a\u62104x+1\u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u6210\u4e24\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u548c\u3002\uff082\u662f\u7279\u6b8a\u60c5\u51b5\uff09</li> <li>\u6839\u636e\u6b27\u62c9\u5e38\u6570\uff0c(M/1+M/2+...+M/M)\u7ea6\u7b49\u4e8eMlnM\u3002\u5728\u6570\u8bba\u7684\u7b97\u6cd5\u4e2d\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u3002</li> </ul>"},{"location":"competitive_programming/number_theory/#_1","title":"\u6b27\u62c9\u51fd\u6570","text":"<p>\u6b27\u62c9\u51fd\u6570euler(n)\u8868\u793a\u5c0f\u4e8e\u7b49\u4e8en\u7684\u4e0en\u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5728\u6b27\u62c9\u51fd\u6570\uff0c\u8ba4\u4e3a\u5982\u679c\u4e24\u6570\u6700\u5927\u516c\u7ea6\u6570\u4e3a1\uff0c\u5219\u4e24\u6570\u4e92\u8d28\u3002\u6240\u4ee5\uff0cn\u4e0e1\u4e5f\u4e92\u8d28\uff0c\u4e14euler(1)=1\u3002</p> <p>\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\u03c6(x)=x(1-1/p1)(1-1/p2)(1-1/p3)(1-1/p4)\u2026..(1-1/pn),\u5176\u4e2dp1, p2\u2026\u2026pn\u4e3ax\u7684\u6240\u6709\u4e0d\u91cd\u590d\u7684\u8d28\u56e0\u6570\uff0cx\u662f\u4e0d\u4e3a0\u7684\u6574\u6570\u3002</p> <p>\u6b27\u62c9\u51fd\u6570\u9012\u63a8\u6c42\u6cd5\uff1a\u6b27\u62c9\u51fd\u6570\u7684\u539f\u59cb\u516c\u5f0f\u662f\u7528n\u8fde\u4e58\uff081-1/pi\uff09\u3002pi\u662fn\u7684\u4e0d\u91cd\u590d\u7684\u7d20\u56e0\u5b50\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2an^2\u7ea7\u7b5b\u6cd5\u7684\u65b9\u5f0f\u53bb\u7b5b\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5408\u6570\u90fd\u4f1a\u88ab\u5176\u6240\u6709\u7d20\u56e0\u5b50\u7b5b\u4e00\u6b21\uff0c\u53ea\u8981\u5728\u7b5b\u7684\u65f6\u5019\u5728\u5176\u7ed3\u679c\u4e0a\u4e58\u4e0a\uff081-1/pi\uff09\u5373\u53ef\u3002</p>"},{"location":"competitive_programming/number_theory/#fibonacci","title":"Fibonacci","text":"<p>Fibonacci\u6570\u5217\u7684\u901a\u9879\u516c\u5f0f\u4e2d\u7531\u4e8e\uff08sqrt(5)-1\uff09^n\u592a\u5c0f\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\uff0c\u65e0\u8bba\u662f\u5426\u5ffd\u7565\uff0cn\u90fd\u5fc5\u987b\u5927\u4e8e16\u3002</p>"},{"location":"competitive_programming/number_theory/#_2","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5","text":"<p>\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\u6c42\u5173\u4e8ex\uff0cy\u7684\u65b9\u7a0b<code>a*x+b*y=gcd(a,b)</code>\u7684\u4e00\u7ec4\u6574\u6570\u89e3\u3002\u7528\u7b97\u6cd5\u6a21\u677f\u53ea\u80fd\u6c42\u51fa\u4e00\u7ec4\u89e3\uff0c\u800c\u6b64\u65b9\u7a0b\u6709\u6570\u7a77\u591a\u89e3\u3002\u8bbe\u5176\u4e00\u7ec4\u7279\u89e3\u4e3ax0,y0\u3002\u5219\u5176\u901a\u89e3\u5f62\u5f0f\u4e3a\uff1a<code>x=x0-t*b/g\uff0cy=y0+t*a/g</code>\u3002</p> <p>\u5176\u4e2dg\u8868\u793agcd(a,b)\u3002t\u662f\u4e00\u4e2a\u7528\u6765\u534f\u8c03x\u548cy\u540c\u6b65\u53d8\u5316\u7684\u53d8\u91cf\u3002</p> <p>\u8be5\u7b97\u6cd5\u540c\u6837\u53ef\u7528\u4e8e\u6c42\u89e3<code>a*x+b*y=c</code>\u7684\u5f62\u5f0f\u7684\u65b9\u7a0b\u3002\u65b9\u6cd5\u662f\u5148\u6c42\u89e3<code>a*x+b*y=gcd(a,b)</code>\u3002\u7136\u540e\u4e24\u7aef\u540c\u65f6\u9664\u4ee5gcd(a,b)\u518d\u4e58\u4ee5c\u5373\u53ef\u6574\u7406\u51fa\u539f\u65b9\u7a0b\u7684\u89e3\u3002\u5373<code>a*(x*c/g)+b*(y*c/g)=c</code>\u3002\u8be5\u65b9\u7a0b\u6709\u89e3\u7684\u6761\u4ef6\u662fc\u80fd\u88abgcd(a,b)\u6574\u9664\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u662f\u5728\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u4e00\u4e9b\u4e1c\u897f\u3002<code>gcd(a,b)=gcd(b,a%b)</code> =&gt; <code>a*x1+b*y1 = b*x2 + a%b*y2</code> =&gt; <code>x1=y2; y1=x2-[a/b]*y2;</code></p> <p>\u4e5f\u5c31\u662f\u539f\u6765\u7684\u6b27\u51e0\u91cc\u5fb7\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u503c\u524a\u51cf\u65b9\u7a0b\u53f3\u4fa7\uff0c\u800c\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u8981\u540c\u65f6\u5bf9\u5de6\u4fa7\u8fdb\u884c\u53d8\u5316\u4ee5\u6c42\u89e3\u3002\u9012\u5f52\u5230\u6700\u5e95\u5c42\u65f6\u6709\uff1ab=0,gcd(a,b)=a; x=1,y=0;</p> <p>\u9664\u6cd5\u662f\u4e0d\u652f\u6301\u6a21\u8fd0\u7b97\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5c06\u9664\u6cd5\u8f6c\u5316\u4e3a\u4e58\u6cd5\uff0c\u4f8b\u5982\u9664\u4ee530\u53d8\u4e3a\u4e58\u4ee530\u7684\u9006\u5143\u3002</p> <p>\u9006\u5143\u7684\u610f\u601d\u662f\uff0c\u5982\u679ca\u3001b\u4e92\u4e3amod c\u4e0b\u7684\u9006\u5143\uff0c\u5219a * b = 1 (mod c)\u3002</p> <p>\u6c42\u9006\u5143\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7gcd(30,MOD,x,y)\uff0c\u628ax/gcd(30,MOD)\u6574\u7406\u52300\uff5eMOD-1\u8303\u56f4\u5185\u5373\u4e3a30\u7684\u9006\u5143\u3002</p>"},{"location":"competitive_programming/number_theory/#_3","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406","text":"<p>\u5373\uff1a\u5f53p\u662f\u8d28\u6570\u4e14a\u548cp\u4e92\u8d28\uff0c\u90a3\u4e48a^(p-1)=1 (mod p)</p> <p>\u800c\u9006\u5143\u7684\u5b9a\u4e49\u662fx * y=1 (mod p)\u5219y\u662fx\u7684\u9006\u5143\u3002\u4ee4x=a\uff0c\u4e14a\u4e0ep\u4e92\u8d28\uff0c\u5219\u7531a^(p-1)=1 (mod p)\u53ef\u5f97\uff1ay=a^(p-2)\u3002</p> <p>\u5bf9\u4e8e\u6c42a\u7684\u9006\u5143\u8fd9\u4e2a\u95ee\u9898\uff0c<code>a&lt;p</code>\u4e14p\u662f\u8d28\u6570\uff0c\u81ea\u7136\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7684\u7ed3\u8bba\uff0ca\u7684\u9006\u5143\u5c31\u662fa^(p-2)\u3002</p>"},{"location":"competitive_programming/number_theory/#_4","title":"\u6b27\u62c9\u5b9a\u7406","text":"<p>\u6b27\u62c9\u5b9a\u7406\uff0c\u5bf9\u4e8e\u6b63\u6574\u6570a,n\uff0c\u82e5gcd(a,n)=1\uff0c\u5219\u6709a^euler(n)=1(mod n)\u3002</p>"},{"location":"competitive_programming/number_theory/#_5","title":"\u5feb\u901f\u5e42\u53d6\u6a21","text":"<p>\u5feb\u901f\u5e42\u53d6\u6a21\u7b97\u6cd5\uff0c\u53ea\u8981p * 2\u5728long long\u8303\u56f4\u5185\u90fd\u53ef\u4ee5\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u7b97\u6cd5\u4e2dlong long * long long\u7684\u60c5\u51b5\u53ef\u80fd\u8d85\u754c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u5feb\u901f\u5e42\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u6b21\u4e58\u6cd5\u8ba1\u7b97\uff0c\u5373\u5feb\u901f\u5e42\u662f\u7528\u4e58\u6cd5\u4ee3\u66ff\u5e42\u8ba1\u7b97\u4ee5\u4fbf\u53ca\u65f6\u53d6\u6a21\uff0c\u800c\u6b64\u7b97\u6cd5\u5219\u662f\u7528\u52a0\u6cd5\u4ee3\u66ff\u4e58\u6cd5\u8ba1\u7b97\u53ca\u65f6\u53d6\u6a21\uff0c\u628a\u5feb\u901f\u5e42\u4e2d\u7684\u4e58\u6cd5\u6362\u6210\u52a0\u6cd5\uff0c\u5e73\u65b9\u6362\u6210\u4e582\u5373\u53ef\u3002</p>"},{"location":"competitive_programming/number_theory/#catalan","title":"catalan\u6570","text":"<p>\u4ee4h(1)\uff1d1,h(0)=1\uff0ccatalan\u6570\u6ee1\u8db3</p> <p>\u9012\u5f52\u5f0f\uff1a\u3000\u3000h(n)= h(0) * h(n-1)+h(1) * h(n-2) + ... + h(n-1)h(0) (\u5176\u4e2dn&gt;=2) \u3000\u3000</p> <p>\u53e6\u7c7b\u9012\u5f52\u5f0f\uff1a\u3000\u3000h(n)=((4 * n-2)/(n+1)) * h(n-1); \u3000\u3000</p> <p>\u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a\u3000\u3000h(n)=C(2n,n)/(n+1) (n=1,2,3,...)</p> <p>\u5b83\u7684\u9002\u7528\u60c5\u51b5\u6709\uff1a</p> <p>1\u3001\u53d6\u72692n\u4e2a\uff0c\u7269\u54c1\u5206a,b\u4e24\u79cd\uff0c\u4efb\u610f\u65f6\u523b\u624b\u4e2d\u7684a\u7269\u54c1\u6570&lt;=b\u7269\u54c1\u6570\uff0c\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002\u6700\u7ec82n\u7269\u54c1\u4e2d\uff0c\u6709n\u4e2aa\uff0cn\u4e2ab\u3002</p> <p>2\u3001\u628a(n+2)\u8fb9\u5f62\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u4e09\u89d2\u5f62\u9762\u79ef\u7ec4\u5408\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002</p> <p>3\u3001\u4e00\u5708\u67092n\u4e2a\u70b9\u4e24\u4e24\u8fde\u7ebf\u4e0d\u4ea4\u53c9\u7684\u65b9\u6cd5\u6570\u4e3ah(n)\u3002</p> <p>4\u3001\u6709n\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u6709h(n)\u79cd\u4e0d\u540c\u7684\u6784\u9020\u3002</p>"},{"location":"competitive_programming/number_theory/#stirling","title":"stirling\u516c\u5f0f","text":"<p>stirling\u516c\u5f0f\uff1alim(n\u2192\u221e) (n/e)^n * (2\u03c0n)^(1/2) / n! = 1\u3002\u53ef\u7528\u6765\u6c42n!\u7684\u4f4d\u6570\u3002</p>"},{"location":"competitive_programming/number_theory/#miller-rabin","title":"Miller-rabin","text":"<p>Miller-rabin\u7b97\u6cd5\u662f\u4e00\u4e2a\u7528\u6765\u5feb\u901f\u5224\u65ad\u4e00\u4e2a\u6b63\u6574\u6570\u662f\u5426\u4e3a\u7d20\u6570\u7684\u7b97\u6cd5\u3002\u5b83\u5229\u7528\u4e86\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u5373\uff1a\u5982\u679cp\u662f\u8d28\u6570\uff0c\u4e14a\uff0cp\u4e92\u8d28\uff0c\u90a3\u4e48a^(p-1) mod p\u6052\u7b49\u4e8e1\u3002\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6240\u6709\u5c0f\u4e8ep\u7684\u6b63\u6574\u6570a\u6765\u8bf4\u90fd\u5e94\u8be5\u590d\u5408a^(p-1) mod p\u6052\u7b49\u4e8e1\u3002\u90a3\u4e48\u6839\u636e\u9006\u5426\u547d\u9898\uff0c\u5bf9\u4e8e\u4e00\u4e2ap\uff0c\u6211\u4eec\u53ea\u8981\u4e3e\u51fa\u4e00\u4e2aa\uff08a &lt; p\uff09\u4e0d\u7b26\u5408\u8fd9\u4e2a\u6052\u7b49\u5f0f\uff0c\u5219\u53ef\u5224\u5b9ap\u4e0d\u662f\u7d20\u6570\u3002Miller-rabin\u7b97\u6cd5\u5c31\u662f\u591a\u6b21\u7528\u4e0d\u540c\u7684a\u6765\u5c1d\u8bd5p\u662f\u5426\u4e3a\u7d20\u6570\u3002</p> <p>\u4f46\u662f\u6bcf\u6b21\u5c1d\u8bd5\u8fc7\u7a0b\u4e2d\u8fd8\u505a\u4e86\u4e00\u4e2a\u4f18\u5316\u64cd\u4f5c\uff0c\u4ee5\u63d0\u9ad8\u7528\u5c11\u91cf\u7684a\u68c0\u6d4b\u51fap\u4e0d\u662f\u7d20\u6570\u7684\u6982\u7387\u3002\u8fd9\u4e2a\u4f18\u5316\u53eb\u505a\u4e8c\u6b21\u63a2\u6d4b\u3002\u5b83\u662f\u6839\u636e\u4e00\u4e2a\u5b9a\u7406\uff1a\u5982\u679cp\u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8ex(0 &lt; x &lt; p)\uff0c\u82e5x^2 mod p \u7b49\u4e8e1\uff0c\u5219x=1\u6216p-1\u3002\u9006\u5426\u547d\u9898\uff1a\u5982\u679c\u5bf9\u4e8ex(0 &lt; x &lt; p)\uff0c\u82e5x^2 mod p \u4e0d\u7b49\u4e8e1\uff0c\u5219p\u4e0d\u662f\u7d20\u6570\u3002\u6839\u636e\u8fd9\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u8981\u8ba1\u7b97a^(p-1) mod p\u662f\u5426\u7b49\u4e8e1\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff0c\u8bbep-1=(2^t) * k\u3002\u6211\u4eec\u4ecea^k\u5f00\u59cb\uff0c\u4e0d\u65ad\u5c06\u5176\u5e73\u65b9\u76f4\u5230\u5f97\u5230a^(p-1)\uff0c\u4e00\u65e6\u53d1\u73b0\u67d0\u6b21\u5e73\u65b9\u540emod p\u7b49\u4e8e1\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u7b26\u5408\u4e86\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\u7684\u9006\u5426\u547d\u9898\u4f7f\u7528\u6761\u4ef6\uff0c\u7acb\u5373\u68c0\u67e5x\u662f\u5426\u7b49\u4e8e1\u6216p-1\uff0c\u5982\u679c\u4e0d\u662f\u5219\u53ef\u76f4\u63a5\u5224\u5b9ap\u4e3a\u5408\u6570\u3002</p>"},{"location":"competitive_programming/number_theory/#pollard-rho","title":"pollard-rho","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u7528\u6765\u5feb\u901f\u5bf9\u6574\u6570\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\uff0c\u9700\u8981\u4e0eMiller-rabin\u5171\u540c\u4f7f\u7528\u3002\u6c42n\u7684\u8d28\u56e0\u5b50\u7684\u57fa\u672c\u8fc7\u7a0b\u662f\uff0c\u5148\u5224\u65adn\u662f\u5426\u4e3a\u7d20\u6570\uff0c\u5982\u679c\u4e0d\u662f\u5219\u6309\u7167\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u8fc7\u7a0b\u6765\u751f\u6210\u968f\u673a\u6570\u5e8f\u5217\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u751f\u6210\u7684\u968f\u673a\u6570\u5224\u65ad\u4e0en\u662f\u5426\u4e92\u8d28\uff0c\u5982\u679c\u4e92\u8d28\u5219\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u968f\u673a\u6570\u3002\u5982\u679c\u4e0d\u4e92\u8d28\u5219\u5c06\u5176\u516c\u56e0\u5b50\u8bb0\u4f5cp\uff0c\u9012\u5f52\u6c42\u89e3p\u548cn/p\u7684\u56e0\u5b50\u3002\u5982\u679cn\u662f\u7d20\u6570\u5219\u76f4\u63a5\u8fd4\u56den\u4e3a\u5176\u7d20\u56e0\u5b50\u3002</p> <p>\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u8d28\u6570\u7684\u4e2a\u6570\u662flog(x)\u7ea7\u7684\u3002</p> <p>c(n,k)(k&lt;=n)\u7684\u5947\u5076\u6027\u53d6\u51b3\u4e8e(n-k)\u4e0ek\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u662f\u5426\u5b58\u5728\u540c\u4e00\u4f4d\u4e0a\u7684\u4e24\u4e2a\u6570\u7801\u5747\u4e3a1\uff0c\u82e5\u5b58\u5728\uff0c\u5219\u4e3a\u5076\u6570\uff0c\u53cd\u4e4b\u4e3a\u5947\u6570</p> <p>\u4f7f\u7528lowbit\uff0c\u5373\u4e8c\u8fdb\u5236\u7801\u4e2d\u7684\u6700\u9760\u540e\u76841\u548c\u540e\u9762\u76840\u7ec4\u6210\u7684\u6570\u5b57\uff0c\u52a0\u4e0a\u6216\u51cf\u53bb\u8fd9\u4e2a\u5c31\u76f8\u5f53\u4e8e\u628a\u6570\u5b57\u5f52\u7ed3\u5230\u5de6\u4fa7\u6700\u8fd1\u7684\u6216\u8005\u53f3\u4fa7\u6700\u8fd1\u76842\u7684x\u6b21\u5e42\u6574\u5757\u4e0a\uff0cx\u521a\u597d\u5927\u4e8e\u8be5\u6570\u7684\u542b\u6709\u56e0\u5b502\u7684\u4e2a\u6570\u3002</p>"},{"location":"competitive_programming/number_theory/#_6","title":"\u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\u7ea6\u745f\u592b\u95ee\u9898\uff0c\u6709n\u4e2a\u4eba\u7ad9\u6210\u4e00\u5708\uff0c\u4f9d\u6b21\u7f16\u53f70\uff5en-1\uff0c\u7f16\u53f7\u4e3a(m-1)%n\u7684\u4eba\u51fa\u5c40\uff0c\u7136\u540e\u5269\u4e0b\u7684n-1\u4e2a\u4eba\u91cd\u65b0\u7f16\u53f7\uff0c\u8ba9\u539f\u6765\u5728m\u540e\u9762\u7684\u90a3\u4e2a\u4eba\u7f16\u53f7\u4e3a0\uff0c\u5269\u4e0b\u7684\u4f9d\u6b21\u9012 \u589e\uff0c\u7f16\u53f7\u4ece1\uff5en-2\u3002\u518d\u6b21\u8ba9\u7f16\u53f7\u4e3a(m-1)%(n-1)\u7684\u4eba\u51fa\u5c40\u3002\u4e0d\u65ad\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u81f3\u53ea\u5269\u4e00\u4e2a\u4eba\u4e3a\u6b62\u3002\u95ee\u8fd9\u4e2a\u4eba\u5728\u7b2c\u4e00\u6b21\u7f16\u53f7\u65f6\u7684\u7f16\u53f7\u3002\u60f3\u8981\u89e3\u51b3\u7ea6\u745f\u592b\u95ee\u9898\u6211 \u4eec\u8981\u9006\u63a8\u3002\u8bd5\u8003\u8651\u521a\u624d\u8fc7\u7a0b\u7684\u9006\u8fc7\u7a0b\u3002\u5f53\u524d\u5269\u4f59x\u4eba\u4e14\u5df2\u7f16\u53f7\uff0c\u9006\u8fc7\u7a0b\u4e5f\u5c31\u662f\u628a\u90a3\u4e2a\u521a\u521a\u51fa\u5c40\u7684\u4eba\u91cd\u65b0\u52a0\u8fdb\u5708\u91cc\u6765\uff0c\u5e76\u8fd8\u539f\u4e0a\u4e00\u6b21\u7684\u7f16\u53f7\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\u662f\u5728\u5f53\u524dx \u4eba\u4e2d\u7684\u7f16\u53f7\u4e3a0\u7684\u90a3\u4e2a\u4eba\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u4eba\uff0c\u8ba9\u90a3\u4e2a\u4eba\u7684\u7f16\u53f7\u4e3a(m-1)%(x+1)\uff0c\u5176\u4f59\u4eba\u7684\u7f16\u53f7\u53ef\u6839\u636e\u8fd9\u4e2a\u65b0\u52a0\u8fdb\u6765\u7684\u4eba\u7684\u7f16\u53f7\u6765\u786e\u5b9a\u3002\u6211\u4eec\u8981\u4ece\u6700\u540e\u5269\u4e00\u4e2a\u4eba\u7684\u60c5\u51b5 \u5f00\u59cb\u9006\u63a8\u5230\u5269\u4f59n\u4e2a\u4eba\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u90a3\u4e2a\u6700\u7ec8\u80dc\u5229\u7684\u4eba\u7684\u7f16\u53f7\u6309\u7167\u9006\u8fc7\u7a0b\u7684\u7f16\u53f7\u53d8\u5316\u89c4\u5f8b\u8fdb\u884c\u53d8\u5316\u5373\u53ef\u3002\u5176\u53d8\u5316\u89c4\u5f8b\u4e3a\uff0c\u8bbe\u539f\u6765\u83b7\u80dc\u8005\u5e8f\u53f7\u4e3aa\uff0c\u52a0\u5165\u4e00\u4e2a \u51fa\u5c40\u7684\u4eba\u4e4b\u540e\u4eba\u6570\u4e3ax\uff0c\u5219\u73b0\u5728\u83b7\u80dc\u8005\u7684\u5e8f\u53f7\u5e94\u5f53\u53d8\u4e3a(a+m)%x\uff0c\u5373\u8ba9\u5e8f\u53f7\u8ddf\u539f\u6765\u6bd4\u9519\u4f4d\u4e86m\u4e2a\u4eba\u3002\u603b\u7ed3\u6210\u9012\u63a8\u516c\u5f0f\uff1af(n)=(f(n-1)+m)%n</p> <p>\u8981\u6c42\u7528\u4e24\u4e24\u4ea4\u6362\u7684\u65b9\u5f0f\u7ed9\u4e00\u4e2a\u6570\u5217\u6392\u5e8f\uff0c\u4ea4\u6362f[i]\u548cf[j]\u7684\u4ee3\u4ef7\u4e3af[i]+f[j]\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002\u5177\u4f53\u65b9\u6cd5\u5c31\u662f\u5728\u6570\u5217\u4e2d\u627e\u7f6e\u6362\u73af\uff0c\u6bcf\u4e2a\u73af\u6709\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u7528\u6700\u5c0f\u7684\u5143\u7d20\u5c06\u73af\u91cc\u6240\u6709\u5143\u7d20\u5f52\u4f4d\uff0c\u53e6\u4e00\u79cd\u662f\u7528\u5168\u6570\u5217\u6700\u5c0f\u5143\u7d20\u4e0e\u73af\u5185\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\uff0c\u5e76\u5728\u73af\u5185\u7528\u8fd9\u4e2a\u5168\u6570\u5217\u6700\u5c0f\u5143\u7d20\u5c06\u73af\u91cc\u6240\u6709\u5143\u7d20\u5f52\u4f4d\uff0c\u518d\u4e0e\u539f\u73af\u5185\u6700\u5c0f\u5143\u7d20\u4ea4\u6362\u56de\u6765\u3002</p>"},{"location":"competitive_programming/python/","title":"Python Grammar","text":""},{"location":"competitive_programming/python/#common-mistakes","title":"Common Mistakes","text":"<ul> <li>When use '', \"\", (), [], and {}, type the pair before insert the contents.</li> <li>() and [] can be easily misused with each other.</li> <li><code>for index, elem in enumerate(...):</code>. index before elem.</li> <li>Use <code>//</code> to divide integers and get integer part of the result.</li> </ul>"},{"location":"competitive_programming/python/#data-structures","title":"Data Structures","text":""},{"location":"competitive_programming/python/#queue-stack","title":"Queue &amp; Stack","text":"<pre><code>import collections\ndq = collections.deque()\ndq.append(1)\ndq.append(2)\ndq.appendleft(3)\nprint(dq)  # [3, 1, 2]\ndq.pop()\nprint(dq)  # [3, 1]\ndq.popleft()\nprint(dq)  # [1]\nwhile dq:\n  a = dq.popleft()\n  ...\nprint(dq[-1])\n</code></pre>"},{"location":"competitive_programming/python/#hash-table","title":"Hash Table","text":"<pre><code>a = {}\na['ab'] = 5\nprint('ab' in a)  # True\nprint(a['ab'])  # 5\na.pop('ab')\nprint('ab' in a)  # False\n\na = collections.defaultdict(lambda : 0)\na = collections.defaultdict(list)\n\n# Set is not subscriptable.\na = set()\na.add('ab')\nprint('ab' in a)  # True\na.remove('ab')\nprint('ab' in a)  # False\n</code></pre>"},{"location":"competitive_programming/python/#heap","title":"Heap","text":"<pre><code>import heapq\nhp = heapq.heapify([1, 5, 8, 2, 3])\nheapq.heappush(hp, 9)\nprint(heapq.heappop(hp))  # 1\n# Use negative value if want a max heap.\n# or use cmp_to_key(cmp).\n</code></pre>"},{"location":"competitive_programming/python/#comparison","title":"Comparison","text":"<pre><code># Traditional cpp style cmp function.\ndef cmp(a, b):\n    return a - b\n\nfrom functools import cmp_to_key\n\nlist_b = sorted(list_a, key=cmp_to_key(cmp))\n\n# For anything not supporting key argument\n# wrap them into a class with cmp as comparison function\nk_class = cmp_to_key(cmp)\nlist_b = []\nfor a in list_a:\n  list_b.append(k_class(a))\nlist_b = sorted(list_b)\nfor b in list_b:\n  print(b.obj)\n</code></pre>"},{"location":"competitive_programming/python/#iterator","title":"Iterator","text":""},{"location":"competitive_programming/python/#product","title":"Product","text":"<pre><code>from itertools import product\nproduct('ABCD', 'xy') # list of tuples, Ax Ay Bx By Cx Cy Dx Dy\n</code></pre>"},{"location":"competitive_programming/python/#group-by","title":"Group By","text":"<pre><code>from itertools import groupby\n[k for k, g in groupby('AAAABBBCCDAABBB')]  # --&gt; ['A', 'B', 'C', 'D', 'A', 'B']\n[list(g) for k, g in groupby('AAAABBBCCD')]  # --&gt; [['A','A','A','A'], ['B','B','B'], ['C','C'], ['D']]\n</code></pre>"},{"location":"competitive_programming/python/#combination","title":"Combination","text":"<pre><code>from itertools import combinations, combinations_with_replacement\ncombinations('ABCD', 2)  # list of tuples AB AC AD BC BD CD\ncombinations_with_replacement('ABCD', 2)  # list of tuples AA AB AC AD BB BC BD CC CD DD\n</code></pre>"},{"location":"competitive_programming/python/#permutation","title":"Permutation","text":"<pre><code>from itertools import permutations\npermutations('ABCD', 2)  # list of tuples AB AC AD BA BC BD CA CB CD DA DB DC\n</code></pre>"},{"location":"competitive_programming/python/#strings","title":"Strings","text":""},{"location":"competitive_programming/python/#split-strings","title":"Split Strings","text":"<pre><code>a = 'aba'\nprint(a.split('a'))  # ['', 'b', '']\nprint(a.split('x'))  # ['aba']\n</code></pre>"},{"location":"competitive_programming/python/#count-occurance","title":"Count Occurance","text":"<pre><code>a = 'abababa'\nprint(a.count('aba'))  # 2\n</code></pre>"},{"location":"competitive_programming/python/#case-changes","title":"Case Changes","text":"<pre><code>a = 'aBA'\nprint(a.upper())  # ABA\nprint(a.lower())  # aba \n</code></pre>"},{"location":"competitive_programming/python/#check-single-char","title":"Check single char","text":"<pre><code>a.isdecimal()  # True if a consists of 0-9\na.islower()  # True if a consists of a-z\na.isupper()  # True if a consists of A-Z\na.isalpha()  # True if a consists of a-z,A-Z.\n</code></pre>"},{"location":"competitive_programming/python/#io","title":"I/O","text":""},{"location":"competitive_programming/python/#from-file","title":"From File","text":"<pre><code>file = open('somefile')\nfor line in file:\n  do_something()\nfile.close()\n</code></pre>"},{"location":"competitive_programming/python/#from-standard-io","title":"From standard IO","text":"<pre><code>import sys\n\nfor line in sys.stdin:\n  do_something()\n</code></pre>"},{"location":"competitive_programming/rmq_lca/","title":"RMQ &amp; LCA","text":""},{"location":"competitive_programming/rmq_lca/#rmq","title":"RMQ","text":"<p>1.\u7406\u89e3\u4e86rmq\u7684st\u7b97\u6cd5\u3002\u5c31\u662f\u5c06\u6bcf\u4e2a\u5927\u533a\u95f4\u7528\u521a\u597d\u5927\u4e8e\u5176\u957f\u5ea6\u4e00\u534a\u76842^x\u7684\u5927\u5c0f\u6765\u5c06\u5176\u5206\u5272\u4e3a\u4e24\u4e2a\u6709\u91cd\u53e0\u533a\u95f4\u6c42\u89e3\u3002\u5373s~t\u88ab\u5206\u4e3as~s + 2^x \u548c t - 2^x + 1 ~t\u3002\u5409\u5927\u7684\u7b2c\u4e00\u4e2ast\u662f\u9519\u8bef\u7684\u3002</p> <p>2.\u5b66\u4f1a\u4e86\u7b1b\u5361\u5c14\u6811\uff0c\u5b83\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e24\u4e2a\u503c\uff0c\u6839\u636e\u7b2c\u4e00\u4e2a\u503c\uff0c\u5b83\u662f\u4e00\u9897\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6839\u636e\u7b2c\u4e8c\u4e2a\u503c\uff0c\u5b83\u662f\u5806\uff08\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\u3002\u5982\u679c\u6211\u4eec\u8ba4\u4e3a\u7b2c\u4e00\u4e2a\u503c\u662f\u6570\u7ec4\u4e0b\u6807\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662f\u6570\u7ec4\u5bf9\u5e94\u4f4d\u7684\u503c\u7684\u8bdd\uff0c\u8fd9\u8bfe\u6811\u7684\u4e24\u4e2a\u7ed3\u70b9\u7684lca\u7684\u7b2c\u4e8c\u4e2a\u503c\u5c31\u662f\u4e24\u7ed3\u70b9\u7684\u7b2c\u4e00\u4e2a\u503c\u5728\u6570\u7ec4\u4e2d\u5212\u5b9a\u7684\u533a\u95f4\u7684rmq\u3002\u6211\u4eec\u901a\u5e38\u662f\u7531\u4e00\u4e2a\u6570\u7ec4\u6765\u6784\u5efa\u7b1b\u5361\u5c14\u6811\uff0c\u4ece\u5de6\u81f3\u53f3\u4f9d\u6b21\u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u5165\u6811\u4e2d\uff0c\u7531\u4e8e\u65b0\u52a0\u5165\u7684\u7ed3\u70b9\u7684\u4e0b\u6807\u662f\u6700\u5927\u7684\uff0c\u6240\u4ee5\u5b83\u4e00\u5b9a\u4f4d\u4e8e\u641c\u7d22\u4e8c\u53c9\u6811\u7684\u6700\u53f3\u7aef\u3002\u800c\u4e4b\u524d\u4f4d\u4e8e\u6700\u53f3\u7aef\u7684\u662f\u4e0a\u4e00\u4e2a\u52a0\u5165\u7684\u7ed3\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u4e0a\u4e00\u4e2a\u52a0\u5165\u7684\u7ed3\u70b9\u5f00\u59cb\u5411\u5176\u7236\u4eb2\u4e0d\u65ad\u63a8\u8fdb\uff08\u5f53\u524d\u5c06\u52a0\u5165\u7684\u7ed3\u70b9\u4e0d\u53ef\u80fd\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e0b\u65b9\uff0c\u56e0\u4e3a\u6240\u6709\u4e0b\u65b9\u7684\u7ed3\u70b9\u6765\u8bf4\uff0c\u65e0\u8bba\u5f53\u524d\u7ed3\u70b9\u63d2\u5728\u54ea\u91cc\u90fd\u6c38\u8fdc\u5728\u4e0a\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u8fb9\uff1b\u800c\u5bf9\u4e8e\u5176\u7236\u4eb2\u548c\u7956\u5148\u5219\u53ef\u4ee5\u7ecf\u8fc7\u5982\u4e0b\u8c03\u6574\u4f7f\u5f53\u524d\u63d2\u5165\u7ed3\u70b9\u5728\u6700\u53f3\u7aef\uff09\uff0c\u627e\u5230\u4e00\u4e2a\u6bd4\uff08\u5bf9\u4e8e\u5927\u6839\u5806\uff09\u5b83\u5927\u7684\uff0c\u628a\u8be5\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u53d8\u4e3a\u5f53\u524d\u63d2\u5165\u7ed3\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u518d\u628a\u5f53\u524d\u7ed3\u70b9\u6539\u4e3a\u5176\u53f3\u513f\u5b50\u3002</p>"},{"location":"competitive_programming/rmq_lca/#lca","title":"LCA","text":"<p>lca\u95ee\u9898\uff0c\u79bb\u7ebf\u7684\u65b9\u6cd5\u7528tarjan</p> <p>tarjan\u7b97\u6cd5\u7684\u6d41\u7a0b\u5982\u4e0b\u3002dfs\u904d\u5386\u6811\uff0c\u7528\u5e76\u67e5\u96c6\u7684\u65b9\u5f0f\uff0c\u5728\u5f53\u524ddfs\u8def\u5f84\u4e2d\u627e\u5230\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e00\u70b9\u662f\u904d\u5386\u5b8c\u6210\u7684\u70b9\u7684\u7956\u5148\uff0c\u800c\u4e14\u8fd9\u70b9\u7684\u6df1\u5ea6\u6700\u5927\u3002\u628a\u904d\u5386\u5b8c\u6210\u7684\u70b9\u5408\u5e76\u5230\u8fd9\u4e2a\u70b9\uff0c\u5373\u8fd9\u4e2a\u70b9\u53d8\u6210\u904d\u5386\u5b8c\u6210\u7684\u70b9\u7684\u5e76\u67e5\u96c6\u4e2d\u7684father\u3002\u8fd9\u6837\uff0c\u6839\u636edfs\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u904d\u5386\u5b8c\u6210\u7684\u70b9\u5176\u4e0e\u5f53\u524d\u6b63\u5728\u904d\u5386\u7684\u70b9\u7684lca\u5373\u4e3a\u5176\u5e76\u67e5\u96c6\u4e2d\u7684\u7956\u5148\u3002\u5b9e\u9645\u64cd\u4f5c\u7684\u65b9\u6cd5\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7ed3\u70b9\uff0cdfs\u6bcf\u4e2a\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u5b50\u7ed3\u70b9\u5408\u5e76\u5230\u5176\u672c\u8eab\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\u987a\u5e26\u56de\u7b54\u6240\u6709lca\u95ee\u9898\u3002</p> <p>\u5728\u7ebfLCA\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\uff0c\u5373\u5c06\u5176\u8f6c\u5316\u6210RMA\u95ee\u9898\u3002\u5148\u5bf9\u6811\u5f62\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u904d\u5386\u8fc7\u7a0b\u8bb0\u5f55\u8def\u7ebf\u4e2d\u70b9\u7684\u9014\u7ecf\u5e8f\u5217\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u4f1a\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u4ece\u4e00\u4e2a\u8282\u70b9A\u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u56de\u5230A\u70b9\u518d\u8d70\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u65f6\u5019\u8981\u518d\u6b21\u52a0A\u52a0\u5165\u5e8f\u5217\u3002\u8bb0\u5f55\u5e8f\u5217\u7684\u540c\u65f6\u8fd8\u8981\u8bb0\u5f55\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u70b9\u5728\u6811\u4e2d\u5bf9\u5e94\u7684\u6df1\u5ea6\u3002\u4ee5\u53ca\u5728\u5e8f\u5217\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u5176\u5b9e\u4e0d\u4e00\u5b9a\u975e\u8981\u7b2c\u4e00\u4e2a\u624d\u884c\uff09\uff0c\u4e3b\u8981\u7528\u4e8e\u6839\u636e\u70b9\u6807\u53f7\u67e5\u627e\u5176\u5728\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807\u3002\u6b64\u65f6\uff0cLCA\u5df2\u7ecf\u8f6c\u5316\u4e3aRMQ\uff0c\u5982\u679c\u8981\u6c42a,b\u7684LCA\uff0c\u53ea\u9700\u8981\u627e\u5230a,b\u5728\u904d\u5386\u5e8f\u5217\u4e2d\u5206\u522b\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u5e76\u5728\u6df1\u5ea6\u5e8f\u5217\u4e2d\u67e5\u627e\u4ee5\u8fd9\u4e24\u70b9\u4e3a\u7aef\u70b9\u7684\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u8fd9\u4e2a\u6700\u5c0f\u503c\u5728\u904d\u5386\u5e8f\u5217\u4e2d\u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u4ed6\u4eec\u7684LCA\u3002\u8fd9\u79cd\u65b9\u6cd5\u9884\u5904\u7406O(NlogN)\uff0c\u67e5\u8be2\u662fO(1)\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u7528\u5230\u4e86DP\u7684\u601d\u60f3\u3002\u7528\u4e00\u4e2a\u6570\u7ec4f[i][j]\u8868\u793ai\u70b9\u5728\u6811\u4e2d\u5230\u6839\u8282\u70b9\u7684\u5e8f\u5217\u4e2d\u8ddd\u79bbi\u8fb9\u6570\u4e3a2^j\u7684\u70b9\u3002\u90a3\u4e48f[i][j] = f[ f[i][j - 1] ][j - 1]\u3002\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u6211\u4eec\u8fdb\u884cBFS\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7236\u8282\u70b9\uff0c\u5373f[i][0]\u3002\u548c\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u3002\u7136\u540e\u6839\u636e\u72b6\u6001\u8f6c\u79fb\u516c\u5f0f\u586b\u5145\u6574\u4e2a\u6570\u7ec4\u3002\u5728\u67e5\u8be2\u65f6\uff0c\u5148\u770ba,b\u4e24\u70b9\u8c01\u7684\u6df1\u5ea6\u5927\uff0c\u5229\u7528\u4e24\u8005\u6df1\u5ea6\u5dee\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u914d\u5408f\u6570\u7ec4\uff0c\u627e\u5230\u8f83\u6df1\u7684\u70b9\u5728\u8f83\u6d45\u7684\u70b9\u90a3\u5c42\u7684\u7956\u5148\u3002\u7136\u540e\u7ee7\u7eed\u4f7f\u7528f\u6570\u7ec4\uff0c\u6bcf\u6b21\u5411\u4e0a\u63a2\u6d4b2^i\u7684\u8ddd\u79bb\u7684\u70b9\u4e24\u8005\u7684\u7956\u5148\u662f\u5426\u4e3a\u540c\u4e00\u4e2a\uff0c\u5982\u679c\u4e0d\u662f\u5219i++\u540e\u7ee7\u7eed\u53e0\u52a0\u5411\u4e0a\u63a2\u6d4b2^i\uff0c\u5982\u679c\u662f\u540c\u4e00\u4e2a\u5219i--\u540e\u91cd\u65b0\u63a2\u6d4b\u3002\u76f4\u5230\u627e\u5230\u6700\u5c0f\u7684\u516c\u5171\u7956\u5148\u4e3a\u6b62\u3002\u8fd9\u79cd\u65b9\u6cd5\u9884\u5904\u7406O(NlogN)\uff0c\u67e5\u8be2\u662fO(NlogN)\u3002\u4f46\u4e0e\u4e0a\u4e00\u79cd\u65b9\u6cd5\u76f8\u6bd4\uff0c\u4e0d\u9700\u8981dfs\uff0c\u800c\u7528bfs\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u65f6\u95f4\u3002</p>"},{"location":"competitive_programming/string/","title":"String","text":"<ul> <li>trie\u6811\u662f\u4e00\u79cd\u5b58\u50a8\u540d\u79f0\u7684\u666e\u904d\u65b9\u6cd5\u3002</li> </ul>"},{"location":"competitive_programming/string/#karp-rabin","title":"Karp-Rabin","text":"<p>karp-rabin\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u6570\u5b57\u7684\u7b97\u6cd5\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709n\u79cd\u5b57\u7b26\u6784\u6210\uff0c\u628a\u6bcf\u79cd\u5b57\u7b26\u5bf9\u5e94\u4e3a0\uff5en-1\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u628a\u5b57\u6bcd\u6362\u6210\u5bf9\u5e94\u7684\u6570\u5b57\u4e4b\u540e\uff0c\u5bf9\u4e8e\u56fa\u5b9a\u957f\u5ea6\u7684\u4e32\uff0c\u6bcf\u4e2a\u4e32\u90fd\u4e0e\u4e00\u4e2a\u552f\u4e00\u7684n\u8fdb\u5236\u6570\u5bf9\u5e94\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5hash\u4e86</p>"},{"location":"competitive_programming/string/#dfa","title":"DFA","text":"<p>ac\u81ea\u52a8\u673a\u4e0a\u7684\u7b49\u4ef7\u6001\uff1a</p> <p>\u7b49\u4ef7\u6001\u5373\u7528fail\u6307\u9488\u8fde\u63a5\u7684\u70b9\uff0c\u5728\u884c\u8d70fail\u6307\u9488\u65f6\u5339\u914d\u7684\u5b57\u7b26\u6570\u91cf\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u8fd9\u4e9b\u70b9\u53ef\u4ee5\u770b\u6210\u662f\u76f8\u540c\u7684\u5339\u914d\u72b6\u6001\u3002</p> <p>\u901a\u5e38\u6709\u4e24\u79cd\u65b9\u6cd5\u5904\u7406\u7b49\u4ef7\u6001\uff0c\u7b2c\u4e00\u662f\u4e92\u4e3a\u7b49\u4ef7\u6001\u7684\u70b9\u5404\u81ea\u8bb0\u5f55\u5404\u81ea\u7684\u4fe1\u606f\u3002\u5339\u914d\u7684\u65f6\u5019\u9700\u8981\u904d\u5386\u6240\u6709\u7b49\u4ef7\u6001\u4ee5\u5224\u65ad\u662f\u5426\u5339\u914d\u6210\u529f\u3002next\u6307\u9488\u53ef\u80fd\u4e3a\u7a7a\uff0c\u9700\u8981\u5339\u914d\u65f6\u8fdb\u884c\u5224\u65ad\u662f\u5426\u9700\u8981\u8d70fail\u6307\u9488\u3002</p> <p>\u7b2c\u4e8c\u662f\u6240\u6709\u7b49\u4ef7\u6001\u4e2d\u7684\u70b9\u8bb0\u5f55\u672c\u8eab\u4ee5\u53ca\u6240\u6709\u6bd4\u5b83\u6d45\u7684\u70b9\u7684\u4fe1\u606f\u603b\u548c\uff08\u5339\u914d\u6210\u529f\u7684\u5355\u8bcd\u603b\u6570\uff09\uff0c\u5339\u914d\u65f6\u4e0d\u9700\u8981\u8d70\u7b49\u4ef7\u6001\u4ee5\u5224\u65ad\u5339\u914d\u6210\u529f\u4e0e\u5426\u3002next\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u76f4\u63a5\u6307\u5411\u672c\u5e94\u901a\u8fc7fail\u6307\u9488\u5bfb\u627e\u5230\u7684\u90a3\u4e2a\u72b6\u6001\u3002</p> <p>ac\u81ea\u52a8\u673a\u4e0e\u77e9\u9635\uff1a</p> <p>\u5728ac\u81ea\u52a8\u673a\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u4ece\u6839\u51fa\u53d1\u5e76\u5728\u81ea\u52a8\u673a\u4e0a\u884c\u8d70\u7684\u4efb\u610f\u957f\u5ea6\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>\u628aac\u81ea\u52a8\u673a\u770b\u6210\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u5b83\u7684\u90bb\u63a5\u77e9\u9635\uff08\u53ef\u8fbe\u77e9\u9635\uff09\uff0cmatrix[i][j]\u8868\u793ai\u548cj\u662f\u5426\u76f8\u90bb\u3002</p> <p>\u8fd9\u4e2a\u77e9\u9635\u7684n\u6b21\u5e42matrix^n[i][j]\u8868\u793a\u4ecei\u6070\u597d\u8d70n\u6b65\u5230\u8fbej\u7684\u8def\u5f84\u6709\u51e0\u6761\u3002</p> <p>\u90a3\u53ef\u8fbe\u77e9\u9635\u5bf9\u7b49\u4ef7\u6001\u662f\u600e\u4e48\u5904\u7406\u7684\u5462\uff1f\u5982\u679c\u8003\u8651\u7b49\u4ef7\u6001\uff0c\u4e00\u4e2a\u72b6\u6001\u7684\u53ef\u5230\u8fbe\u72b6\u6001\u5b9e\u5728\u662f\u592a\u591a\u4e86\u3002\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u8ba4\u4e3a\u7684\u53ef\u8fbe\u53ea\u662f\u7528\u5730\u4e8c\u4e2d\u65b9\u6cd5\u5904\u7406\u7b49\u4ef7\u6001\u65f6\uff0cnext\u6307\u9488\u76f4\u63a5\u6307\u5411\u7684\u88ab\u8ba4\u4e3a\u53ef\u8fbe\u3002</p>"},{"location":"competitive_programming/codeforces/383C/","title":"383C","text":""},{"location":"competitive_programming/codeforces/383C/#tutorial","title":"Tutorial","text":"<p>Learned a new way to assign dfn for subtrees.</p>"},{"location":"competitive_programming/codeforces/383C/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n#define D(x) \n\nconst int MAX_N = int(1e5) * 2 + 10;\n\nint n, m;\nint value[MAX_N];\nvector&lt;int&gt; edge[MAX_N];\nint dfn[MAX_N], dfn2[MAX_N];\nint time_count;\nint binary_indexed_tree[MAX_N];\nint depth[MAX_N];\n\nvoid dfs(int u, int father, int cur_depth)\n{\n    depth[u] = cur_depth;\n    dfn[u] = time_count++;\n    for (int i = 0; i &lt; (signed)edge[u].size(); i++)\n    {\n        int v = edge[u][i];\n        if (v != father)\n            dfs(v, u, cur_depth + 1);\n    }\n    dfn2[u] = time_count;\n}\n\nint low_bit(int x)\n{\n    return x &amp; (-x);\n}\n\nvoid add(int pos, int val)\n{\n    for (int i = pos; i &lt; MAX_N; i += low_bit(i))\n    {\n        binary_indexed_tree[i] += val;\n    }\n}\n\nint sum(int pos)\n{\n    int ret = 0;\n    for (int i = pos; i &gt; 0; i -= low_bit(i))\n    {\n        ret += binary_indexed_tree[i];\n    }\n    return ret;\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++)\n        scanf(\"%d\", value + i);\n    for (int i = 0; i &lt; n - 1; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &amp;a, &amp;b);\n        edge[a].push_back(b);\n        edge[b].push_back(a);\n    }\n\n    //work\n    time_count = 1;\n    dfs(1, -1, 1);\n    for (int i = 0; i &lt; m; i++)\n    {\n        int command, x, val;\n        scanf(\"%d\", &amp;command);\n        if (command == 1)\n        {\n            scanf(\"%d%d\", &amp;x, &amp;val);\n            if (depth[x] &amp; 1)\n                val = -val;\n            add(dfn[x], val);\n            add(dfn2[x], -val);\n            continue;\n        }\n        scanf(\"%d\", &amp;x);\n        val = sum(dfn[x]);\n        D(printf(\"%d\\n\", val));\n        if (depth[x] &amp; 1)\n            val = -val;\n        printf(\"%d\\n\", value[x] + val);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/388B/","title":"388B","text":""},{"location":"competitive_programming/codeforces/388B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\n#define D(x) \n\nconst int MAX_N = 100;\n\nint num;\nbool ans[MAX_N][MAX_N];\n\nvoid connect(int a, int b)\n{\n    ans[a][b] = ans[b][a] = true;\n}\n\nint main()\n{\n    //init\n    connect(1, 3);\n    connect(1, 4);\n    for (int i = 1; i &lt; 30; i++)\n    {\n        connect(i * 2 + 1, i * 2 + 3);\n        connect(i * 2 + 1, i * 2 + 4);\n        connect(i * 2 + 2, i * 2 + 3);\n        connect(i * 2 + 2, i * 2 + 4);\n    }\n    for (int i = 1; i &lt;= 30; i++)\n    {\n        connect(62 + i, 63 + i);\n    }\n    connect(93, 2);\n\n    //input\n    scanf(\"%d\", &amp;num);\n\n    //work\n    int temp = 0;\n    while (num &gt; 0)\n    {\n        if (num &amp; 1)\n        {\n            connect(temp * 2 + 1, 63 + temp);\n            if (temp != 0)\n            {\n                connect(temp * 2 + 2, 63 + temp);\n            }\n        }\n        temp++;\n        num &gt;&gt;= 1;\n    }\n\n    //output\n    printf(\"%d\\n\", 93);\n    for (int i = 1; i &lt;= 93; i++)\n    {\n        for (int j = 1; j &lt;= 93; j++)\n        {\n            if (ans[i][j])\n                putchar('Y');\n            else\n                putchar('N');\n        }\n        putchar('\\n');\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/392B/","title":"392B","text":""},{"location":"competitive_programming/codeforces/392B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAX_N = 50;\n\nint cost[3][3];\nlong long f[MAX_N][3][3];\nint n;\n\nint main()\n{\n    //input\n    for (int i = 0; i &lt; 3; i++)\n        for (int j = 0; j &lt; 3; j++)\n            scanf(\"%d\", &amp;cost[i][j]);\n    scanf(\"%d\", &amp;n);\n    //work\n    for (int i = 1; i &lt;= n; i++)\n    {\n        for (int j = 0; j &lt; 3; j++)\n        {\n            for (int k = 0; k &lt; 3; k++)\n            {\n                if (j == k)\n                    continue;\n                int x = 3 - j - k;\n                f[i][j][k] = f[i - 1][j][x] + cost[j][k] + f[i - 1][x][k];\n                f[i][j][k] = min(f[i][j][k], f[i - 1][j][k] + cost[j][x] + f[i - 1][k][j] + cost[x][k] + f[i - 1][j][k]);\n            }\n        }\n    }\n    printf(\"%I64d\\n\", f[n][0][2]);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/396B/","title":"396B","text":""},{"location":"competitive_programming/codeforces/396B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\n#define LL long long\n\nint n;\n\nLL gcd(LL a,LL b){\n    if (a==0) return 1;\n    if (a&lt;0) return gcd(-a,b);\n    while (b){\n    LL t=a%b; a=b; b=t;\n    }\n    return a;\n}\n\nbool is_prime(int a)\n{\n    for (int i = 2; i * i &lt;= a; i++)\n    {\n        if (a % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main()\n{\n    //input\n    int t;\n    scanf(\"%d\", &amp;t);\n    while (t--)\n    {\n        scanf(\"%d\", &amp;n);\n        if (n == 2)\n        {\n            puts(\"1/6\");\n            continue;\n        }\n        int left = n;\n        while (!is_prime(left))\n            left--;\n        int right = n + 1;\n        while (!is_prime(right))\n            right++;\n        LL up = 1LL * (left - 2) * right + 2LL * (n - left + 1);\n        LL down = 2LL * left * right;\n        LL g = gcd(up, down);\n        up /= g;\n        down /= g;\n        printf(\"%lld/%lld\\n\", up, down);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/398B/","title":"398B","text":""},{"location":"competitive_programming/codeforces/398B/#description","title":"Description","text":"<p>We choose a grid in a n\\times n matrix with uniform probability. If the grid is already painted, we do nothing. Otherwise, we paint it. Repeat this operation until every row and every column has at least one painted grid. Output the expectation of the times to choose grid. (1 \\leq n \\leq 2000) In addition, there are some already painted grids are given in the input.</p>"},{"location":"competitive_programming/codeforces/398B/#tutorial","title":"Tutorial","text":"<p>f_{i,j} means the expectation to paint the empty sub-matrix of i\\times j  (all other rows and columns have painted grids except these i rows and j columns) in a matrix of n\\times n. Then f_{i,j} can be calculated by its sub-problems according to which grid we choose as the next one to paint.</p> <p>f_{i,j}=1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1} +\\frac{(n-i)\\times (n-j)}{n\\times n}f_{i,j}</p> <p>Solve this equation, we can get another equation as follows, which is the status transition equation.</p> <p>f_{i,j}=\\frac{1 +\\frac{i\\times j}{n\\times n}f_{i-1,j-1} +\\frac{i\\times (n - j)}{n\\times n}f_{i-1,j} +\\frac{(n-i)\\times j}{n\\times n}f_{i,j-1}} {1-\\frac{(n-i)\\times (n-j)}{n\\times n}}</p> <p>Use it to solve this problem.</p> <p>From this problem, I learned that in dynamic programming, sometimes we need to solve a equation to get the status transition equation. In dynamic programming, the order of solving each sub-problem can be the same as it is in real life, however, it can also be reverse. For example, in this problem, the smallest sub-problem $f_{i,j} is the first to calculate in dynamic programming, but the last one to paint in real life.</p>"},{"location":"competitive_programming/codeforces/398B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nconst int MAX_N = 2 * int(1e3) + 10;\nconst int MAX_M = 2 * int(1e4) + 10;\n\nint n, m;\nbool row_occupied[MAX_N], col_occupied[MAX_N];\nint row_occupied_num, col_occupied_num; \ndouble f[MAX_N][MAX_N];\n\nvoid make(bool *occupied, int &amp;occupied_num, int x)\n{\n    if (occupied[x])\n    {\n        return;\n    }\n    occupied[x] = true;\n    occupied_num++;\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &amp;a, &amp;b);\n        make(row_occupied, row_occupied_num, a);\n        make(col_occupied, col_occupied_num, b);\n    }\n    f[0][0] = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        f[i][0] = f[i - 1][0] + 1.0 * n / i;\n        f[0][i] = f[0][i - 1] + 1.0 * n / i;\n    }\n    for (int i = 1; i &lt;= n - row_occupied_num; i++)\n    {\n        for (int j = 1; j &lt;= n - col_occupied_num; j++)\n        {\n            f[i][j] = 1;\n            f[i][j] += f[i - 1][j - 1] * i * j / n / n;\n            f[i][j] += f[i - 1][j] * i * (n - j) / n / n;\n            f[i][j] += f[i][j - 1] * (n - i) * j / n / n;\n            f[i][j] /= 1 - 1.0 * (n - i) * (n - j) / n / n;\n        }\n    }\n    printf(\"%.12f\\n\", f[n - row_occupied_num][n - col_occupied_num]);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/403B/","title":"403B","text":""},{"location":"competitive_programming/codeforces/403B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\n#define D(x) \n\nconst int MAX_N = int(1e4);\nconst int MAX_M = int(1e4);\n\nint n, m;\nint value[MAX_M];\nint bad[MAX_N];\nint gcd_array[MAX_N];\n\nint gcd(int a,int b){\n    if (a==0) return 1;\n    if (a&lt;0) return gcd(-a,b);\n    while (b){\n    int t=a%b; a=b; b=t;\n    }\n    return a;\n}\n\nbool is_bad(int a)\n{\n    return a == *lower_bound(bad, bad + m, a);\n}\n\nint cal(int a)\n{\n    D(printf(\"%d \", a));\n    int ret = 0;\n    for (int i = 2; i * i &lt;= a; i++)\n    {\n        while (a % i == 0)\n        {\n            if (is_bad(i))\n                ret--;\n            else\n                ret++;\n            a /= i;\n        }\n    }\n    if (a == 1)\n    {\n        D(printf(\"%d\\n\", ret));\n        return ret;\n    }\n    if (is_bad(a))\n        ret--;\n    else\n        ret++;\n    D(printf(\"%d\\n\", ret));\n    return ret;\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;value[i]);\n    }\n    for (int i = 0; i &lt; m; i++)\n    {\n        scanf(\"%d\", &amp;bad[i]);\n    }\n\n    //work\n    int temp = value[0];\n    for (int i = 0; i &lt; n; i++)\n    {\n        temp = gcd(temp, value[i]);\n        gcd_array[i] = temp;\n    }\n    temp = 1;\n    for (int i = n - 1; i &gt;= 0; i--)\n    {\n        if (cal(gcd_array[i] / temp) &lt; 0)\n        {\n            temp = gcd_array[i];\n        }\n        value[i] /= temp;\n    }\n\n    int ans = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        ans += cal(value[i]);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/406B/","title":"406B","text":""},{"location":"competitive_programming/codeforces/406B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nconst int MAX_S = int(1e6) + 20;\nconst int s = int(1e6);\n\nbool f[MAX_S];\nint ans[MAX_S];\nint ans_num;\nint add_num;\nbool first = true;\nint n;\n\nvoid output(int a)\n{\n    if (first)\n    {\n        first = false;\n    }else\n    {\n        putchar(' ');\n    }\n    printf(\"%d\", a);\n}\n\nint main()\n{\n    //input\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++)\n    {\n        int a;\n        scanf(\"%d\", &amp;a);\n        f[a] = true;\n    }\n\n    //work\n    ans_num = 0;\n    add_num = 0;\n    for (int i = 1; i &lt;= (s + 1) / 2; i++)\n    {\n        int a = s - i + 1;\n        if (f[i] &amp;&amp; f[a])\n        {\n            add_num++;\n        }else if (f[i] || f[a])\n        {\n            if (f[i])\n            {\n                ans[ans_num++] = a;\n            }else\n            {\n                ans[ans_num++] = i;\n            }\n        }\n    }\n\n    //output\n    printf(\"%d\\n\", ans_num + add_num * 2);\n    for (int i = 1; i &lt;= (s + 1) / 2 &amp;&amp; add_num; i++)\n    {\n        int a = s - i + 1;\n        if (!f[i] &amp;&amp; !f[a])\n        {\n            output(i);\n            output(a);\n            add_num--;\n        }\n    }\n\n    for (int i = 0; i &lt; ans_num; i++)\n    {\n        output(ans[i]);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/407B/","title":"407B","text":""},{"location":"competitive_programming/codeforces/407B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nconst int MAX_N = 1010;\nconst int MOD = int(1e9) + 7;\n\nint n;\nint back[MAX_N];\nint f[MAX_N][MAX_N];\n\nint main()\n{\n    //input\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        scanf(\"%d\", &amp;back[i]);\n    }\n\n    //work\n    for (int i = 2; i &lt;= n + 1; i++)\n    {\n        for (int j = i - 1; j &gt;= 1; j--)\n        {\n            f[j][i] = 0;\n            f[j][i] = (f[j][i] + f[j][i - 1]) % MOD;\n            f[j][i] = (f[j][i] + f[back[i - 1]][i - 1]) % MOD;\n            f[j][i] = (f[j][i] + 2) % MOD;\n        }\n    }\n    printf(\"%d\\n\", f[1][n + 1]);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/414B/","title":"414B","text":""},{"location":"competitive_programming/codeforces/414B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nconst int MAX_N = 2020;\nconst int MAX_M = 2020;\nconst int MOD = int(1e9) + 7;\n\nint n, m;\nint f[MAX_M][MAX_N];\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n\n    //work\n    f[0][1] = 1;\n    for (int i = 0; i &lt;= m; i++)\n    {\n        for (int j = 1; j &lt;= n; j++)\n        {\n            for (int k = j; k &lt;= n; k += j)\n            {\n                f[i + 1][k] = (f[i][j] + f[i + 1][k]) % MOD;\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        ans = (ans + f[m][i]) % MOD;\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/418B/","title":"418B","text":""},{"location":"competitive_programming/codeforces/418B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAX_N = 110;\nconst int MAX_M = 20;\nconst long long INF = (1LL &lt;&lt; 60);\n\nstruct Elem\n{\n    Elem()\n    {}\n\n    Elem(int ruble, int monitor, int prob):ruble(ruble), monitor(monitor), prob(prob)\n    {}\n\n    int ruble, monitor, prob;\n\n    bool operator &lt; (const Elem &amp;b) const\n    {\n        return monitor &lt; b.monitor;\n    }\n}elem[MAX_N];\n\nint n, m, price;\nlong long f[1 &lt;&lt; MAX_M];\n\nint main()\n{\n    //input\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;price);\n    for (int i = 0; i &lt; n; i++)\n    {\n        int a, b, c, d, e = 0;\n        scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c);\n        for (int j = 0; j &lt; c; j++)\n        {\n            scanf(\"%d\", &amp;d);\n            d--;\n            e = e | (1 &lt;&lt; d);\n        }\n        elem[i] = Elem(a, b, e);\n    }\n\n    //work\n    long long ans = INF;\n    sort(elem, elem + n);\n    fill(f, f + (1 &lt;&lt; m), INF);\n    f[0] = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; (1 &lt;&lt; m); j++)\n        {\n            f[j | elem[i].prob] = min(f[j | elem[i].prob], f[j] + elem[i].ruble);\n        }\n        ans = min(ans, f[(1 &lt;&lt; m) - 1] + 1LL * price * elem[i].monitor);\n    }\n    if (ans == INF)\n        puts(\"-1\");\n    else\n        printf(\"%I64d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/420B/","title":"420B","text":""},{"location":"competitive_programming/codeforces/420B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdlib&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n#define MAX_MSG_NUM 100005\n#define MAX_PEOPEL_NUM 100005\n#define D(x) \n\nstruct Msg\n{\n    int id;\n    bool on;\n}msg[MAX_MSG_NUM];\n\nint people_num, msg_num;\nbool vis[MAX_PEOPEL_NUM];\nbool wait[MAX_PEOPEL_NUM];\nint init_num;\nint ans[MAX_PEOPEL_NUM];\n\nvoid input()\n{\n    scanf(\"%d%d\", &amp;people_num, &amp;msg_num);\n    for (int i = 0; i &lt; msg_num; i++)\n    {\n        char st[2];\n        int a;\n        scanf(\"%s%d\", st, &amp;a);\n        msg[i].on = (st[0] == '+');\n        msg[i].id = a - 1;\n    }\n}\n\nvoid make_wait()\n{\n    memset(vis, 0, sizeof(vis));\n    memset(wait, 0, sizeof(wait));\n    bool did = false;\n    init_num = 0;\n    for (int i = 0; i &lt; msg_num; i++)\n    {\n        if (vis[msg[i].id])\n        {\n            continue;\n        }\n        if (!msg[i].on)\n        {\n            wait[msg[i].id] = true;\n            init_num++;\n            did = true;\n        }\n        vis[msg[i].id] = true;\n    }\n    if (!did)\n    {\n        wait[msg[0].id] = true;\n    }\n}\n\nvoid work()\n{\n    int on_num = init_num;\n    for (int i = 0; i &lt; msg_num; i++)\n    {\n                D(printf(\"%d %d\\n\", i, on_num);)\n        if (msg[i].on)\n        {\n            on_num++;\n            if (on_num == 1 &amp;&amp; !wait[msg[i].id])\n            {\n                memset(wait, 0, sizeof(wait));\n            }\n            continue;\n        }\n        on_num--;\n        if (!wait[msg[i].id])\n        {\n            continue;\n        }\n        if (on_num &gt; 0)\n        {\n            wait[msg[i].id] = false;\n        }\n    }\n}\n\nvoid output()\n{\n    int ans_num = 0;\n    for (int i = 0; i &lt; people_num; i++)\n    {\n        if (wait[i] || !vis[i])\n        {\n            ans[ans_num++] = i + 1;\n            D(printf(\"i = %d\\tans = %d\\n\", i, ans[ans_num - 1]);)\n        }\n    }\n    printf(\"%d\\n\", ans_num);\n    if (ans_num == 0)\n        return;\n    printf(\"%d\", ans[0]);\n    for (int i = 1; i &lt; ans_num; i++)\n    {\n        printf(\" %d\", ans[i]);\n    }\n    puts(\"\");\n}\n\nint main()\n{\n    input();\n    make_wait();\n    work();\n    output();\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/425B/","title":"425B","text":""},{"location":"competitive_programming/codeforces/425B/#description","title":"Description","text":"<p>A matrix with n rows and m columns consists of 1s and 0s. (1\\leq n,m \\leq 100) We are asked to change the matrix with less than k operations. (1\\leq k \\leq 10) After the change, every connected region is a rectangle. Output the minimal number of operations needed.</p>"},{"location":"competitive_programming/codeforces/425B/#tutorial","title":"Tutorial","text":"<p>The final matrix must look like a chess board but with rectangles of 1s and 0s instead of squares of black and white. So there is a vector x has n values can serve as a pattern of each column. Every column either the same as x or different with x in every value. If we found x, we can easily use greedy to decide how many operations we need to change each column into x or its counter part.</p> <p>Posit n \\leq m. There are two situations. The first is n &gt; k, which means some columns cannot be modified, since m &gt; k (because n \\leq m and n &gt; k). If we modify each column, we must use more than k operations which is not allowed. So we just enumerate each column as x and calculate the answer.</p> <p>The second situation is n \\leq k. Since k \\leq 10, we can just enumerate all the possible x with O(2^n), and use the same method to calculate the answer.</p>"},{"location":"competitive_programming/codeforces/425B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAX_N = 110;\nconst int MAX_M = 110;\n\nint n, m, opr_num;\nint f[MAX_N][MAX_M];\nint vec[MAX_N];\n\nvoid make(int bits)\n{\n    int i = 0;\n    while (bits)\n    {\n        vec[i++] = bits &amp; 1;\n        bits &gt;&gt;= 1;\n    }\n}\n\nint work()\n{\n    int ret = 0;\n    for (int i = 0; i &lt; m; i++)\n    {\n        int same = 0;\n        int diff = 0;\n        for (int j = 0; j &lt; n; j++)\n        {\n            if (vec[j] == f[j][i])\n            {\n                same++;\n            }else\n            {\n                diff++;\n            }\n        }\n        ret += min(same, diff);\n    }\n    return ret;\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;opr_num);\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; m; j++)\n        {\n            if (m &gt; n)\n            {\n                scanf(\"%d\", &amp;f[i][j]);\n            }else\n            {\n                scanf(\"%d\", &amp;f[j][i]);\n            }\n        }\n    }\n    if (n &gt; m)\n    {\n        swap(m, n);\n    }\n\n    //work\n    int ans = n * m;\n    if (n &lt;= opr_num)\n    {\n        for (int i = 0; i &lt; (1 &lt;&lt; n); i++)\n        {\n            make(i);\n            ans = min(ans, work());\n        }\n    }else\n    {\n        for (int i = 0; i &lt; m; i++)\n        {\n            for (int j = 0; j &lt; n; j++)\n            {\n                vec[j] = f[j][i];\n            }\n            ans = min(ans, work());\n        }\n    }\n    if (ans &gt; opr_num)\n    {\n        puts(\"-1\");\n    }else\n    {\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/429B/","title":"429B","text":""},{"location":"competitive_programming/codeforces/429B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAX_M = 1010;\nconst int MAX_N = 1010;\n\nint n, m;\nint gain[MAX_N][MAX_M];\nint up_right[MAX_N][MAX_M];\nint up_left[MAX_N][MAX_M];\nint down_left[MAX_N][MAX_M];\nint down_right[MAX_N][MAX_M];\n\n\nvoid work(int f[][MAX_M], int s1, int e1, int d1, int s2, int e2, int d2)\n{\n    for (int i = s1; i != e1 + d1; i += d1)\n        for (int j = s2; j != e2 + d2; j += d2)\n            f[i][j] = gain[i][j] + max(f[i - d1][j], f[i][j - d2]);\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            scanf(\"%d\", &amp;gain[i][j]);\n    //work\n    work(down_right, 1, n, 1, 1, m, 1);\n    work(up_right, n, 1, -1, 1, m, 1);\n    work(down_left, 1, n, 1, m, 1, -1);\n    work(up_left, n, 1, -1, m, 1, -1);\n    int ans = 0;\n    for (int i = 2; i &lt;= n - 1; i++)\n    {\n        for (int j = 2; j &lt;= m - 1; j++)\n        {\n            int temp_dr = down_right[i - 1][j] + up_right[i][j - 1] + down_left[i][j + 1] + up_left[i + 1][j];\n            int temp_ur = down_right[i][j - 1] + up_right[i + 1][j] + down_left[i - 1][j] + up_left[i][j + 1];\n            ans = max(ans, temp_dr);\n            ans = max(ans, temp_ur);\n        }\n    }\n\n    //output\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/434B/","title":"434B","text":""},{"location":"competitive_programming/codeforces/434B/#description","title":"Description","text":"<p>A matrix with n rows and m columns consists of 1s and 0s. (1 \\leq n,m \\leq 10^3) Now, we have q (1 \\leq q \\leq 10^3) operations. There are two kinds of operations. First is to change the value of one point in the matrix (1 to 0 or 0 to 1). Second is to query what is the largest space of a rectangle with point (x,y) on its edge. The rectangle must be filled with 1s.</p>"},{"location":"competitive_programming/codeforces/434B/#tutorial","title":"Tutorial","text":"<p>We calculate l[i][j] which is the length of the longest chain of 1s on the right of point (i,j). It can be done with O(n^2) or O(nm). For each change we can change l in O(n). For each query we can calculate largest rectangle with the point on its right side in O(n).</p> <p>If the point is (x,y), we start from the rectangle of a single line from (x-l[x][y],y) to (x,y). Then we strech it up and down one unit at a time. Of course the left side of the rectangle may be pushed right during the strech. In each strech, we choose up if l[x-1][y] is larger than l[x+1][y]. Otherwise, we strech down. Each time we calculate the space of the rectangle and update the answer.</p> <p>It is the same when the point is on the left, up and down side of the rectangle.</p>"},{"location":"competitive_programming/codeforces/434B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define D(x) x\n\nconst int MAX_N = 1050;\nconst int MAX_M = 1050;\n\nint n, m, q;\nint matrix[MAX_N][MAX_M];\nint l[MAX_M][MAX_N];\nint r[MAX_M][MAX_N];\nint u[MAX_N][MAX_M];\nint d[MAX_N][MAX_M];\n\nvoid modify(int x, int y)\n{\n    matrix[x][y] ^= 1;\n    for (int j = 1; j &lt;= m; j++)\n    {\n        if (matrix[x][j] == 1)\n        {\n            l[j][x] = l[j - 1][x] + 1;\n        }else\n        {\n            l[j][x] = 0;\n        }\n    }\n    for (int j = m; j &gt;= 1; j--)\n    {\n        if (matrix[x][j] == 1)\n        {\n            r[j][x] = r[j + 1][x] + 1;\n        }else\n        {\n            r[j][x] = 0;\n        }\n    }\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (matrix[i][y] == 1)\n        {\n            u[i][y] = u[i - 1][y] + 1;\n        }else\n        {\n            u[i][y] = 0;\n        }\n    }\n    for (int i = n; i &gt;= 1; i--)\n    {\n        if (matrix[i][y] == 1)\n        {\n            d[i][y] = d[i + 1][y] + 1;\n        }else\n        {\n            d[i][y] = 0;\n        }\n    }\n}\n\nint query(int f[], int pos, int bound)\n{\n    int l = pos;\n    int r = pos;\n    int ret = f[pos];\n    int min_height = f[pos];\n    while (l &gt; 1 || r &lt; bound)\n    {\n        if (r == bound || f[l - 1] &gt; f[r + 1])\n        {\n            l--;\n            min_height = min(min_height, f[l]);\n        }else\n        {\n            r++;\n            min_height = min(min_height, f[r]);\n        }\n        ret = max(ret, (r - l + 1) * min_height);\n    }\n    return ret;\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            scanf(\"%d\", matrix[i] + j);\n\n    //prework\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n        {\n            if (matrix[i][j] == 1)\n            {\n                l[j][i] = l[j - 1][i] + 1;\n                u[i][j] = u[i - 1][j] + 1;\n            }else\n            {\n                l[j][i] = u[i][j] = 0;\n            }\n        }\n\n    for (int i = n; i &gt;= 1; i--)\n        for (int j = m; j &gt;= 1; j--)\n        {\n            if (matrix[i][j] == 1)\n            {\n                r[j][i] = r[j + 1][i] + 1;\n                d[i][j] = d[i + 1][j] + 1;\n            }else\n            {\n                d[i][j] = r[j][i] = 0;\n            }\n        }\n\n    //work\n    while (q--)\n    {\n        int a, x, y;\n        scanf(\"%d%d%d\", &amp;a, &amp;x, &amp;y);\n        if (a == 1)\n        {\n            modify(x, y);\n            continue;\n        }\n        int ans = 0;\n        ans = max(ans, query(l[y], x, n));\n        ans = max(ans, query(r[y], x, n));\n        ans = max(ans, query(u[x], y, m));\n        ans = max(ans, query(d[x], y, m));\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/438B/","title":"438B","text":""},{"location":"competitive_programming/codeforces/438B/#description","title":"Description","text":"<p>Here is a undirected graph with n nodes and m edges. (2 \\leq n, m \\leq 10^5) Each node has a weight a_i. f(p, q) defines the simple route from p to q with the largest g(x_1~x_t). g(x_1~x_t) defines the weight of the node with the least weight on that simple route. Output the average of f(p,q) of all possible pairs of nodes on the graph.</p>"},{"location":"competitive_programming/codeforces/438B/#tutorial","title":"Tutorial","text":"<p>Sort the nodes with their weights in decreasing order. Starting from an empty graph, add the nodes to the graph one by one. Each time some components may become connected by the new node added. f(p, q) where p and q are in two different components that to be connected by the new node, equals to the weight of the new node. Use disjoint sets to work it out. Join the components to that new node one by one. Add the sum of the f(p,q)s to the answer during each joint.</p>"},{"location":"competitive_programming/codeforces/438B/#solution","title":"Solution","text":"<pre><code>#include &lt;vector&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAX_N = int(1e5) + 10;\n\nint n, m;\nvector&lt;int&gt; edge[MAX_N];\npair&lt;int, int&gt; animal[MAX_N];\nbool vis[MAX_N];\n\nstruct Disjoint_sets\n{\n    int father[MAX_N];\n    int num[MAX_N];\n\n    Disjoint_sets()\n    {}\n\n    Disjoint_sets(int n)\n    {\n        for (int i = 0; i &lt; n; i++)\n        {\n            father[i] = i;\n            num[i] = 1;\n        }\n    }\n\n    int root(int a)\n    {\n        int ret = a;\n        while (father[ret] != ret)\n            ret = father[ret];\n        while (father[a] != a)\n        {\n            int b = a;\n            a = father[a];\n            father[b] = ret;\n        }\n        return ret;\n    }\n\n    void join(int a, int b) // b is the root then\n    {\n        int num_a = num[root(a)];\n        father[root(a)] = father[root(b)];\n        num[root(b)] += num_a;\n    }\n};\n\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++)\n    {\n        int a;\n        scanf(\"%d\", &amp;a);\n        animal[i] = make_pair(a, i);\n    }\n    for (int i = 0; i &lt; m; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &amp;a, &amp;b);\n        a--;\n        b--;\n        edge[a].push_back(b);\n        edge[b].push_back(a);\n    }\n\n    //work\n    Disjoint_sets d_sets(n);\n    fill(vis, vis + n, 0);\n    sort(animal, animal + n);\n    long long ans = 0;\n    for (int i = n - 1; i &gt;= 0; i--)\n    {\n        int u = animal[i].second;\n        int min_num = animal[i].first;\n        vis[u] = true;\n        for (int j = 0; j &lt; (int)edge[u].size(); j++)\n        {\n            int v = edge[u][j];\n            if (!vis[v])\n                continue;\n            if (d_sets.root(v) != d_sets.root(u))\n            {\n                ans += 1LL * min_num * d_sets.num[d_sets.root(v)] * d_sets.num[d_sets.root(u)];\n                d_sets.join(v, u);\n            }\n        }\n    }\n\n    double final_ans = ans * 2.0 / n / (n - 1);\n    printf(\"%.12f\\n\", final_ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/442B/","title":"442B","text":""},{"location":"competitive_programming/codeforces/442B/#description","title":"Description","text":"<p>Give the probabilities of each one in n friends to come up with exactly one problem. We should invite a group of friends so that the probability for them to up exactly one problem in total is maximized.</p>"},{"location":"competitive_programming/codeforces/442B/#tutorial","title":"Tutorial","text":"<p>The math deduction process is very complex. The easiest way to find the solution to this problem is to use brute force for to discover the patterns in the answer, if you cannot discover the pattern by hand. The pattern is as follows. We should sort the friends by their probabilites from the lowest to the highest. The group we choose is always the suffix of this probability array.</p> <p>By the way, the formula for the probability for a group to come up with exactly one problem is P=(\\prod\\limits_{i=1}^{n}(1-p_i))\\times(\\sum\\limits_{i=1}^{n}\\frac{p_i}{1-p_i}).</p>"},{"location":"competitive_programming/codeforces/442B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nconst int MAX_N = 105;\n\nint n;\ndouble f[MAX_N];\n\nvoid input()\n{\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%lf\", &amp;f[i]);\n    }\n}\n\nvoid work()\n{\n    double ans = 0;\n    double sum = 0;\n    double product = 1;\n    for (int i = 0; i &lt; n; i++)\n    {\n        sum *= 1 - f[i];\n        sum += product * f[i];\n        product *= 1 - f[i];\n        if (sum &gt; ans)\n        {\n            ans = sum;\n        }\n    }\n    printf(\"%.12f\\n\", ans);\n}\n\nint main()\n{\n    input();\n    sort(f, f + n);\n    reverse(f, f + n);\n    work();\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/444B/","title":"444B","text":""},{"location":"competitive_programming/codeforces/444B/#description","title":"Description","text":"<p>There are two sequences called a and b of length n.</p> <p>a is a permutation of 1~n.</p> <p>b have d ones and n-d zeros.</p> <p>c_i=max(a_{i-j}b_j),(0\\leq j\\leq i).</p>"},{"location":"competitive_programming/codeforces/444B/#tutorial","title":"Tutorial","text":"<p>Set an value to s. (1 \\leq s \\leq n) For each c_i, we try the answer x from n to s. We can know whether c_i = x in O(1) with a preprocessing of recording the position of each number in a.</p> <p>If the answer is not found with the operations above, we calculated with brute force. But we first record the position of each \"1\" in b, and we only check the \"1\"s to accelerate the brute force process.</p>"},{"location":"competitive_programming/codeforces/444B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define MAX_N 100005\n#define D(x) \n\nint a[MAX_N], b[MAX_N];\nint n, d;\nlong long x;\nint one_num, one_pos[MAX_N];\nint pos_a[MAX_N];\nint ans[MAX_N];\n\nvoid output(int ans[])\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"%d\\n\", ans[i]);\n    }\n}\n\nint getNextX() {\n    x = (x * 37 + 10007) % 1000000007;\n    return x;\n}\n\nvoid initAB() {\n    int i;\n    for(i = 0; i &lt; n; i = i + 1){\n        a[i] = i + 1;\n    }\n    for(i = 0; i &lt; n; i = i + 1){\n        swap(a[i], a[getNextX() % (i + 1)]);\n    }\n    for(i = 0; i &lt; n; i = i + 1){\n        if (i &lt; d)\n            b[i] = 1;\n        else\n            b[i] = 0;\n    }\n    for(i = 0; i &lt; n; i = i + 1){\n        int y;\n        swap(b[i], b[y = getNextX() % (i + 1)]);\n        D(printf(\"%d%d\\n\", i, y));\n        D(output(b));\n        D(puts(\"\"));\n    }\n}\n\nvoid work()\n{\n    int s = 30;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (b[i] == 1)\n        {\n            one_pos[one_num++] = i;\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++)\n    {\n        a[i]--;\n        pos_a[a[i]] = i;\n    }\n\n    memset(ans, 0, sizeof(ans));\n    for (int i = n - 1; i &gt;= 0; i--)\n    {\n        for (int j = n - 1; j &gt;= n - s &amp;&amp; j &gt;= 0; j--)\n        {\n            if (pos_a[j] &lt;= i &amp;&amp; b[i - pos_a[j]] == 1)\n            {\n                ans[i] = j + 1;\n                break;\n            }\n        }\n\n        if (ans[i] != 0)\n        {\n            continue;\n        }\n\n        for (int j = 0; j &lt; one_num; j++)\n        {\n            if (i - one_pos[j] &lt; 0)\n            {\n                break;\n            }\n            ans[i] = max(ans[i], a[i - one_pos[j]] + 1);\n        }\n    }\n}\nvoid input()\n{\n    int xx;\n    scanf(\"%d%d%d\", &amp;n, &amp;d, &amp;xx);\n    x = xx;\n}\n\nint main()\n{\n    input();\n    initAB();\n    work();\n    output(ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/446B/","title":"446B","text":""},{"location":"competitive_programming/codeforces/446B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdlib&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\n#define MAX_ROW_NUM 1005\n#define MAX_COL_NUM MAX_ROW_NUM\n#define D(x) \n#define MAX_K 1000005\n\nint row_num, col_num;\nint operation_num;\nint decrease_value;\nint matrix[MAX_ROW_NUM][MAX_COL_NUM];\nint row_sum[MAX_ROW_NUM];\nint col_sum[MAX_COL_NUM];\nlong long row_ans[MAX_K];\nlong long col_ans[MAX_K];\n\nvoid input()\n{\n    scanf(\"%d%d\", &amp;row_num, &amp;col_num);\n    scanf(\"%d%d\", &amp;operation_num, &amp;decrease_value);\n    for (int i = 0; i &lt; row_num; i++)\n    {\n        for (int j = 0; j &lt; col_num; j++)\n        {\n            int a;\n            scanf(\"%d\", &amp;a);\n            matrix[i][j] = a;\n            row_sum[i] += a;\n            col_sum[j] += a;\n        }\n    }\n}\n\nvoid make(priority_queue&lt;int&gt; &amp;pq, int multi)\n{\n    int top = pq.top();\n    pq.pop();\n    top -= decrease_value * multi;\n    pq.push(top);\n}\n\nlong long work()\n{\n    priority_queue&lt;int&gt; pq_row;\n    priority_queue&lt;int&gt; pq_col;\n    for (int i = 0; i &lt; row_num; i++)\n    {\n        pq_row.push(row_sum[i]);\n    }\n    for (int i = 0; i &lt; col_num; i++)\n    {\n        pq_col.push(col_sum[i]);\n    }\n    col_ans[0] = row_ans[0] = 0;\n    for (int i = 1; i &lt;= operation_num; i++)\n    {\n        row_ans[i] = pq_row.top() + row_ans[i - 1];\n        make(pq_row, col_num);\n    }\n    for (int i = 1; i &lt;= operation_num; i++)\n    {\n        col_ans[i] = pq_col.top() + col_ans[i - 1];\n        make(pq_col, row_num);\n    }\n    long long ret = -(1LL &lt;&lt; 50);\n    for (int i = 0; i &lt;= operation_num; i++)\n    {\n        long long temp = col_ans[i] + row_ans[operation_num - i];\n        long long total_decrease = decrease_value;\n        total_decrease *= i;\n        total_decrease *= operation_num - i;\n        temp -= total_decrease;\n        ret = max(ret, temp);\n    }\n    return ret;\n}\n\nint main()\n{\n    input();\n    printf(\"%I64d\\n\", work());\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/449B/","title":"449B","text":""},{"location":"competitive_programming/codeforces/449B/#description","title":"Description","text":"<p>The first node of a undirected graph is the capital, whose edges are normal roads. In addition, there are some train routes connecting the capital and other cities. Output how many train routes can be closed without affecting the shortest distance between the capital and each city. There are n cities (1 \\leq n \\leq 10^5) and m roads ( roads ( roads ( roads (1 \\leq m \\leq 3 \\times 10^5).</p>"},{"location":"competitive_programming/codeforces/449B/#tutorial","title":"Tutorial","text":"<p>We initially set the shortest distance to each city by its train route. Then start the Dijkstra algorithm. When updating the distance of a node, if the new distance is less than or equal to the original distance, it means that the train route to that node is not necessary (we find another shortest path other than the train route).</p> <p>I learned how to define a graph by vector.</p> <pre><code>vector&lt;pair&lt;int, int&gt; &gt; edge[MAX_NODE_NUM];\nedge[u].push_back(make_pair(v, w));\n</code></pre> <p>I also updated the template for Dijkstra.</p>"},{"location":"competitive_programming/codeforces/449B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\n#define MAX_EDGE_NUM 300005 * 2\n#define MAX_NODE_NUM 100005\n#define INF (1LL &lt;&lt; 60)\n#define D(x) \n\nint node_num, edge_num, route_num;\nlong long dist[MAX_NODE_NUM];\nbool train[MAX_NODE_NUM];\nvector&lt;pair&lt;int, int&gt; &gt; edge[MAX_NODE_NUM];\n\nvoid input()\n{\n    scanf(\"%d%d\", &amp;node_num, &amp;edge_num);\n    scanf(\"%d\", &amp;route_num);\n    for (int i = 0; i &lt; edge_num; i++)\n    {\n        int u, v, w;\n        scanf(\"%d%d%d\", &amp;u, &amp;v, &amp;w);\n        v--;\n        u--;\n        edge[u].push_back(make_pair(v, w));\n        edge[v].push_back(make_pair(u, w));\n    }\n    fill(dist, dist + node_num, INF);\n    fill(train, train + node_num, false);\n    for (int i = 0; i &lt; route_num; i++)\n    {\n        int v, w;\n        scanf(\"%d%d\", &amp;v, &amp;w);\n        v--;\n        dist[v] = min(dist[v], (long long)w);\n        train[v] = true;\n    }\n}\n\npriority_queue&lt;pair&lt;long long, int&gt; &gt; pq;\n\nvoid dijkstra(int source)\n{\n    dist[source] = 0;\n    pq.push(make_pair(0LL, 0));\n    for (int i = 0; i &lt; node_num; i++)\n        if (train[i])\n        {\n            pq.push(make_pair(-dist[i], i));\n        }\n    while (!pq.empty())\n    {\n        int u = pq.top().second;\n        long long w = -pq.top().first;\n        pq.pop();\n        if (dist[u] != w)\n            continue;\n        for (int i = 0; i &lt; (int)edge[u].size(); i++)\n        {\n            int v = edge[u][i].first;\n            long long new_w = edge[u][i].second + w;\n            if (dist[v] &gt;= new_w &amp;&amp; train[v])\n            {\n                train[v] = false;\n            }\n            if (dist[v] &gt; new_w)\n            {\n                dist[v] = new_w;\n                pq.push(make_pair(-dist[v], v));\n            }\n        }\n    }\n}\n\nint work()\n{\n    int ret = route_num;\n    for (int i = 0; i &lt; node_num; i++)\n    {\n        if (train[i])\n        {\n            ret--;\n        }\n    }\n    return ret;\n}\n\nint main()\n{\n    input();\n    dijkstra(0);\n    printf(\"%d\\n\", work());\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/453B/","title":"453B","text":""},{"location":"competitive_programming/codeforces/453B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\n#define D(x) \n\nconst int MAX_N = 120;\nconst int MAX_A = 65;\nconst int INF = 0x3f3f3f3f;\n\nint seq_a[MAX_N];\nint seq_b[MAX_N];\nint f[MAX_N][1 &lt;&lt; 18];\nint path[MAX_N][1 &lt;&lt; 18];\nint prime[20];\nint factor_bits[MAX_A];\nint num;\nint n;\n\nbool is_prime(int a)\n{\n    for (int i = 2; i &lt;= a / 2; i++)\n    {\n        if (a % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint make_factor(int a)\n{\n    int ret = 0;\n    for (int i = 0; i &lt; num; i++)\n    {\n        ret &lt;&lt;= 1;\n        if (a % prime[i] == 0)\n        {\n            ret = ret | 1;\n        }\n    }\n    return ret;\n}\n\nvoid init()\n{\n    num = 0;\n    for (int i = 2; i &lt;= 60; i++)\n    {\n        if (is_prime(i))\n        {\n            prime[num++] = i;\n        }\n    }\n    for (int i = 1; i &lt; 60; i++)\n    {\n        factor_bits[i] = make_factor(i);\n    }\n}\n\nvoid input()\n{\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        scanf(\"%d\", &amp;seq_a[i]);\n    }\n}\n\nvoid work()\n{\n    memset(f, -1, sizeof(f));\n    f[0][0] = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; (1 &lt;&lt; num); j++)\n        {\n            if (f[i][j] == -1)\n                continue;\n            for (int k = 1; k &lt; 60; k++)\n            {\n                if ((j &amp; factor_bits[k]) != 0)\n                    continue;\n                if (f[i + 1][j | factor_bits[k]] == -1 || f[i + 1][j | factor_bits[k]] &gt; f[i][j] + abs(seq_a[i + 1] - k))\n                {\n                    f[i + 1][j | factor_bits[k]] = f[i][j] + abs(seq_a[i + 1] - k);\n                    path[i + 1][j | factor_bits[k]] = k;\n                }\n            }\n        }\n    }\n    int ans = INF;\n    int temp;\n    for (int i = 0; i &lt; (1 &lt;&lt; num); i++)\n    {\n        if (f[n][i] == -1)\n            continue;\n        if (ans &gt; f[n][i])\n        {\n            ans = f[n][i];\n            temp = i;\n        }\n    }\n    for (int i = n; i &gt; 0; i--)\n    {\n        seq_b[i] = path[i][temp];\n        temp -= factor_bits[path[i][temp]];\n    }\n\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (i != 1)\n            putchar(' ');\n        printf(\"%d\", seq_b[i]);\n    }\n}\n\nint main()\n{\n    init();\n    input();\n    work();\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/455B/","title":"455B","text":""},{"location":"competitive_programming/codeforces/455B/#tutorial","title":"Tutorial","text":"<p>Trie can be implemented with a two dimentional array.</p>"},{"location":"competitive_programming/codeforces/455B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\n#define D(x) x\n\nconst int MAX_CHAR_NUM = 30;\nconst int MAX_N = int(1e5) + 10;\nconst int MAX_NODE_NUM = MAX_N;\n\nint trie[MAX_NODE_NUM][MAX_CHAR_NUM];\nint node_num;\n\nint n, round_num;\nchar st[MAX_N];\nbool leaf;\n\nvoid trie_init()\n{\n    memset(trie, -1, sizeof(trie));\n    node_num = 1;\n}\n\nint convert(char ch)\n{\n    return ch - 'a';\n}\n\nvoid add(char* st)\n{\n    int u = 0;\n    for (int i = 0; st[i]; i++)\n    {\n        int index = convert(st[i]);\n        if (trie[u][index] == -1)\n        {\n            trie[u][index] = node_num++;\n        }\n        u = trie[u][index];\n    }\n}\n\nvoid input()\n{\n    scanf(\"%d%d\", &amp;n, &amp;round_num);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%s\", st);\n        add(st);\n    }\n}\n\nbool dfs(int u)\n{\n    bool have_child = false;\n    bool ret = false;\n    for (int i = 0; i &lt; 26; i++)\n    {\n        if (trie[u][i] != -1)\n        {\n            have_child = true;\n            ret = ret || !dfs(trie[u][i]);\n        }\n    }\n    if (have_child)\n        return ret;\n    return leaf;\n}\n\nvoid output()\n{\n    for (int i = 0; i &lt; 24; i++)\n    {\n        for (int j = 0; j &lt; 26; j++)\n        {\n            printf(\"%d \", trie[i][j]);\n        }\n        puts(\"\");\n    }\n}\n\nint main()\n{\n    trie_init();\n    input();\n    leaf = false;\n    bool win = dfs(0);\n    leaf = true;\n    bool lose = dfs(0);\n    if (win &amp;&amp; lose)\n    {\n        puts(\"First\");\n    }else if (win &amp;&amp; !lose)\n    {\n        if (round_num &amp; 1)\n            puts(\"First\");\n        else\n            puts(\"Second\");\n    }else if (!win)\n    {\n        puts(\"Second\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/461B/","title":"461B","text":""},{"location":"competitive_programming/codeforces/461B/#description","title":"Description","text":"<p>A tree has n($1 \\leq n \\leq 10^5 $) vertices, the color of each of which is either black or white. Now, we need to split the tree into many parts, each of which has exactly one black vertex. Output how many ways to split the tree.</p>"},{"location":"competitive_programming/codeforces/461B/#tutorial","title":"Tutorial","text":"<p>This is a dynamic programming problem on a tree. Define dp[i][j][0] as the number of ways to split the subtree whose root is i, and only have its first j subtrees (the subtrees whose roots are i's direct children), just take the other children as not exist, and all the vertices in the part which contains vertex i is white. (all the other parts in this subtree has exactly one black vertex.) Define dp[i][j][1] is the same. The only difference is that there is exactly one black vertex in the part contains vertex i is white. (all the parts in this subtree has exactly one black vertex.)</p> <p>dp[i][0][0]=1 and dp[i][0][1]=0 if the root is white, otherwise their values are opposite.</p> <p>dp[i][j][0] = dp[i][j - 1][0] * dp[v][n_v][0];</p> <p>dp[i][j][1] = dp[i][j - 1][0] * dp[v][n_v][1] + dp[i][j - 1][1] * dp[v][n_v][0];</p> <p>The two equation above means do not split i and v. (v is i's jth child. n_v is the number of children v has.)</p> <p>dp[i][j][0] += dp[i][j - 1][0] * dp[v][n_v][1];</p> <p>dp[i][j][1] += dp[i][j - 1][1] * dp[v][n_v][1];</p> <p>The two addition above means we split i and v. When calculating dp[x][j][y], we need dp[x][j - 1][y]. We can delete the second dimension, just replace the old value with the new as j increases is ok.</p> <p>There are many things I learned from this problem.</p> <ol> <li> <p>About the defining the max value of n.</p> <pre><code>  const int MAX_N = int(1e5) + 10;\n</code></pre> </li> <li> <p>Iterating all the scenarios and use conditions to control what to do. The following state transition controll is a good example.</p> <pre><code>  for (int i = 0; i &lt; 2; i++)\n  {\n      for (int j = 0; j &lt; 2; j++)\n      {\n          if (i + j &lt; 2)\n              cur[i + j] = (cur[i + j] + 1LL * last[i] * dp[v][j] % MOD) % MOD;\n          if (j == 1)\n              cur[i] = (cur[i] + 1LL * last[i] * dp[v][j] % MOD) % MOD;\n      }\n  }\n</code></pre> </li> <li> <p>A way to controll DFS.</p> <pre><code>  DFS()\n  {\n      for (all the children)\n      {\n          DFS();\n      }\n      do the work();\n  }\n</code></pre> </li> <li> <p>The connection of dynamic programming of two different data structures of storing trees. One is as a graph. The other is \"left son right brother\". The thought of going through the children one by one and see the past children as a whole is very similar with the thought of DP on \"left son right brother\".</p> </li> </ol>"},{"location":"competitive_programming/codeforces/461B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nconst int MAX_N = int(1e5) + 10;\nconst int MOD = int(1e9) + 7;\n\nint n;\nvector&lt;int&gt; edge[MAX_N];\nint color[MAX_N];\nint dp[MAX_N][2]; //0 white, 1 black\n\nvoid input()\n{\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n - 1; i++)\n    {\n        int p;\n        scanf(\"%d\", &amp;p);\n        edge[i + 1].push_back(p);\n        edge[p].push_back(i + 1);\n    }\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;color[i]);\n    }\n}\n\nvoid dfs(int u, int parent)\n{\n    for (vector&lt;int&gt;::iterator it = edge[u].begin(); it != edge[u].end(); it++)\n    {\n        int v = *it;\n        if (v == parent)\n            continue;\n        dfs(v, u);\n    }\n\n    vector&lt;int&gt; last(2, 0);\n    last[color[u]] = 1;\n    for (vector&lt;int&gt;::iterator it = edge[u].begin(); it != edge[u].end(); it++)\n    {\n        int v = *it;\n        if (v == parent)\n            continue;\n        vector&lt;int&gt; cur(2, 0);\n        for (int i = 0; i &lt; 2; i++)\n        {\n            for (int j = 0; j &lt; 2; j++)\n            {\n                if (i + j &lt; 2)\n                    cur[i + j] = (cur[i + j] + 1LL * last[i] * dp[v][j] % MOD) % MOD;\n                if (j == 1)\n                    cur[i] = (cur[i] + 1LL * last[i] * dp[v][j] % MOD) % MOD;\n            }\n        }\n        last = cur;\n    }\n\n    for (int i = 0; i &lt; 2; i++)\n    {\n        dp[u][i] = last[i];\n    }\n}\n\nint main()\n{\n    input();\n    dfs(0, -1);\n    printf(\"%d\\n\", dp[0][1]);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/464B/","title":"464B","text":""},{"location":"competitive_programming/codeforces/464B/#tutorial","title":"Tutorial","text":"<p>We can use the following code to go through all the permutations of an array.</p> <pre><code>sort(array, array + n);\ndo\n{} while (next_permutation(array, array + n));\n</code></pre>"},{"location":"competitive_programming/codeforces/464B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)\n#define eps 1.0E-8\n#define MAX_POINT_NUM 0\n#define D(x)\n\nstruct Point\n{\n    int x, y, z;\n\n    Point()\n    {\n        x = y = z = 0;\n    }\n\n    Point(int x, int y, int z): x(x), y(y), z(z)\n    {}\n\n    Point operator - (const Point &amp;a) const\n    {\n        return Point(x - a.x, y - a.y, z - a.z);\n    }\n\n    Point operator + (const Point &amp;a) const\n    {\n        return Point(x + a.x, y + a.y, z + a.z);\n    }\n\n    bool operator == (const Point &amp;a) const\n    {\n        return x == a.x &amp;&amp; y == a.y &amp;&amp; z == a.z;\n    }\n}point[10];\n\nlong long dot_product(Point a, Point b)\n{\n    return 1LL*a.x * b.x + 1LL*a.y * b.y + 1LL*a.z * b.z;\n}\n\nvoid input()\n{\n    for (int i = 0; i &lt; 8; i++)\n    {\n        int a, b, c;\n        scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c);\n        point[i] = Point(a, b, c);\n    }\n}\n\nlong long point_dist(Point a)\n{\n    return 1LL*a.x * a.x + 1LL*a.y * a.y + 1LL*a.z * a.z;\n}\n\nbool perpendicular(Point a, Point b)\n{\n    return (dot_product(a, b)) == 0;\n}\n\nbool exist(Point a)\n{\n    for (int i = 0; i &lt; 8; i++)\n    {\n        if (point[i] == a)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool is_cube()\n{\n    int num = 0;\n    long long min_val = point_dist(point[0] - point[1]);\n    long long dist_array[10];\n    Point vec[10];\n    for (int i = 1; i &lt; 8; i++)\n    {\n        double temp = point_dist(point[0] - point[i]);\n        dist_array[i] = temp;\n        if ((temp - min_val) &lt; 0)\n        {\n            min_val = temp;\n        }\n    }\n    for (int i = 1; i &lt; 8; i++)\n    {\n        if ((dist_array[i] - min_val) == 0 &amp;&amp; !(point[0] == point[i]))\n        {\n            vec[num++] = point[i] - point[0];\n        }\n    }\n    if (num != 3)\n    {\n        return false;\n    }\n    if (!perpendicular(vec[0], vec[1]))\n    {\n        return false;\n    }\n    if (!perpendicular(vec[0], vec[2]))\n    {\n        return false;\n    }\n    if (!perpendicular(vec[2], vec[1]))\n    {\n        return false;\n    }\n    if (!exist(point[0] + vec[0] + vec[1]))\n    {\n        return false;\n    }\n    if (!exist(point[0] + vec[0] + vec[2]))\n    {\n        return false;\n    }\n    if (!exist(point[0] + vec[2] + vec[1]))\n    {\n        return false;\n    }\n    if (!exist(point[0] + vec[0] + vec[1] + vec[2]))\n    {\n        return false;\n    }\n    return true;\n}\n\nvoid output()\n{\n    puts(\"YES\");\n    for (int i = 0; i &lt; 8; i++)\n    {\n        int a = point[i].x;\n        int b = point[i].y;\n        int c = point[i].z;\n        printf(\"%d %d %d\\n\", a, b, c);\n    }\n}\n\nvoid dfs(int depth)\n{\n    if (depth == 8)\n    {\n        if (is_cube())\n        {\n            output();\n            exit(0);\n        }\n        return;\n    }\n    int value[10];\n    Point temp = point[depth];\n    value[0] = point[depth].x;\n    value[1] = point[depth].y;\n    value[2] = point[depth].z;\n    sort(value, value + 3);\n    while (true)\n    {\n        point[depth].x = value[0];\n        point[depth].y = value[1];\n        point[depth].z = value[2];\n        dfs(depth + 1);\n        if (!next_permutation(value, value + 3))\n        {\n            break;\n        }\n    }\n    point[depth] = temp;\n}\n\nint main()\n{\n    input();\n    dfs(1);\n    puts(\"NO\");\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/468B/","title":"468B","text":""},{"location":"competitive_programming/codeforces/468B/#description","title":"Description","text":"<p>We have n (1 \\leq n \\leq 10^5) distinct integers q_1~q_n, a and b. There are two sets A and B. If x belongs to A, A must also contains a-x. It is the same with B and b. Output how qs can be divided into the two sets. Each q belongs and only belongs to one set.</p>"},{"location":"competitive_programming/codeforces/468B/#tutorial","title":"Tutorial","text":"<p>If we have number x and a-x, they should be in the same set. If x belongs to A, it is obvious that a-x belongs to A. If x is not in A, then a-x cannot find its partner in A, so they it cannot be in A any more. Therefore, they can only all be in B. It is the same as the number x,\u2009b\u2009-\u2009x.</p> <p>In additon, we should also know that if a-x does not exist, x can only belong to B. It is the same as A.</p> <p>So we can use Disjoint Sets to solve this problem. Join the qs that must belongs to one set. Join those who must belong to A with a special node. Join those who must belong to B with another special node. Finally, if the two special nodes are in joined, there is no solution. Otherwise, solution exists.</p> <p>Use STL map to get the positions of a-x and b-x.</p>"},{"location":"competitive_programming/codeforces/468B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;map&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define D(x) \n#define MAX_N 100005\n\nint sum_a, sum_b;\nint f[MAX_N];\nint n;\n\nstruct Disjoint_sets\n{\n    int father[MAX_N];\n\n    Disjoint_sets()\n    {}\n\n    Disjoint_sets(int n)\n    {\n        for (int i = 0; i &lt; n; i++)\n        {\n            father[i] = i;\n        }\n    }\n\n    int root(int a)\n    {\n        int ret = a;\n        while (father[ret] != ret)\n            ret = father[ret];\n        while (father[a] != a)\n        {\n            int b = a;\n            a = father[a];\n            father[b] = ret;\n        }\n        return ret;\n    }\n\n    void join(int a, int b)\n    {\n        father[root(a)] = father[root(b)];\n    }\n}d_set;\n\nvoid input()\n{\n    scanf(\"%d%d%d\", &amp;n, &amp;sum_a, &amp;sum_b);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;f[i]);\n    }\n}\n\nbool work()\n{\n    d_set = Disjoint_sets(n + 2);\n    map&lt;int, int&gt; pos;\n    for (int i = 0; i &lt; n; i++)\n    {\n        pos[f[i]] = i;\n    }\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (pos.find(sum_a - f[i]) != pos.end())\n        {\n            d_set.join(i, pos[sum_a - f[i]]);\n        }else\n        {\n            d_set.join(i, n);\n        }\n        if (pos.find(sum_b - f[i]) != pos.end())\n        {\n            d_set.join(i, pos[sum_b - f[i]]);\n        }else\n        {\n            d_set.join(i, n + 1);\n        }\n    }\n    return d_set.root(n) != d_set.root(n + 1);\n}\n\nvoid output()\n{\n    puts(\"YES\");\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (i != 0)\n        {\n            putchar(' ');\n        }\n        if (d_set.root(i) == d_set.root(n))\n        {\n            putchar('1');\n        }else\n        {\n            putchar('0');\n        }\n    }\n}\n\nint main()\n{\n    input();\n    if (!work())\n    {\n        puts(\"NO\");\n    }else\n    {\n        output();\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/477B/","title":"477B","text":""},{"location":"competitive_programming/codeforces/477B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\nusing namespace std;\n\nint f[] = {1, 2, 3, 5};\nint n, k;\n\nvoid input()\n{\n    scanf(\"%d%d\", &amp;n, &amp;k);\n}\n\nvoid output()\n{\n    printf(\"%d\\n\", (f[3] + (n - 1) * 6) * k);\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; 4; j++)\n        {\n            if (j != 0)\n            {\n                putchar(' ');\n            }\n            printf(\"%d\", (f[j] + i * 6) * k);\n        }\n        puts(\"\");\n    }\n}\n\nint main()\n{\n    input();\n    output();\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/480B/","title":"480B","text":""},{"location":"competitive_programming/codeforces/480B/#tutorial","title":"Tutorial","text":"<p>Function \"find\" in STL set and map can be used to find a element in them in O(logN). It made them can be used as a hashtable whose query complexity is O(logN) instead of O(1).</p>"},{"location":"competitive_programming/codeforces/480B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define MAX_N 100005\n\nint n, mark_len, girl, boy;\nint mark[MAX_N];\n\nvoid input()\n{\n    scanf(\"%d%d%d%d\", &amp;n, &amp;mark_len, &amp;girl, &amp;boy);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;mark[i]);\n    }\n}\n\nbool find(int a)\n{\n    int* p = lower_bound(mark, mark + n, a);\n    if (p == mark + n)\n        return false;\n    return a == *p;\n}\n\nvoid work()\n{\n    bool found_boy = false;\n    bool found_girl = false;\n    for (int i = 0; i &lt; n; i++)\n    {\n        found_boy = found_boy || find(mark[i] + boy);\n        found_girl = found_girl || find(mark[i] + girl);\n    }\n    if (found_boy &amp;&amp; found_girl)\n    {\n        puts(\"0\");\n        return;\n    }\n    if (found_boy)\n    {\n        puts(\"1\");\n        printf(\"%d\\n\", girl);\n        return;\n    }\n    if (found_girl)\n    {\n        puts(\"1\");\n        printf(\"%d\\n\", boy);\n        return;\n    }\n    for (int i = 0; i &lt; n; i++)\n    {\n        if ((find(mark[i] + girl - boy) &amp;&amp; mark[i] + girl &lt;= mark_len) || find(mark[i] + girl + boy))\n        {\n            printf(\"1\\n%d\\n\", mark[i] + girl);\n            return;\n        }\n        if (find(mark[i] - girl + boy) &amp;&amp; mark[i] - girl &gt;= 0)\n        {\n            printf(\"1\\n%d\\n\", mark[i] - girl);\n            return;\n        }\n    }\n    printf(\"2\\n%d %d\\n\", girl, boy);\n}\n\nint main()\n{\n    input();\n    work();\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/482B/","title":"482B","text":""},{"location":"competitive_programming/codeforces/482B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define MAX_M 100005\n#define MAX_N 100005\n#define MAX_BIT_NUM 40\n#define D(x) x\n\nstruct Condition\n{\n    int l, r, q;\n}condition[MAX_M];\n\nint n, m;\nint seq[MAX_N][MAX_BIT_NUM];\nint delta[MAX_N][MAX_BIT_NUM];\nint sum[MAX_N][MAX_BIT_NUM];\n\nvoid input()\n{\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; m; i++)\n    {\n        int a, b, c;\n        scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;c);\n        condition[i].l = a;\n        condition[i].r = b;\n        condition[i].q = c;\n    }\n}\n\nint get_bit(int l, int r, int pos)\n{\n    int temp = sum[r][pos] - sum[l - 1][pos] - (r - l + 1);\n    if (temp == 0)\n        return 1;\n    return 0;\n}\n\nint work()\n{\n    for (int i = 0; i &lt; m; i++)\n    {\n        int q = condition[i].q;\n        for (int j = 0; q; q &gt;&gt;= 1, j++)\n        {\n            if (q &amp; 1)\n            {\n                delta[condition[i].l][j] += 1;\n                delta[condition[i].r + 1][j] += -1;\n            }\n        }\n    }\n\n    int temp[MAX_BIT_NUM];\n    fill(temp, temp + MAX_BIT_NUM, 0);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        for (int j = 0; j &lt; MAX_BIT_NUM; j++)\n        {\n            temp[j] += delta[i][j];\n            if (temp[j])\n            {\n                seq[i][j] = 1;\n            }\n            sum[i][j] = sum[i - 1][j] + seq[i][j];\n        }\n    }\n\n    for (int i = 0; i &lt; m; i++)\n    {\n        int q = condition[i].q;\n        for (int j = 0; j &lt;= 30; j++, q &gt;&gt;= 1)\n        {\n            if (get_bit(condition[i].l, condition[i].r, j) != (q &amp; 1))\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nint get_value(int pos)\n{\n    int ret = 0;\n    for (int i = 30; i &gt;= 0; i--)\n    {\n        ret = (ret &lt;&lt; 1) + seq[pos][i];\n    }\n    return ret;\n}\n\nvoid output()\n{\n    printf(\"%d\", get_value(1));\n    for (int i = 2; i &lt;= n; i++)\n    {\n        printf(\" %d\", get_value(i));\n    }\n    puts(\"\");\n}\n\nint main()\n{\n    input();\n    if (work())\n    {\n        puts(\"YES\");\n        output();\n    }else\n    {\n        puts(\"NO\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/484B/","title":"484B","text":""},{"location":"competitive_programming/codeforces/484B/#description","title":"Description","text":"<p>You are given a sequence a consisting of n integers. Find the maximum possible value of a_i mod a_j, where 1\u2009\\leq\u2009i,\u2009j\u2009\\leq\u2009n and a_i\u2009\\geq\u2009a_j. (n \\leq 2 \\times 10^5)  </p>"},{"location":"competitive_programming/codeforces/484B/#tutorial","title":"Tutorial","text":"<p>Sort the sequence first. Let us iterate over all different a_j. Since we need to maximize, then iterate all integer x (such x divisible by a_j) in range from 2 \\times a_j to M, where M is the sum of the max value in the sequence and a_j. For each such x we need to find maximum a_i, such a_i\u2009&lt;\u2009x.</p> <p>You can do this in time O(1) with preprocess the answers for 1 to 10^6. But I would rather directly use lower_bound, the time of which is O(logN). After that, update answer by a_i mod a_j.  </p> <p>Notably, the total time complexity is O(NlogN\u2009+\u2009MlogMlogN). The iteration for all the a_j and x is O(MlogM). Because \\sum\\limits_{i=1}^{M} \\frac{M}{i} \\approx O(MlogM) which can be deducted from Euler-Mascheroni constant.  </p>"},{"location":"competitive_programming/codeforces/484B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\n\n#define MAX_N 200005\n#define D(x)\n\nint n;\nint f[MAX_N];\n\nvoid input()\n{\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;f[i]);\n}\n\nint work()\n{\n    int ret = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 2; j * f[i] &lt;= f[n - 1] + f[i]; j++)\n        {\n            int temp = *(lower_bound(f, f + n, f[i] * j) - 1);\n            ret = max(ret, temp % f[i]);\n        }\n    }\n    return ret;\n}\n\nint main()\n{\n    input();\n    sort(f, f + n);\n    n = unique(f, f + n) - f;\n    printf(\"%d\\n\", work());\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/487B/","title":"487B","text":""},{"location":"competitive_programming/codeforces/487B/#description","title":"Description","text":"<p>Given a sequence of numbers of length n. (1 \\leq n \\leq 10^5) It require us to split the sequence into several substrip, and the difference between the maximum value and minimum value in each strip is no greater than l, and the length of each substrip must be greater than s. Output the minimal number of strip it could be divided into.</p>"},{"location":"competitive_programming/codeforces/487B/#tutorial","title":"Tutorial","text":"<p>Use dynamic programming to solve the problem. Let f[i] denote the minimal number of pieces that the first i numbers can be split into. g[i] denote the least possible left boarder of substrip whose right border is i which satisfies the condition. Then f[i]\u2009=\u2009min(f[k])\u2009+\u20091, where g[i]\u2009\u2264\u2009k\u2009\u2264\u2009i\u2009-\u2009l.</p> <p>One possible way to calculate g[i] is to use monotonic queue which can be done in O(n). But it is hard to implement, since we need to maintain 2 monotonic queues to for the maximal and minimal value, especially when it comes to the pop operation.</p> <p>Here we have a alternative way to do this, multiset. Multiset is a STL container which have the same function of STL set, however, it can store multiple items of the same value. We can insert and erase a element by O(logN), which is slower than the push and pop of monotonic queue which is O(1). Quest any element in multiset (e.g. maximum, minimum) in O(1). (I cannot believe that) It can be used as follows.</p> <pre><code>multiset&lt;E&gt; m;\nm.insert(a);    //insert a into the multiset\nm.erase(m.lower_bound(a));  //delete a from the multiset\n*m.begin(); //the minimum element\n*(--m.end());   //the maximum element\n</code></pre> <p>With so easy to access the maximum and minimum, we can finish the task of calculating g[i] with a process of two pointers, which is to push the right boarder by 1 and to push the left boarder until it satisfies the condition.</p> <p>We can also use either monotonic queue or multiset to calculate f[i], because its also a task of finding the minimal between the two pointers.</p>"},{"location":"competitive_programming/codeforces/487B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;cmath&gt;\n#include &lt;set&gt;\nusing namespace std;\n\n#define MAX_N 100005\n#define D(x) \n#define INF 0x3f3f3f3f\n\nint n, s, max_diff;\nint seq[MAX_N];\nint f[MAX_N], g[MAX_N];\n\nvoid input()\n{\n    scanf(\"%d%d%d\", &amp;n, &amp;max_diff, &amp;s);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;seq[i]);\n    }\n}\n\nint work()\n{\n    multiset&lt;int&gt; multi_set;\n    int left = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        multi_set.insert(seq[i]);\n        while (!multi_set.empty())\n        {\n            int min_val = *multi_set.begin();\n            int max_val = *(--multi_set.end());\n            D(printf(\"  min=%d\\n\", min_val));\n            D(printf(\"  max=%d\\n\", max_val));\n            if (max_val - min_val &lt;= max_diff)\n            {\n                break;\n            }\n            D(printf(\"  left=%d\\n\", left));\n            multi_set.erase(multi_set.lower_bound(seq[left]));\n            left++;\n        }\n        g[i] = left;\n        D(printf(\"g[%d]=%d\\n\", i, g[i]));\n    }\n\n    multi_set.clear();\n    f[0] = 0;\n    for (int i = 0; i &lt; s - 1; i++)\n    {\n        f[i + 1] = INF;\n    }\n    left = -1;\n    for (int i = s - 1; i &lt; n; i++)\n    {\n        D(printf(\"f[i]=%d\\n\", f[i]));\n        D(printf(\"%d\\n\", i));\n        D(printf(\"  in:%d\\n\", i-s));\n        multi_set.insert(f[i - s + 1]);\n        while (left &lt; g[i] - 1 &amp;&amp; left &lt;= i - s)\n        {\n        D(printf(\"  out:%d\\n\", left));\n            multi_set.erase(multi_set.lower_bound(f[left + 1]));\n            left++;\n        }\n        if (multi_set.empty())\n        {\n            f[i + 1] = INF;\n            continue;\n        }\n        f[i + 1] = *multi_set.begin() + 1;\n    }\n    if (f[n] &gt;= INF)\n    {\n        return -1;\n    }\n    return f[n];\n}\n\nint main()\n{\n    input();\n    printf(\"%d\\n\", work());\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/489C/","title":"489C","text":""},{"location":"competitive_programming/codeforces/489C/#description","title":"Description","text":"<p>Given two set of integers. Totally, n integers. There are m edges connecting some integers from one set to the other. (1 \\leq n,m \\leq 100)</p> <p>One operation could reduce two integers which have a edge between them by a common factor. Output the maximum number of operations could be performed. </p>"},{"location":"competitive_programming/codeforces/489C/#tutorial","title":"Tutorial","text":"<p>It is easy to know that each operation should use a prime factor, so that the answer could be maximized. For each prime number which is a factor of any of the integer in the set, we perform a maxflow. Each integer is a vertex in the network flow graph.</p> <p>In the time of prime p, we add edges from the source to the integers in the first set with capacity of the number of ps that the integer contains. Likely, we add edges from the integers in the second set to the terminal.</p> <p>Finally, we add up each maxflow which is the answer of the problem.</p>"},{"location":"competitive_programming/codeforces/489C/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n#include &lt;set&gt;\nusing namespace std;\n\nconst int MAX_N = 105;\n\n#define REP(i,n) for((i)=0;(i)&lt;(int)(n);(i)++)\n#define snuke(c,itr) for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)\n\ntypedef int F;\n#define F_INF (1&lt;&lt;29)\n#define MAXV 1000\n#define MAXE 1000 // E*2!\n\nF cap[MAXE],flow[MAXE];\nint to[MAXE],_prev[MAXE],last[MAXV],used[MAXV],level[MAXV];\n\nstruct MaxFlow{\n    int V,E;\n\n    MaxFlow(int n){\n    int i;\n    V = n; E = 0;\n    REP(i,V) last[i] = -1;\n    }\n\n    void add_edge(int x, int y, F f){\n    cap[E] = f; flow[E] = 0; to[E] = y; _prev[E] = last[x]; last[x] = E; E++;\n    cap[E] = 0; flow[E] = 0; to[E] = x; _prev[E] = last[y]; last[y] = E; E++;\n    }\n\n    bool bfs(int s, int t){\n    int i;\n    REP(i,V) level[i] = -1;\n    queue &lt;int&gt; q;\n    q.push(s); level[s] = 0;\n    while(!q.empty()){\n        int x = q.front(); q.pop();\n        for(i=last[x];i&gt;=0;i=_prev[i]) if(level[to[i]] == -1 &amp;&amp; cap[i] &gt; flow[i]) {q.push(to[i]); level[to[i]] = level[x] + 1;}\n    }\n    return (level[t] != -1);\n    }\n\n    F dfs(int v, int t, F f){\n    int i;\n    if(v == t) return f;\n    for(i=used[v];i&gt;=0;used[v]=i=_prev[i]) if(level[to[i]] &gt; level[v] &amp;&amp; cap[i] &gt; flow[i]){\n        F tmp = dfs(to[i],t,min(f,cap[i]-flow[i]));\n        if(tmp &gt; 0) {flow[i] += tmp; flow[i^1] -= tmp; return tmp;}\n    }\n    return 0;\n    }\n\n    F maxflow(int s, int t){\n    int i;\n    while(bfs(s,t)){\n        REP(i,V) used[i] = last[i];\n        while(dfs(s,t,F_INF) != 0);\n    }\n    F ans = 0;\n    for(i=last[s];i&gt;=0;i=_prev[i]) ans += flow[i];\n    return ans;\n    }\n\n};\n\nint n, m;\nint f[MAX_N];\nint odd[MAX_N], even[MAX_N];\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", f + i);\n    }\n    for (int i = 0; i &lt; m; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &amp;a, &amp;b);\n        a--;\n        b--;\n        if (b &amp; 1)\n        {\n            swap(a, b);\n        }\n        odd[i] = a;\n        even[i] = b;\n    }\n\n    //work\n    set&lt;int&gt; s;\n    for (int i = 0; i &lt; n; i++)\n    {\n        int temp = f[i];\n        for (int j = 2; j * j &lt;= temp; j++)\n        {\n            if (temp % j == 0)\n            {\n                s.insert(j);\n            }\n            while (temp % j == 0)\n            {\n                temp /= j;\n            }\n        }\n        if (temp &gt; 1)\n        {\n            s.insert(temp);\n        }\n    }\n\n    //flow\n    int ans = 0;\n    for (typeof(s.begin()) itr = s.begin(); itr != s.end(); itr++)\n    {\n        int factor = *itr;\n        MaxFlow net = MaxFlow(n + 2);\n        for (int i = 0; i &lt; n; i++)\n        {\n            int cnt = 0;\n            int temp = f[i];\n            while (temp % factor == 0)\n            {\n                temp /= factor;\n                cnt++;\n            }\n            if (i &amp; 1)\n            {\n                net.add_edge(n, i, cnt);\n            }else\n            {\n                net.add_edge(i, n + 1, cnt);\n            }\n        }\n        for (int i = 0; i &lt; m; i++)\n        {\n            net.add_edge(odd[i], even[i], F_INF);\n        }\n        ans += net.maxflow(n, n + 1);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/504B/","title":"504B","text":""},{"location":"competitive_programming/codeforces/504B/#description","title":"Description","text":"<p>Give you two permutations of n integers of 0 to n - 1. (1 \\leq n \\leq 2\\times 10^5). Posit they are the ath and bth permutation. Output the (a + b) \\% nth permutation.</p>"},{"location":"competitive_programming/codeforces/504B/#tutorial","title":"Tutorial","text":"<p>With the thought of dynamic programming, we can come up with the formula of calculating the rank of a permutation, which is as follows. rank = \\sum\\limits_{i=1}^{n}{less(p_i) \\times (n - i)!}. p_i is the ith number in the permutation. less(p_i) means the number of p_j which is less than p_i and j is greater than i, which can be calculated by binary indexed tree. With this formula we can calculate a+b like we add two big integers. less(p_i)s are the digits of the big integers. We need to do the carry bit.</p> <p>After that we have the a+b and we need to transform it back to the a + bth permutation, which can be done by binary indexed tree and binary search.</p>"},{"location":"competitive_programming/codeforces/504B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\n#define D(x) \n\nconst int MAX_N = (int)(1e5) * 2 + 10;\n\nint n;\nint a[MAX_N];\nint b[MAX_N];\nint sum_b[MAX_N];\nint sum_a[MAX_N];\nint c[MAX_N];\nint sum_c[MAX_N];\n\nint binary_indexed_tree[MAX_N];\n\nint low_bit(int x)\n{\n    return x &amp; (-x);\n}\n\nvoid add(int pos, int val)\n{\n    for (int i = pos; i &lt; MAX_N; i += low_bit(i))\n    {\n        binary_indexed_tree[i] += val;\n    }\n}\n\nint sum(int pos)\n{\n    int ret = 0;\n    for (int i = pos; i &gt; 0; i -= low_bit(i))\n    {\n        ret += binary_indexed_tree[i];\n    }\n    return ret;\n}\n\nvoid input(int a[])\n{\n    for (int i = 1; i &lt;= n; i++)\n    {\n        scanf(\"%d\", &amp;a[i]);\n        a[i]++;\n    }\n}\n\nvoid work(int sum_a[], int a[])\n{\n    fill(binary_indexed_tree, binary_indexed_tree + n + 1, 0);\n    for (int i = n; i; i--)\n    {\n        sum_a[i] = sum(a[i]);\n        add(a[i], 1);\n    }\n}\n\nbool ok(int mid, int a)\n{\n    return sum(mid) &gt;= a;\n}\n\nint binary_search(int start, int end, int a)\n{\n    int l = start;\n    int r = end;\n    while (l &lt; r)\n    {\n        int mid = (l + r) / 2;\n        if (ok(mid, a))\n            r = mid;\n        else\n            l = mid + 1;\n    }\n    return l;\n}\n\nint main()\n{\n    //input\n    scanf(\"%d\", &amp;n);\n    input(a);\n    input(b);\n\n    //work\n    work(sum_a, a);\n    work(sum_b, b);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        sum_c[i] = sum_a[i] + sum_b[i];\n    }\n    for (int i = n; i; i--)\n    {\n        if (sum_c[i] &gt; n - i)\n        {\n            sum_c[i] -= n - i + 1;\n            sum_c[i - 1] += 1;\n        }\n    }\n    fill(binary_indexed_tree, binary_indexed_tree + n + 1, 0);\n    for (int i = 1; i &lt;= n; i++)\n        add(i, 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        c[i] = binary_search(1, n, sum_c[i] + 1);\n        add(c[i], -1);\n    }\n    D(for (int i = 1; i &lt;4; i++) printf(\"%d\\n\", sum_c[i]));\n\n    //output\n    for (int i = 1; i &lt;= n; i++)\n    {\n        printf(\"%d\", c[i] - 1);\n        if (i != n)\n            putchar(' ');\n    }\n    puts(\"\");\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/codeforces/506B/","title":"506B","text":""},{"location":"competitive_programming/codeforces/506B/#description","title":"Description","text":"<p>There are n vertexes in the graph. Now we need to add some unidirected edges to it. To make sure that we can go from a to b in each pair (a,b) among the m pairs given below. (1 \\leq n,m \\leq 10^5) Output the minimum number of edges to be added.</p>"},{"location":"competitive_programming/codeforces/506B/#tutorial","title":"Tutorial","text":"<p>First we add all the edges and use Disjoint Set Union to see the connected components. In a component without circles, we can construct the edges like this. We arrange all the points in a line, and connect them into a chain. There must exist a chain can fulfill the condition in the description.</p> <p>For those component contain circles, we just form a big circle which every vertex can go to every vertex.</p> <p>Topological order can be used for circle detection. If after the BFS, there still some vertex's degree is not zero, it must contain cricle.</p>"},{"location":"competitive_programming/codeforces/506B/#solution","title":"Solution","text":"<pre><code>#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\n#define D(x) x\n\nconst int MAX_N = (int)(1e5) + 10;\n\nstruct DSU\n{\n    int father[MAX_N];\n\n    DSU()\n    {}\n\n    DSU(int n)\n    {\n        for (int i = 0; i &lt; n; i++)\n        {\n            father[i] = i;\n        }\n    }\n\n    int find(int a)\n    {\n        int ret = a;\n        while (father[ret] != ret)\n            ret = father[ret];\n        while (father[a] != a)\n        {\n            int b = a;\n            a = father[a];\n            father[b] = ret;\n        }\n        return ret;\n    }\n\n    void merge(int a, int b)\n    {\n        father[find(a)] = father[find(b)];\n    }\n};\n\n\nint n, m;\nbool circle[MAX_N];\nvector&lt;int&gt; edge[MAX_N];\nint degree[MAX_N];\n\nvoid add_edge(int a, int b)\n{\n    edge[a].push_back(b);\n    degree[b]++;\n}\n\nvoid bfs(int node_num, vector&lt;int&gt; edge[])\n{\n    //indexes start from 0\n    queue&lt;int&gt; q;\n    for (int i = 0; i &lt; node_num; i++)\n    {\n        if (degree[i] == 0)\n        {\n            q.push(i);\n        }\n    }\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        //push u into an array to get the topological order sequence\n        for (int i = 0; i &lt; (int)edge[u].size(); i++)\n        {\n            int v = edge[u][i];\n            if (degree[v] == 0)\n            {\n                continue;\n            }\n            degree[v]--;\n            if (degree[v] == 0)\n            {\n                q.push(v);\n            }\n        }\n    }\n    //if degree[i] != 0 now, it means there is a circle on the connected component with vertex i.\n}\n\nint main()\n{\n    //input\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    DSU dsu = DSU(n);\n    for (int i = 0; i &lt; m; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &amp;a, &amp;b);\n        a--;\n        b--;\n        add_edge(a, b);\n        dsu.merge(a, b);\n    }\n    bfs(n, edge);\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (degree[i])\n        {\n            circle[dsu.find(i)] = true;\n        }\n    }\n    int ans = n;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (dsu.father[i] == i &amp;&amp; !circle[i])\n        {\n            ans--;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"competitive_programming/leetcode/126/","title":"126. Word Ladder II","text":""},{"location":"competitive_programming/leetcode/126/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/126/#tutorial","title":"Tutorial","text":"<p>Use two way BFS. Careful with the graph building process. Enumerate the variations of each word, and check whether the variation is in the dictionary or not. Do not use O(n^2) to try each pair of words, which would cause TLE.</p>"},{"location":"competitive_programming/leetcode/126/#solution","title":"Solution","text":"<pre><code>class Tree:\n    def __init__(self, word_list, start_word, mark, vis, adj):\n        self.word_list = word_list\n        self.start_word = start_word\n        index = word_list.index(start_word)\n        self.layer = [[(index, -1)]]\n        self.vis = vis\n        self.vis[index] = mark\n        self.mark = mark\n        self.finish = False\n        self.adj = adj\n\n    def expand(self):\n        last_layer = self.layer[-1]\n        new_layer = []\n        ret = False\n        for i, (u, x) in enumerate(last_layer):\n            for v in self.adj[u]:\n                if self.vis[v] != self.mark:\n                    new_layer.append((v, i))\n                    if self.vis[v] != 0:\n                        ret = True\n        if not new_layer:\n            self.finish = True\n        for v, father in new_layer:\n                self.vis[v] = self.mark\n        self.layer.append(new_layer)\n        return ret\n\n    def find(self, index, a):\n        ret = []\n        for i in reversed(range(index)):\n            ret.append(self.word_list[self.layer[i][a][0]]);\n            a = self.layer[i][a][1];\n        return ret\n\n\ndef connect(a, b):\n    if len(a) != len(b):\n        return False\n    cnt = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            cnt += 1\n    return cnt == 1\n\ndef construct(a, b):\n    ret = []\n    for (u, fu) in a.layer[-1]:\n        for (v, fv) in b.layer[-1]:\n            if u == v:\n                a_list = a.find(len(a.layer) - 1, fu)\n                b_list = b.find(len(b.layer) - 1, fv)\n                a_list.reverse()\n                a_list.append(a.word_list[u])\n                ret.append(a_list + b_list)\n    return ret\n\nclass Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        wordList = list(set(wordList))\n        if endWord not in wordList:\n            return []\n        if endWord == beginWord:\n            return [[endWord]]\n        if connect(beginWord, endWord):\n            return [[beginWord, endWord]]\n        if beginWord not in wordList:\n            wordList.append(beginWord)\n\n        dictionary = {}\n        for i, word in enumerate(wordList):\n            dictionary[word] = i\n        self.total_len = len(wordList)\n        self.adj = [[] for i in range(self.total_len)]\n        for word in wordList:\n            temp = list(word)\n            for i in range(len(temp)):\n                for j in 'abcdefghijklmnopqrstuvwxyz':\n                    if temp[i] != j:\n                        x = temp[i]\n                        temp[i] = j\n                        new_word = ''.join(temp)\n                        if new_word in dictionary:\n                            self.adj[dictionary[word]].append(dictionary[new_word])\n                        temp[i] = x\n\n        vis = [0] * len(wordList)\n        tree_top = Tree(wordList, beginWord, 1, vis, self.adj)\n        tree_bottom = Tree(wordList, endWord, 2, vis, self.adj)\n\n        while True:\n            if tree_top.expand():\n                return construct(tree_top, tree_bottom)\n            if tree_bottom.expand():\n                return construct(tree_top, tree_bottom)\n            if tree_top.finish and tree_bottom.finish:\n                return []\n        return []\n</code></pre>"},{"location":"competitive_programming/leetcode/174/","title":"174. Dungeon Game","text":""},{"location":"competitive_programming/leetcode/174/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/174/#tutorial","title":"Tutorial","text":"<p>The knight should at least have 1 health and can only move to right and down. dp[i][j] means how many points are needed in order to rescue the princess from grid[i][j]. dp[i][j] = min(max(1, dp[i + 1][j] - dungeon[i][j]), max(1, dp[i][j + 1] - dungeon[i][j]))</p>"},{"location":"competitive_programming/leetcode/174/#solution","title":"Solution","text":"<pre><code>class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n    \"\"\"\n    :type dungeon: List[List[int]]\n    :rtype: int\n    \"\"\"\n    row_num = len(dungeon)\n    col_num = len(dungeon[0])\n    dp = [[0] * col_num for i in range(row_num)]\n    dp[row_num - 1][col_num - 1] = max(1, -dungeon[row_num - 1][col_num - 1] + 1)\n\n    for i in range(row_num - 1)[::-1]:\n        dp[i][col_num - 1] = max(1, dp[i + 1][col_num - 1] - dungeon[i][col_num - 1])\n\n    for i in range(col_num - 1)[::-1]:\n        dp[row_num - 1][i] = max(1, dp[row_num - 1][i + 1] - dungeon[row_num - 1][i])\n\n    for i in range(row_num - 1)[::-1]:\n        for j in range(col_num - 1)[::-1]:\n            a = max(1, dp[i + 1][j] - dungeon[i][j])\n            b = max(1, dp[i][j + 1] - dungeon[i][j])\n            dp[i][j] = min(a, b)\n\n    return dp[0][0]\n</code></pre>"},{"location":"competitive_programming/leetcode/212/","title":"212. Word Search II","text":""},{"location":"competitive_programming/leetcode/212/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/212/#tutorial","title":"Tutorial","text":"<p>Use trie to store all the words. Then we do a DFS on the board, at each step of which we check whether the current path is a prefix of some words using the trie as a prunning method.</p>"},{"location":"competitive_programming/leetcode/212/#solution","title":"Solution","text":"<pre><code>class TrieNode:\n    def __init__(self):\n        self.isEnd=False\n        self.children={}\n\n    def insert(self,word):\n        cur=self\n        for i in word:\n            if i not in cur.children:\n                cur.children[i]=TrieNode()\n            cur=cur.children[i]\n        cur.isEnd=True\n\n\nclass Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        trie = TrieNode()\n        for word in words:\n            trie.insert(word)\n        n = len(board)\n        m = len(board[0])\n        self.vis = [[False for i in range(m)] for x in range(n)]\n        self.ans = []\n        for i in range(n):\n            for j in range(m):\n                self.dfs(board, i, j, [], trie)\n        return list(set(self.ans))\n\n\n    def dfs(self, board, sx, sy, st, trie):\n        if sx &lt; 0 or sx &gt;= len(board) or sy &lt; 0 or sy &gt;= len(board[0]):\n            return\n        if self.vis[sx][sy]:\n            return\n        if board[sx][sy] not in trie.children:\n            return\n        trie = trie.children[board[sx][sy]]\n\n        st.append(board[sx][sy])\n\n        if trie.isEnd:\n            self.ans.append(''.join(st))\n\n        self.vis[sx][sy] = True\n        self.dfs(board, sx + 1, sy, st, trie) \n        self.dfs(board, sx - 1, sy, st, trie) \n        self.dfs(board, sx, sy + 1, st, trie) \n        self.dfs(board, sx, sy - 1, st, trie) \n        self.vis[sx][sy] = False\n        st.pop()\n</code></pre>"},{"location":"competitive_programming/leetcode/215/","title":"215. Kth Largest Element in an Array","text":""},{"location":"competitive_programming/leetcode/215/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/215/#tutorial","title":"Tutorial","text":"<p>Using an algorithm like quick sort, except that it do not recursively search both half of the array, but only one half. Because the kth element could only be on one of the two halves of the array. It would make the complexity from O(N log N) to O(N + N/2 + N/4 + ...)=O(N). This algorithm is called quick selector.</p>"},{"location":"competitive_programming/leetcode/215/#solution","title":"Solution","text":"<pre><code>class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        return qsort(nums, k-1)\n\ndef qsort(nums, k):\n    x = nums[0]\n    l = 0\n    r = len(nums) - 1\n    while l &lt; r:\n        while l &lt; r and nums[r] &lt;= x:\n            r -= 1\n        nums[l] = nums[r]\n        while l &lt; r and nums[l] &gt;= x:\n            l += 1\n        nums[r] = nums[l]\n    nums[l] = x\n    if l == k:\n        return nums[l]\n    if l &gt; k:\n        return qsort(nums[:l], k)\n    return qsort(nums[l + 1:], k - l - 1)\n</code></pre>"},{"location":"competitive_programming/leetcode/220/","title":"220. Contains Duplicate III","text":""},{"location":"competitive_programming/leetcode/220/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/220/#tutorial","title":"Tutorial","text":"<p>We can use multiset and binary search. But remember to user the member function lower bound instead of the independent function lower bound. The best solution is bucketing with O(n) complexity.</p> <p>We slide a window of length k. We just bucket all the nums by dividing t + 1. So each time if the new element falls in the same bucket with another value means true. If not, check its neighbour bucket's value. If satisfy the limits return true. Remember that at most one element in one neighbour bucket, otherwise it would return true earlier.</p>"},{"location":"competitive_programming/leetcode/220/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if t &lt; 0:\n        return False\n    if k &lt; 0:\n        return False\n    n = len(nums)\n    my_dict = {}\n    for i in range(n):\n        temp = nums[i] / (t + 1)\n        if temp in my_dict:\n            return True\n        if temp - 1 in my_dict and abs(nums[i] - my_dict[temp - 1]) &lt;= t:\n            return True\n        if temp + 1 in my_dict and abs(nums[i] - my_dict[temp + 1]) &lt;= t:\n            return True\n        my_dict[temp] = nums[i]\n        if i &gt;= k:\n            my_dict.pop(nums[i - k] / (t + 1))\n    return False\n</code></pre>"},{"location":"competitive_programming/leetcode/23/","title":"23. Merge K sorted Lists","text":""},{"location":"competitive_programming/leetcode/23/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/23/#tutorial","title":"Tutorial","text":"<p>Use priority queue to store the first element of each list. Then every time in a loop, pop one and push in the next one in the list.</p> <p>In python, priority queue is defaultly to pop the smallest element. If you want to pop the largest, just insert the negative value. If the comparing is complicated, just push in ((keys in order), elem), so that we not only have the entire element, but also the keys to compare with in a tuple.</p>"},{"location":"competitive_programming/leetcode/23/#solution","title":"Solution","text":"<pre><code># Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nfrom Queue import PriorityQueue\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        q = PriorityQueue()\n        for node in lists:\n            if node:\n                q.put((node.val, node))\n        ret = p = ListNode(None)\n        while q.qsize() &gt; 0:\n            (val, node) = q.get()\n            if node.next:\n                q.put((node.next.val, node.next))\n            p.next = node\n            p = p.next\n        return ret.next\n</code></pre>"},{"location":"competitive_programming/leetcode/32/","title":"32. Longest Valid Parentheses","text":""},{"location":"competitive_programming/leetcode/32/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/32/#tutorial","title":"Tutorial","text":"<p>Use a stack for the sequence. If it is a \"(\" push its index in. If it is a \")\", check if the top element is a \"(\". If so pop it. Otherwise, push the \")\" index in. After we walked through the whole sequence. The stack is a list of the indices of the illegal characters. We just go through it to find the longest gap between two neighbours.</p>"},{"location":"competitive_programming/leetcode/32/#solution","title":"Solution","text":"<pre><code>class Solution(object):\n    def longestValidParentheses(self, s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    stk = []\n    for i, ch in enumerate(s):\n        if ch == '(':\n            stk.append(i)\n        elif stk and s[stk[-1]] == '(':\n            stk.pop()\n        else:\n            stk.append(i)\n    stk.append(len(s))\n    stk = [-1] + stk\n    ret = 0\n    for i in range(len(stk) - 1):\n        ret = max(ret, stk[i + 1] - stk[i] - 1)\n    return ret\n</code></pre>"},{"location":"competitive_programming/leetcode/321/","title":"321. Create Maximum Number","text":""},{"location":"competitive_programming/leetcode/321/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/321/#tutorial","title":"Tutorial","text":"<p>The dynamic programming solution is rather straight forward. The greedy solution is like this. We enumerate how many digits we pick from each array. Each time we get the optimal respectively from two arrays, then merge them together. It is not possible that the overall optimal solution is from sub-optimal solutions for the two arrays. So this solution is valid. Then, the problem is how to select a optimal subarray of a certain length from the array and how to merge two arrays. Please see the code for details.</p>"},{"location":"competitive_programming/leetcode/321/#solution","title":"Solution","text":"<pre><code>class Solution {\n    int n, m;\n    public:\n    vector&lt;int&gt; maxNumber(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2, int k) {\n        vector&lt;int&gt; ret = vector&lt;int&gt; (k);\n        fill(ret.begin(), ret.end(), 0);\n        n = nums1.size();\n        m = nums2.size();\n        for (int i = 0; i &lt;= k; i++) {\n            if (n &lt; i || m &lt; k - i) {\n                continue;\n            }\n            vector&lt;int&gt; a = select(nums1, i);\n            vector&lt;int&gt; b = select(nums2, k - i);\n            vector&lt;int&gt; c = merge(a, b);\n            if (lexicographical_compare(ret.begin(), ret.end(), c.begin(), c.end()))\n                ret = c;\n        }\n        return ret;\n    }\n\n    vector&lt;int&gt; merge(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) {\n        auto qa = deque&lt;int&gt; (a.begin(), a.end());\n        auto qb = deque&lt;int&gt; (b.begin(), b.end());\n        auto ret = vector&lt;int&gt; ();\n        while (!(qa.empty() &amp;&amp; qb.empty())) {\n            if (lexicographical_compare(qa.begin(), qa.end(), qb.begin(), qb.end())) {\n                ret.push_back(qb.front());\n                qb.pop_front();\n            } else {\n                ret.push_back(qa.front());\n                qa.pop_front();\n            }\n        }\n        return ret;\n    }\n\n    vector&lt;int&gt; select(vector&lt;int&gt; &amp;nums, int k) {\n        vector&lt;int&gt; ret = vector&lt;int&gt; ();\n        for (int i = 0; i &lt; nums.size(); i++) {\n            while (ret.size() &gt; 0 &amp;&amp; ret[ret.size() - 1] &lt; nums[i] &amp;&amp; k - ret.size() &lt;= nums.size() - 1 - i)\n                ret.pop_back();\n            if (ret.size() &lt; k)\n                ret.push_back(nums[i]);\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"competitive_programming/leetcode/363/","title":"363. Max Sum of Rectangle No Larger Than K","text":""},{"location":"competitive_programming/leetcode/363/#problem","title":"Problem","text":"<p>Given a 2-d array, with integer values (positive and negative). Given an integer k. Find the maximum sub-matrix sum &lt;= k.</p>"},{"location":"competitive_programming/leetcode/363/#solution","title":"Solution","text":"<p>We can use dynamic programming to calculate the sums of the sub-matrices. Then by enumerating all the sub-matrices, we can get the answer. Complexity O(n^2m^2). An improve would be only enumerate the top, bottom and right border of the sub-matrix. Since we want  For the left border we just select the left that maximize sum[right] - sum[left] subject to &lt;= k, where sum is the sum of the sub-matrix with left=0 to right=index and the current top and bottom border. To maximize it, we can use binary search tree. It is equivalent to maximizing sum[left] subject to &gt;= sum[right] - k. We insert the sum values into the tree, every time we query it the lower_bound of sum[right] - k, as we iterate all the right. The complexity is O(n^2mlogm).</p> <p>Note: Python doesn't have a built-in binary search tree. We need to write our own.</p>"},{"location":"competitive_programming/leetcode/363/#code","title":"Code","text":"<pre><code>class Node:\n    def __init__(self, value):\n        self.left = None\n        self.right = None\n        self.val = value\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def lower_bound(self, value):\n        node = self.root\n        ret = None\n        while node is not None:\n            if value &lt; node.val:\n                ret = node.val\n                node = node.left\n            elif value == node.val:\n                ret = node.val\n                return ret\n            else:\n                node = node.right\n        return ret\n\n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n            return\n        last_node = None\n        node = self.root\n        while node is not None:\n            last_node = node\n            if value &lt; node.val:\n                node = node.left\n            else:\n                node = node.right\n        if value &lt; last_node.val:\n            last_node.left = Node(value)\n        else:\n            last_node.right = Node(value)\n\nclass Solution:\n    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -&gt; int:\n        if len(matrix) &gt; len(matrix[0]):\n            new_matrix = []\n            for i in range(len(matrix[0])):\n                new_matrix.append([])\n                for j in range(len(matrix)):\n                    new_matrix[i].append(matrix[j][i])\n            matrix = new_matrix\n        num_rows = len(matrix)\n        num_cols = len(matrix[0])\n        sum_matrix = [[0 for j in range(num_cols + 1)] for i in range(num_rows + 1)]\n        for i in range(num_rows):\n            for j in range(num_cols):\n                sum_matrix[i + 1][j + 1] = matrix[i][j] + sum_matrix[i + 1][j] + sum_matrix[i][j + 1] - sum_matrix[i][j]\n\n        ret = - int(1 &lt;&lt; 30)\n        for height in range(1, num_rows + 1):\n            for top in range(1, num_rows - height + 1 + 1):\n                bottom = top + height - 1\n                bst = BinarySearchTree()\n                bst.insert(0)\n                for right in range(1, num_cols + 1):\n                    current_sum = sum_matrix[bottom][right] - sum_matrix[top - 1][right]\n                    left_sum = bst.lower_bound(current_sum - k)\n                    # print(right, current_sum, left_sum)\n                    if left_sum is not None:\n                        ret = max(ret, current_sum - left_sum)\n                    bst.insert(current_sum)\n        return ret\n</code></pre>"},{"location":"competitive_programming/leetcode/398/","title":"398. Random Pick Index","text":""},{"location":"competitive_programming/leetcode/398/#problem","title":"Problem","text":"<p>Given an array, go through it for once to find a target value and output the index. If there are ties, pick each one with equal probability.</p>"},{"location":"competitive_programming/leetcode/398/#solution","title":"Solution","text":"<p>Pure reservoir sampling problem.</p>"},{"location":"competitive_programming/leetcode/398/#algorithm","title":"Algorithm","text":""},{"location":"competitive_programming/leetcode/398/#reservoir-sampling","title":"Reservoir sampling","text":"<p>Given an array of length unknown, only going through it for once and pick m out of it with equal probability.</p> <p>We keep a set of size m. As we go through the first m elements, we just add them to the set.</p> <p>If we arrived at the ith (i &gt; m) element, since we don't know the length, this one could be the last element in the array. If it is the last, we have to pick it with a probability of m/i, which is the equal probability for each element. Since we don't know, we just treat it as the last.</p> <p>If it is not picked, we just move to the next one. If it is picked, we replace one of the m elements in the set with equal probability.</p> <p>We keep doing this until we get to the end of the array. No matter where we stop, we always have the equal probability to pick each one.</p> <p>Prove with mathematical induction: If the m elements we picked after going through the first (i-1) elements is m/(i-1) each, the probability of keeping one of these m elements in the set instead of being replaced by the new one is: (1-m/i) + (m/i)*(1/m) = m/i. Since the condition is satisfied with i=m, so all the following should be satisfied. Proved.</p> <p>A variation of the problem would be, We can only pick the elements satisfying certain condition, for example, only picking prime numbers in an array of integers with equal probability. We just change the definition of i from the number of elements we have gone through to the number of elements we have gone through and satisfiying the condition.</p>"},{"location":"competitive_programming/leetcode/398/#code","title":"Code","text":"<pre><code>import random\n\n\nclass Solution:\n\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n\n    def pick(self, target: int) -&gt; int:\n        count = 0\n        ret = -1\n        for index, value in enumerate(self.nums):\n            if value == target:\n                count += 1\n                if random.random() &lt; 1.0 / count:\n                    ret = index\n        return ret\n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)\n</code></pre>"},{"location":"competitive_programming/leetcode/4/","title":"4. Median of Two Sorted Arrays","text":""},{"location":"competitive_programming/leetcode/4/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/4/#tutorial","title":"Tutorial","text":"<p>First, I thought binary search the median value t, and every time see if there is correct number of items less than t altogether in both arrays. However, it involves another two binary searches to locate the position of t in both arrays, within the binary search of t, It make the complexity rise to O(log(log(n+m))).</p> <p>The best way is to binary search a divide position in the longer array. Imagine, we divide the two arrays into 4 halves, all the elements in the left two halves are less than the right two halves, this division would help us locate the median. Every time we have a divide position in the longer array, we can directly calculate where to divide in the second array, since the total number of elements in the left halves should equal to that of the right halves. Then, we check whether this division is valid, by comparing the right most elements in the left halves and the left most elements in the right halves. The complexity is O(log(m+n)).</p>"},{"location":"competitive_programming/leetcode/4/#solution","title":"Solution","text":"<pre><code>class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        if len(nums1) &lt; len(nums2):\n            nums1, nums2 = nums2, nums1\n\n        self.n = len(nums1) + len(nums2)\n\n        if not nums2:\n            return (nums1[(self.n + 1) / 2 - 1] + nums1[self.n / 2]) / 2.0\n\n        l = 0\n        r = len(nums1)\n        while l &lt; r:\n            mid = (l + r) / 2\n            if self.ok(mid, nums1, nums2):\n                r = mid\n            else:\n                l = mid + 1\n        l1, r1 = self.get_lr(nums1, l)\n        l2, r2 = self.get_lr(nums2, self.n / 2 - l)\n        if self.n % 2 == 1:\n            return min(r1, r2)\n        return (max(l1, l2) + min(r1, r2)) / 2.0\n\n\n    def ok(self, a, nums1, nums2):\n        b = self.n / 2 - a\n        if b &gt; len(nums2):\n            return False\n        if b &lt; 0:\n            return True\n        l1, r1 = self.get_lr(nums1, a)\n        l2, r2 = self.get_lr(nums2, b)\n        if l2 &gt; r1:\n            return False\n        return True\n\n\n    def get_lr(self, nums, n):\n        l = nums[n - 1] if n != 0 else -float('inf')\n        r = nums[n] if n != len(nums) else float('inf')\n        return l, r\n</code></pre>"},{"location":"competitive_programming/leetcode/440/","title":"440. Kth Smallest in Lexicographical Order","text":""},{"location":"competitive_programming/leetcode/440/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/440/#tutorial","title":"Tutorial","text":"<p>Imagine this problem as a problem of walking on a tree, the root has children 1~9, 1 has children 10~19 and so on. All the nodes are less than n.</p> <p>The pre-order traversal of the tree is the lexicographcal order of all the numbers. So now we stand at node 1 and travel (k-1) times. Then the node we standing on is the answer. Everytime we will move to the siblings on the right handside, if we have enough moves to travel all the nodes in the current subtree. Otherwise we go to the first child and do the same thing. Repeat like this until we use up all the moves.</p> <p>We can easily see it on the tree, everytime we travel to the right, ans should be updated by ans + 1. Everytime we travel to the first child, the ans should be updated to ans * 10.</p> <p>Now let's see how to count how many nodes in the current subtree. Just count the nodes with each depth and add them up. It should not be hard since each layer is a continuous sequence of integers.</p>"},{"location":"competitive_programming/leetcode/440/#solution","title":"Solution","text":"<pre><code>class Solution(object):\n    def findKthNumber(self, n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    ret = 1\n    k -= 1\n    while k &gt; 0:\n        a = ret\n        b = ret + 1\n        temp_sum = 0\n        while a &lt;= n:\n            temp_sum += min(b - 1, n) - (a - 1)\n            b *= 10\n            a *= 10\n        if k &gt;= temp_sum:\n            ret += 1\n            k -= temp_sum\n        else:\n            ret *= 10\n            k -= 1\n    return ret\n</code></pre>"},{"location":"competitive_programming/leetcode/465/","title":"465. Optimal Account Balancing","text":""},{"location":"competitive_programming/leetcode/465/#problem","title":"Problem","text":"<p>Given a list of transactions as a list of triplets: (a, b, c), meaning a give b an amount of c dollars. Now we want to settle all the debt with the minimum number of transactions. For example, (0, 1, 5) (1, 2, 5) can be settled with one transaction (2, 0, 5). We only need return one integer: the minimum number of transactions needed.</p>"},{"location":"competitive_programming/leetcode/465/#solution","title":"Solution","text":"<p>We don't need to consider the transaction graph. Imagine during settling the debt, everyone who need to return money to others just put those money in a pool. The people who should receive money from others just take from that pool. After this, all debt are settled without knowing the original transaction graph.</p> <p>First, we calculate how much money each person owns (can be positive or negative). Then, we just use DFS to settle the debt. One person will return all his debt to another person. The DFS will search every choice of choosing the person. Then we start to search the choices of the next person.</p> <p>One concern is, what if the optimal solution is not for a person returning all his debt to another person, but returning his debt to multiple people? We can always find an equivalent case in our search space. For example, if the optimial solution is for a return money to b and to c. We can find a equivalent in our search space for a to return all the money to b, and b will return the extra amount to c. The 2 solutions both take 2 transactions to fiinsh.</p>"},{"location":"competitive_programming/leetcode/465/#code","title":"Code","text":"<pre><code>import collections\n\n\nclass Solution:\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.num_people = 0\n    self.debt = []\n\n  def cal_debt(self, transactions):\n    temp = collections.defaultdict(lambda : 0)\n    for transaction in transactions:\n      temp[transaction[0]] += transaction[2]\n      temp[transaction[1]] -= transaction[2]\n    for key, value in temp.items():\n      self.debt.append(value)\n    self.num_people = len(self.debt)\n\n  def dfs(self, current_id):\n    while (current_id &lt; self.num_people and \n      self.debt[current_id] == 0):\n      current_id += 1\n    if current_id &gt;= self.num_people:\n      return 0\n    ret = self.num_people * self.num_people\n    for next_id in range(current_id + 1, self.num_people):\n      if self.debt[current_id] * self.debt[next_id] &lt; 0:\n        self.debt[next_id] += self.debt[current_id]\n        ret = min(ret, self.dfs(current_id + 1) + 1)\n        self.debt[next_id] -= self.debt[current_id]\n    return ret\n\n  def minTransfers(self, transactions: List[List[int]]) -&gt; int:          \n    self.cal_debt(transactions)\n    return self.dfs(0)\n</code></pre>"},{"location":"competitive_programming/leetcode/493/","title":"490. Reverse Pair","text":""},{"location":"competitive_programming/leetcode/493/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/493/#tutorial","title":"Tutorial","text":"<p>First, do the discretization. The discretization array should taken into account both nums[i] and nums[i] * 2.</p> <p>Then, insert the elements into binary indexed tree from left. Before inserting nums[i], we should check how many elements in the binary indexed tree is greater than nums[i] * 2, and add it to the final answer.</p> <p>From this problem, we can generalize the discretization method. It can discretize not only the elements of an array, but also some other elements together and keep their relations (greater, less). Note: Multiset will cause TLE since std::distance would take linear time to the size of the multiset.</p>"},{"location":"competitive_programming/leetcode/493/#solution","title":"Solution","text":"<pre><code>class Discrete:\n\n    def __init__(self, f):\n        self.f = list(set(f))\n        self.f.sort()\n\n    def index(self, a):\n        import bisect\n        return bisect.bisect_left(self.f, a)\n\nclass BITree:\n\n    def __init__(self, n):\n        self.f = [0]*(n+3)\n        self.n = n + 2\n\n    def sum(self, pos=None):\n        if not pos:\n            i = self.n\n        else:\n            i = pos\n        s = 0  #initialize result\n        while i &gt; 0:\n            s += self.f[i]\n            i -= i &amp; (-i)\n        return s\n\n    def update(self, pos ,value):\n        i = pos\n        while i &lt;= self.n:\n            self.f[i] += value\n            i += i &amp; (-i)\n\nclass Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums2 = nums + list(map(lambda x: x * 2, nums))\n        d = Discrete(nums2)\n        bit = BITree(len(d.f))\n        ret = 0\n        for x in nums:\n            index = d.index(x) + 1\n            ret += bit.sum() - bit.sum(d.index(x * 2) + 1)\n            bit.update(index, 1)\n        return ret\n\n#print(Solution().reversePairs([-5,-5]))\n#print(Solution().reversePairs([1,3,2,3,1]))\n#print(Solution().reversePairs([]))\n#print(Solution().reversePairs([2,4,3,5,1]))\n</code></pre> <pre><code>#define d(x) \n#define LL long long\n#define MAX_N (int(5e4 + 10) * 2)\nstruct BIT\n{\n    LL binary_indexed_tree[MAX_N];\n\n    void init()\n    {\n        memset(binary_indexed_tree, 0, sizeof(binary_indexed_tree));\n    }\n\n    int low_bit(int x)\n    {\n        return x &amp; (-x);\n    }\n\n    void add(int pos, LL val)\n    {\n        for (int i = pos; i &lt; MAX_N; i += low_bit(i))\n        {\n            binary_indexed_tree[i] += val;\n        }\n    }\n\n    LL sum(int pos)\n    {\n        LL ret = 0;\n        for (int i = pos; i &gt; 0; i -= low_bit(i))\n        {\n            ret += binary_indexed_tree[i];\n        }\n        return ret;\n    }\n};\n\n\nclass Solution {\npublic:\n    int reversePairs(vector&lt;int&gt;&amp; nums) {\n        vector&lt;long long&gt; discrete = vector&lt;long long&gt; ();\n        for (int i = 0; i &lt; (int)nums.size(); i++) {\n            discrete.push_back(nums[i]);\n            discrete.push_back(nums[i] * 2LL);\n        }\n        sort(discrete.begin(), discrete.end());\n        discrete.resize(std::distance(discrete.begin(), unique(discrete.begin(), discrete.end())));\n\n        BIT bit = BIT();\n        bit.init();\n        int ret = 0;\n        for (int i = 0; i &lt; (int)nums.size(); i++) {\n            long long a = lower_bound(discrete.begin(), discrete.end(), nums[i]) - discrete.begin() + 1;\n            long long a2 = lower_bound(discrete.begin(), discrete.end(), nums[i] * 2LL) - discrete.begin() + 1;\n            ret += bit.sum(MAX_N - 1) - bit.sum(a2);\n            bit.add(a, 1);\n            d(cout &lt;&lt; a2 &lt;&lt; endl);\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"competitive_programming/leetcode/530/","title":"530. Minimum Absolute Difference in BST","text":""},{"location":"competitive_programming/leetcode/530/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/530/#tutorial","title":"Tutorial","text":"<p>The in-order of a BST is the increasing order of its nodes. So we just find the in-order of the tree and get the minimum distance of two adjacent nodes.</p>"},{"location":"competitive_programming/leetcode/530/#solution","title":"Solution","text":"<pre><code>from collections import deque\n\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        self.q = deque()\n        self.ans = float(\"inf\")\n        self.dfs(root)\n        return self.ans\n\n    def dfs(self, root):\n        if not root:\n            return\n        self.dfs(root.left)\n        self.q.append(root.val)\n        if len(self.q) &gt; 2:\n            self.q.popleft()\n        self.update()\n        self.dfs(root.right)\n\n    def update(self):\n        if len(self.q) != 2:\n            return\n        self.ans = min(self.ans, abs(self.q[0] - self.q[1]))\n</code></pre>"},{"location":"competitive_programming/leetcode/546/","title":"546. Remove Boxes","text":""},{"location":"competitive_programming/leetcode/546/#problem-link","title":"Problem Link","text":""},{"location":"competitive_programming/leetcode/546/#tutorial","title":"Tutorial","text":"<p>dp[l][r][k] means the maximum value of interval [l, r] with k repeating characters of boxes[r] at the back after r. The equation is dp(l, r, k) = max(dp(l, i, k + 1) + dp(i + 1, r - 1, 0)) for boxes[i] == boxes[r]. It means we remove [i+1, r - 1] first, and remove the repeating characters at the back with boxes[i] together.</p>"},{"location":"competitive_programming/leetcode/546/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\n    int n;\n    vector&lt;int&gt; boxes;\n    public:\n        int removeBoxes(vector&lt;int&gt;&amp; boxes) {\n            int dp[100][100][100];\n            memset(dp, -1, sizeof(dp));\n            n = boxes.size();\n            this-&gt;boxes = boxes;\n            int ans = dfs(0, n - 1, 0, dp);\n            return ans;\n        }\n\n        int sqr(int a) {\n            return a * a;\n        }\n\n        int dfs(int l, int r, int k, int dp[100][100][100]) {\n            if (l &gt; r) {\n                return 0;\n            }\n\n            if (dp[l][r][k] != -1) {\n                return dp[l][r][k];\n            }\n\n            int ret = 0;\n            if (r - 1 &gt;= 0 &amp;&amp; boxes[r - 1] == boxes[r]) {\n                ret = dfs(l, r - 1, k + 1, dp);\n                dp[l][r][k] = ret;\n                return ret;\n            }\n            ret = dfs(l, r - 1, 0, dp) + sqr(k + 1);\n            for (int i = l; i &lt; r; i++) {\n                if (boxes[i] != boxes[r])\n                    continue;\n                ret = max(ret, dfs(l, i, k + 1, dp) + dfs(i + 1, r - 1, 0, dp));\n            }\n            dp[l][r][k] = ret;\n            //printf(\"%d %d %d %d\\n\", l, r, k, ret);\n            return ret;\n        }\n};\n</code></pre>"},{"location":"competitive_programming/leetcode/686/","title":"686. Repeated String Match","text":""},{"location":"competitive_programming/leetcode/686/#problem","title":"Problem","text":"<p>Given two strings, A and B. How many times we need to repeat A, so that B is a substring of A.</p>"},{"location":"competitive_programming/leetcode/686/#solution","title":"Solution","text":"<p>Repeat A until the string is as long as 2*len(B) - 1, which is the maximum length needed to find the answer. Use Rabin-Karp to hash the first len(B) chars in A, and sliding window one char by one char to the right. Compare each of the hash value of the substrings to the hash value of B. If not equal, then the substring is not B. If equal, we check char by char to see if the substring is B or not.</p>"},{"location":"competitive_programming/leetcode/686/#algorithms","title":"Algorithms","text":""},{"location":"competitive_programming/leetcode/686/#rabin-karp","title":"Rabin-Karp","text":""},{"location":"competitive_programming/leetcode/686/#code","title":"Code","text":"<pre><code># Simple solution\nclass Solution:\n    def repeatedStringMatch(self, A: str, B: str) -&gt; int:\n        x = (len(B) - 1) // len(A) + 1\n        if B in A * x:\n            return x\n        if B in A * (x + 1):\n            return x + 1\n        return -1\n</code></pre> <p><pre><code># Karp-Rabin\nMOD = int((10 ** 9) + 7)\nBASE = 26\n\nclass Solution:\n    def validate(self, index, A, B):\n        for i in range(len(B)):\n            if index - i &lt; 0:\n                break\n            if A[(index - i) % len(A)] != B[-1 - i]:\n                return False\n        return True\n\n    def repeatedStringMatch(self, A: str, B: str) -&gt; int:\n        b_value = 0\n        for char in B:\n            b_value = (b_value * BASE) % MOD + ord(char) - ord('a')\n            b_value %= MOD\n        hash_value = 0\n        multiplier = 1\n\n        for i in range(len(B)):\n            multiplier = (multiplier * BASE) % MOD\n\n        index = 0\n\n        while index &lt; max(len(B) * 2, len(A) * 2):\n            hash_value = (ord(A[index % len(A)]) - ord('a') + (hash_value * BASE) % MOD) % MOD\n            if index &gt;= len(B):\n                hash_value -= ((ord(A[(index - len(B)) % len(A)]) - ord('a')) * multiplier) % MOD\n                hash_value = (hash_value + MOD) % MOD\n            if hash_value == b_value and index &gt;= len(B) - 1:\n                if self.validate(index, A, B):\n                    return index // len(A) + 1\n            index += 1\n\n        return -1\n</code></pre> <pre><code># KMP\nclass Solution:\n\n    def repeatedStringMatch(self, A: str, B: str) -&gt; int:\n        link = [-1] * (len(B) + 1)\n\n        for j in range(len(B) - 1):\n            i = j\n            while i != -1 and B[j + 1] != B[link[i] + 1]:\n                i = link[i]\n            link[j + 1] = link[i] + 1\n        b_index = -1\n        for i in range(-1, len(A) + len(B)):\n            if b_index == len(B) - 1:\n                return i // len(A) + 1\n            while A[(i + 1) % len(A)] != B[b_index + 1] and b_index != -1:\n                b_index = link[b_index]\n            if A[(i + 1) % len(A)] == B[b_index + 1]:\n                b_index += 1\n                continue\n        return -1\n</code></pre></p>"},{"location":"competitive_programming/leetcode/843/","title":"843. Guess the Word","text":""},{"location":"competitive_programming/leetcode/843/#problem","title":"Problem","text":"<p>Given 100 words of length 6, one of which is the target. You pick one at a time to query how many matches in letters between the one you pick and the target. Matches is calculated as: </p> <p>\"abbccd\" and </p> <p>\"aabbcc\" has 3 matches at index 0, 2, 4. You need to pick the target within 10 queries.</p>"},{"location":"competitive_programming/leetcode/843/#solution","title":"Solution","text":"<p>A simple solution would be after each query we filter the list of words. For example, the query says the picked one and the target has x matches. We check the matches of the picked one with all the words. Only keep the ones having x matches with the picked word. Next time, we just randomly pick one from the filtered list.</p> <p>This solution won't pass. A better solution would be not randomly pick. We want the size of the filtered list to be small after a query. Given a word, there are only 7 possible outcomes of the query (0~6 matches). Each of the outcome would result in a different size of the filtered list. We use the maximum among the 7 as the indicator of whether we should pick it. We just compute the indicator of all the words in the list before we pick one with the smallest indicator.</p> <p>The reason we use the maximum as the indicator is because we want to garantee the worst case since we only have 10 chances.</p>"},{"location":"competitive_programming/leetcode/843/#code","title":"Code","text":"<pre><code># \"\"\"\n# This is Master's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class Master:\n#     def guess(self, word: str) -&gt; int:\n\nimport copy\n\n\ndef get_matches(word1, word2):\n    ret = 0\n    for i in range(len(word1)):\n        if word1[i] == word2[i]:\n            ret += 1\n    return ret\n\n\ndef get_value(index, possible, f):\n    count = [0] * 7\n    for j in possible:\n        if j == index:\n            continue\n        count[f[index][j]] += 1\n    ret = 0\n    temp = 0\n    max_value = 0\n    for i in range(7):\n        if count[i] == 0:\n            continue\n        ret += count[i]\n        temp += 1\n        max_value = max(max_value, count[i])\n    return max_value\n    return ret * 1.0 / temp\n\n\ndef pick(possible, f):\n    if len(possible) == 1:\n        return possible[0]\n    ret = -1\n    min_value = 1000\n    for index in possible:\n        value = get_value(index, possible, f)\n        if value &lt; min_value:\n            ret = index\n            min_value = value\n    return ret\n\n\nclass Solution:\n    def findSecretWord(self, wordlist: List[str], master: 'Master') -&gt; None:\n        wordlist = wordlist\n        checks = [True] * len(wordlist)\n        possible = [i for i in range(len(wordlist))]\n        f = [[get_matches(wordlist[i], wordlist[j]) \n              for j in range(len(wordlist))] \n             for i in range(len(wordlist))]\n\n        while len(possible) != 0:\n            # print('*')\n            index = pick(possible, f)\n            word = wordlist[index]\n            num_matches = master.guess(word)\n            if num_matches == 6:\n                return\n            possible = [i for i in possible\n                        if (get_matches(word, wordlist[i]) == num_matches and\n                            word != wordlist[i])]\n</code></pre>"},{"location":"competitive_programming/leetcode/975/","title":"975. Odd Even Jump","text":""},{"location":"competitive_programming/leetcode/975/#problem","title":"Problem","text":"<p>The core problem is: given an array of integers, for each number, find the smallest number on the right which is larger than or equal to it. Use the nearest if there is a tie.</p>"},{"location":"competitive_programming/leetcode/975/#solution","title":"Solution","text":"<p>If there is no smallest requirement, it is a monotonic stack problem. (Find the nearest one larger than the current one.) We can treat each element as a tuple of (index, value). We sort these tuples by value first, then index if tie. We got a new array. Now the problem becomes find the nearest element on the right whose index is larger than the current on the new array. It is solvable with monotonic stack. As long as it is the nearest, we have ensured two things: 1. It is the one with the smallest value that is &gt;= to the current value since we sorted by values. 2. When there is a tie, it is the nearest in the original array since we sorted by index when value ties.</p>"},{"location":"competitive_programming/leetcode/975/#algorithms","title":"Algorithms","text":""},{"location":"competitive_programming/leetcode/975/#monotonic-stack","title":"Monotonic stack","text":"<p>Find the nearest one on the right, which is larger than the current one. The farther ones in the stack should be larger, the nearer ones should be smaller. So every element in the stack should either be large or be near. At least have one merit.</p>"},{"location":"competitive_programming/leetcode/975/#code","title":"Code","text":"<pre><code>import collections\n\n\nclass Solution:\n    def oddEvenJumps(self, A: List[int]) -&gt; int:\n        dq = collections.deque()\n        acs = sorted([(value, i) for i, value in enumerate(A)])\n        dcs = sorted([(-value, i) for i, value in enumerate(A)])\n        larger = [-1] * len(A)\n        smaller = [-1] * len(A)\n\n        for value, i in acs[::-1]:\n            while len(dq) &gt; 0 and i &gt; dq[-1]:\n                dq.pop()\n            if len(dq) &gt; 0:\n                larger[i] = dq[-1]\n            dq.append(i)\n\n        for value, i in dcs[::-1]:\n            while len(dq) &gt; 0 and i &gt; dq[-1]:\n                dq.pop()\n            if len(dq) &gt; 0:\n                smaller[i] = dq[-1]\n            dq.append(i)\n\n        f = [[False] * len(A), [False] * len(A)]\n        f[0][len(A) - 1] = f[1][len(A) - 1] = True\n        # 0 is even, 1 is odd.\n        for i in range(0, len(A) - 1)[::-1]:\n            if smaller[i] != -1:\n                f[0][i] = f[1][smaller[i]]\n            if larger[i] != -1:\n                f[1][i] = f[0][larger[i]]\n        return f[1].count(True)\n</code></pre>"},{"location":"health/diet/","title":"Diet","text":""},{"location":"health/diet/#energy","title":"Energy","text":"<p>The three main source of nutrients of food:</p> <ul> <li>Carbohydrates: bread, sugar, rice, pasta, fruit, fruit juice, cereal.</li> </ul> <ul> <li>Fat: oil, butter, cheese, egg yolk.</li> </ul> <ul> <li>Protein: meat, fish, egg white, poultry, cheese.</li> </ul> <p>How enery is generated in the body?</p> <p>The majority of the energy is from carbohydrates and fat. Protein only provide 15 percent of the total energy. As they are digested into the blood, some conversion is happening:</p> <ul> <li>Carbohydrates -&gt; glucose</li> </ul> <ul> <li>Fat -&gt; fat acids</li> </ul> <ul> <li>Protein -&gt; amino acids</li> </ul> <p>As they go through the liver, they are broken down to get the hydrogen atom. Finally, it became the ATP, which is the form of energy used by the body. Fat has the most hydrogen atom intensity, thus, provide the most energy.</p> <p>The energy generation take place in two places:</p> <ul> <li>aerobic fiber: a type of cell in all muscules. Mainly for long-term energy. Mainly consumes fat.</li> </ul> <ul> <li>anaerobic fiber:  also in all muscules. Mainly for short-term energy. Mainly consumes sugar.</li> </ul>"},{"location":"health/diet/#fatigue","title":"Fatigue","text":"<p>When the body don't have enough long-term energy from fat, and rely on suger, it causes the fatigue. To avoid fatigue, we need to eat the right food to provide the source of energy, and exercise to maintain the aerobic system of our bodies.</p>"},{"location":"health/exercise/","title":"Exercise","text":""},{"location":"health/sleep/","title":"Sleep","text":""},{"location":"math/trigonometry/","title":"Trigonometry","text":"sin^2(x)+cos^2(x)=1"},{"location":"math/calculus/derivatives/","title":"Derivatives","text":""},{"location":"math/calculus/derivatives/#overview","title":"Overview","text":"<p>Calculus is mainly about calculating the area under a curve. We set a starting point on the X-axis and set x as the moving endpoint on the X-axis.</p> <p>If the curve is f(x), and the area under the curve is A(x). We have dA = f(x)dx, where dx is a very tiny length on the X-axis, f(x)dx is the area of the very thin rectangle at x. dA means the very small change of function A from x to x+dx. From dA=f(x)dx, we have dA/dx = f(x). We call f(x) the derivative of function A.</p> <p>To calculate the derivative of A: \\frac {dA}{dx} as \\frac{A(x+dx)-A(x)}{dx}. By some transformation we can get the result. For example, A(x) = x^2, \\frac{dA}{dx} = \\frac{(x+dx)^2-x^2}{dx} = \\frac{2xdx + d^2x}{dx}= 2x + dx. Since dx is very small, so \\frac{dA}{dx} = 2x.</p> <p>Don't think dx as infinitely small, but think of it as a comparatively small value.</p>"},{"location":"math/calculus/derivatives/#derivative-rules","title":"Derivative Rules","text":"<p>Three rules of derivative.</p> <ul> <li>Constant rule: f'(x) = 0</li> </ul> <ul> <li>Sum rule: (\\alpha f(x)+ \\beta g(x))' = \\alpha f'(x) + \\beta g'(x)</li> </ul> <ul> <li>Product rule: (f(x)g(x))' = f'(x)g(x) + f(x)g'(x)</li> </ul> <ul> <li>Quotient rule: \\left({\\frac {f(x)}{g(x)}}\\right)'={\\frac {f'(x)g(x)-f(x)g'(x)}{g^{2}(x)}}</li> </ul> <ul> <li>Chain rule: (f(g(x)))' = f'(g(x))g'(x)</li> </ul>"},{"location":"math/calculus/derivatives/#mathimatical-constant","title":"Mathimatical Constant","text":"<p>A simple definition of the mathimatical constant e is (e^x)' = e^x.</p>"},{"location":"math/calculus/derivatives/#implicit-differentiation","title":"Implicit Differentiation","text":"<p>For example, f(x, y)=g(x, y). From this equation, we cannot directly see a form of y=.... We cannot directly calculate the derivative. What we know is this equation defines a curve (or some dots or something) in the plane.</p> <p>We can conclude f'(x, y)=g'(x, y). Two questions needs to be answered.</p> <ul> <li>Is f'(x, y) the derivative of x or y? It doesn't matter, since dy can be seen as a function of dx, and vice versa.</li> </ul> <ul> <li>Why they still equal when calculate derivative? The curve defined by f(x, y)=g(x, y) constrain x and y to have a certain relationship. It might be the intervals, where f and g overlap. We don't need to consider single points overlaps since there is no derivative if they are scattered single points. Therefore, the equation is a definition of some curve in some intervals. As long as point (x, y) is on the curve, we have f(x, y)=g(x, y). Therefore, when we move a little bit f changes by df, which is f + df, on the right of the equation is g + dg. Since f=g and f +df = g + dg, df =dg.</li> </ul>"},{"location":"math/calculus/gradient/","title":"Gradient","text":"<p>Gradient is about calculating the partial derivative of a function with several input variables. The gradient of a function f\\colon \\mathbb {R} ^{n}\\to \\mathbb {R} is usually written as \\nabla f. Gradient is a function \\nabla f\\colon \\mathbb {R} ^{n}\\to \\mathbb {R} ^{n}. Therefore, it is actually a vector field. Its value at point p=(x_{1},\\ldots ,x_{n}) is</p>  \\nabla f(p)={\\begin{bmatrix}{\\frac {\\partial f}{\\partial x_{1}}}(p)\\\\\\vdots \\\\{\\frac {\\partial f}{\\partial x_{n}}}(p)\\end{bmatrix}}."},{"location":"math/calculus/hessian_matrix/","title":"Hessian Matrix","text":"<p>Given a function f\\colon \\mathbb {R} ^{n}\\to \\mathbb {R}. Its Hessian matrix is written as \\mathbf{H} f. The elements in the matrix are the second order partial derivatives of the function. So the matrix looks as follows.</p>  \\mathbf {H} f={\\begin{bmatrix}{\\dfrac {\\partial ^{2}f}{\\partial x_{1}^{2}}}&amp;{\\dfrac {\\partial ^{2}f}{\\partial x_{1}\\,\\partial x_{2}}}&amp;\\cdots &amp;{\\dfrac {\\partial ^{2}f}{\\partial x_{1}\\,\\partial x_{n}}}\\\\[2.2ex]{\\dfrac {\\partial ^{2}f}{\\partial x_{2}\\,\\partial x_{1}}}&amp;{\\dfrac {\\partial ^{2}f}{\\partial x_{2}^{2}}}&amp;\\cdots &amp;{\\dfrac {\\partial ^{2}f}{\\partial x_{2}\\,\\partial x_{n}}}\\\\[2.2ex]\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\\\[2.2ex]{\\dfrac {\\partial ^{2}f}{\\partial x_{n}\\,\\partial x_{1}}}&amp;{\\dfrac {\\partial ^{2}f}{\\partial x_{n}\\,\\partial x_{2}}}&amp;\\cdots &amp;{\\dfrac {\\partial ^{2}f}{\\partial x_{n}^{2}}}\\end{bmatrix}}  <p>The elements in the matrix is as follows.</p>  (\\mathbf {H} f)_ {i,j}={\\frac {\\partial ^{2}f}{\\partial x_{i}\\,\\partial x_{j}}}"},{"location":"math/calculus/integral/","title":"Integral","text":"<p>It can be seen as the area under the curve. Calculating the integral of a function can be considered as calculating the \"antiderivative\". Given the derivative of a function we have infinite number of \"antiderivative\" functions since moving a function curve vertically does not affect its derivative function. For convenience, we can always think an integral function as the one which has its f(0)=0 by moving it vertically.</p>"},{"location":"math/calculus/integral/#rules","title":"Rules","text":"<p>Integration by substitution: \\int _{a}^{b}f(\\varphi (x))\\varphi '(x)\\,dx=\\int _{\\varphi (a)}^{\\varphi (b)}f(u)\\,du</p> <p>Power rule: \\int x^n = \\frac{x^{n+1}}{n+1} + C</p>"},{"location":"math/calculus/lhopitals_rule/","title":"L'Hopital's Rule","text":"<p>When calculating the limits of some \\frac{0}{0} form, for example,</p>  \\lim_{x\\to a} \\frac{f(x)}{g(x)}  <p>with f(a)=g(a)=0, we can use this rule. The answer should be \\frac{f'(x)}{g'(x)}. We can use \\frac{df(x)}{dg(x)} at the point a to represent the value,</p> <p>$$ \\frac{df(x)}{dg(x)} = \\frac{\\frac{df(x)}{dx}}{\\frac{dg(x)}{dx}} =\u00a0\\frac{f'(x)}{g'(x)} $$.</p>"},{"location":"math/calculus/limits/","title":"Limits","text":"<p>We can give a more intuitive definition than the formal definition, which is called the \\delta and \\epsilon definition. Given an \\epsilon, no matter how small it is, we can always find a \\delta that |f(x_1+\\delta)-f(x_1-\\delta)| &lt; 2\\epsilon. When this is true, we say the limits when x approach x_1 exist. (x_1 is some constant). You can write it as follows. $$ \\lim_{x\\to x_1}f(x)=L $$</p> <p>Note that this limit exists on both sides of the point. There are other limits, which may only exist on the left or on the right. They can be noted as follows:</p>  \\lim_{x\\to x_1^{-}}f(x) \\\\ \\lim_{x\\to x_1^{+}}f(x)"},{"location":"math/calculus/matrix_differentiation/","title":"Matrix Differentiation","text":""},{"location":"math/calculus/matrix_differentiation/#overview","title":"Overview","text":"<p>\\mathbf{y} = \\mathbf{Ax} is a vector. However, its derivative with respect to \\mathbf{x} is a matrix \\mathbf{A}. A vector is expanded to a matrix. The new dimension appeared during the differentiation is the dimension of \\mathbf{x}. If the length of \\mathbf{x} is n, the length of \\mathbf{y} should also be n. The derivative looks like \\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}}. If we put the derivatives into the original vector shape, it looks like this.</p>  {\\frac {\\partial \\mathbf {y} }{\\partial \\mathbf x}}={\\begin{bmatrix}{\\frac {\\partial y_{1}}{\\partial \\mathbf x}}\\\\{\\frac {\\partial y_{2}}{\\partial \\mathbf x}}\\\\\\vdots \\\\{\\frac {\\partial y_{m}}{\\partial \\mathbf x}}\\\\\\end{bmatrix}}  <p>However, each of the \\mathbf x here is a vector, so the actual derivative is expanded with a dimension of the length of \\mathbf x.</p>  {\\frac {\\partial \\mathbf {y} }{\\partial \\mathbf {x} }}={\\begin{bmatrix}{\\frac {\\partial y_{1}}{\\partial x_{1}}}&amp;{\\frac {\\partial y_{1}}{\\partial x_{2}}}&amp;\\cdots &amp;{\\frac {\\partial y_{1}}{\\partial x_{n}}}\\\\{\\frac {\\partial y_{2}}{\\partial x_{1}}}&amp;{\\frac {\\partial y_{2}}{\\partial x_{2}}}&amp;\\cdots &amp;{\\frac {\\partial y_{2}}{\\partial x_{n}}}\\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\\\{\\frac {\\partial y_{m}}{\\partial x_{1}}}&amp;{\\frac {\\partial y_{m}}{\\partial x_{2}}}&amp;\\cdots &amp;{\\frac {\\partial y_{m}}{\\partial x_{n}}}\\\\\\end{bmatrix}}  <p>When we expand the dimension, we need to align that dimension well across different terms of the function. For the following example, \\mathbf x and \\mathbf a are vectors. So the function is a scalar before differentiation. However, the \\mathbf x in one of the terms is transposed but not in the other one. When we expand the scalar to a vector during differentiation, we should either expand according to the transposed \\mathbf x or the not transposed \\mathbf x, but not both. In this way, the two results can be added up together to 2\\mathbf a. Otherwise, they will be a row and a column vector.</p>  \\frac{\\partial ({\\mathbf x^\\top \\mathbf a + \\mathbf a^\\top \\mathbf x})}{\\partial \\mathbf x} = 2\\mathbf a"},{"location":"math/calculus/matrix_differentiation/#rules","title":"Rules","text":"<p>All the rules are expanded according to \\mathbf x as the last dimension not transposed.</p>  \\frac{\\partial ({\\mathbf a^\\top \\mathbf x})}{\\partial \\mathbf x} = \\mathbf a   \\frac{\\partial ({\\mathbf x^\\top \\mathbf a})}{\\partial \\mathbf x} = \\mathbf a  <p>For the quadratic form</p>  {\\frac  {\\partial {\\mathbf  {x}}^{\\top }{\\mathbf  {A}}{\\mathbf  {x}}}{\\partial {\\mathbf  {x}}}}=2\\mathbf{A}\\mathbf{x}"},{"location":"math/calculus/taylor_theorem/","title":"Taylor Theorem","text":"<p>The derivative of a derivative is a higher order derivative.</p> <p>The Tyler theorem is about using polynomials to simulate a function around a certain x point. Non-polynomial functions are hard to deal with. Therefore, we would like to use their polynomial approximation instead.</p> <p>We just let the higher order of derivative equal to each other when x=a between the original function and the polynomial. Then they will be similar to each other near that x=a since the higher order derivative is deciding the curve shapes of the function.</p> <p>The formal definition of the Taylor theorem is as follows. Let k \\geq 1 be an integer and let the function f : \\textbf{R} \\rightarrow \\textbf{R} be k times differentiable at the point a \\in \\textbf{R}. Then there exists a function h_k : \\textbf{R} \\rightarrow \\textbf{R} such that</p>  f(x)=f(a)+f'(a)(x-a)+{\\frac {f''(a)}{2!}}(x-a)^{2}+\\cdots +{\\frac {f^{(k)}(a)}{k!}}(x-a)^{k}+h_{k}(x)(x-a)^{k},  <p>and</p> <p>$$ \\lim_{x\\to a}h_{k}(x)=0 $$.</p> <p>If we ignore the last term with h_k and let x=a, and get any order (let's say nth order) of derivative of the right side of the equation, we will get f^n(a). All the rest terms became 0. The former terms will become constants and becomes zero during the calculation of higher order derivatives. The latter terms will become zero since they contain (x-a). Therefore, you calculate any order of derivative of the equation on both sides, they results in the same value at the point of x=a.</p> <p>The remainder is just another term to describe the error of the approximation.</p>"},{"location":"math/calculus/vector_field/","title":"Vector Field","text":"<p>It is a function f mapping one Euclidean space to another Euclidean space. $$ f\\colon \\mathbf {R} ^{n}\\to \\mathbf {R} ^{m} $$</p> <p>It is called a vector field because we can imagine it like that each point in the \\mathbf {R} ^{n} is assigned with an vector of \\mathbf {R} ^{m}. It is a space of vectors, which is called a vector field.</p>"},{"location":"math/information_theory/conditional_entropy/","title":"Conditional Entropy","text":""},{"location":"math/information_theory/cross_entropy/","title":"Cross Entropy","text":""},{"location":"math/information_theory/cross_entropy/#an-information-theory-perspective","title":"An Information Theory Perspective","text":"<p>It is very similar to entropy, if we think entropy as the lowest expectation of the encoding length, Cross entropy deals with two different sets of probability distributions. The optimal encoding scheme for the two distributions should be different to reach the lowest expectation of the encoding length. If we use the encoding scheme for one distribution but the random variable follows the other probability distribution, cross entropy measures the expectation of the encoding length in this case.</p> <p>If one probability distribution is p and the encoding is optimized for distribution q,  the cross entropy can be written as the following.</p>  H(p,q)=-\\operatorname {E}_ {p}[\\log q]"},{"location":"math/information_theory/cross_entropy/#loss-function","title":"Loss Function","text":"<p>Cross entropy is usually used as a loss function for classification tasks. Minimizing the cross entropy is actually maximizing the likelihood. We can consider the target y of each training sample is a drawn from a different Bernoulli distribution. The likelihood for a sample to occur can be expressed as</p>  f(y;p)=p^{y}(1-p)^{1-y}\\quad {\\text{for }}y\\in \\{0,1\\},  <p>where p is the probability for y=1. The overall likelihood for all samples is as follows.</p>  \\prod_{i=1}^{m} f(y^{(i)};p^{(i)})  <p>Therefore, the loss function is:</p>  \\max_\\theta \\prod_{i=1}^{m} f(y^{(i)};p^{(i)})\\\\ \\max_\\theta \\prod_{i=1}^{m} \\bigg [{p^{(i)}}^{y^{(i)}}(1-{p^{(i)}})^{1-y^{(i)}}\\bigg ]  <p>It is the same as maximize its averaged log form, which is also called the log-likelihood.</p>  \\max_\\theta \\quad\\frac{1}{m}\\log(\\prod_{i=1}^{m} \\bigg [{p^{(i)}}^{y^{(i)}}(1-{p^{(i)}})^{1-y^{(i)}}\\bigg ])\\\\ \\max_\\theta \\frac{1}{m}\\sum_{i=1}^{m}\\bigg [y^{(i)}\\log p^{(i)} + (1-y^{(i)})\\log(1-p^{(i)})\\bigg ]  <p>It is the same as minimizing the negative of the above function.</p>  \\min_\\theta -\\frac{1}{m}\\sum_{i=1}^{m}\\bigg [y^{(i)}\\log p^{(i)} + (1-y^{(i)})\\log(1-p^{(i)})\\bigg ]  <p>Now, we have the exact same form for the cross entropy for classification loss.</p>"},{"location":"math/information_theory/entropy/","title":"Entropy","text":""},{"location":"math/information_theory/entropy/#overview","title":"Overview","text":"<p>Entropy is a measure of uncertainty, or the amount of information to reduce the uncertainty. The formal definition is as follows.</p> <p>Given a discrete random variable X, with possible outcomes x_{1},...,x_{n}, which occur with probability \\mathrm {P} (x_{1}),...,\\mathrm {P} (x_{n}), the entropy of X is formally defined as: $$ \\mathrm {H} (X)=-\\sum_{i=1}^{n}{\\mathrm {P} (x_i)\\log \\mathrm {P} (x_i)} $$</p> <p>You can think entropy as something related to the encoding of all the outcomes. We use 0 and 1 to encode them. The minimum average length of the all the encodings is the entropy.</p> <p>The more outcomes a random variable has, the larger the entropy is. The more unbalance the probability distribution is, the smaller the entropy is.</p>"},{"location":"math/information_theory/entropy/#the-logarithm","title":"The Logarithm","text":"<p>You can think the -\\log \\mathrm {P} (x_i) as a measurement for the encoding length of that specific result X=x_i. For example, if every outcome has a same probability of \\frac{1}{8}, the encoding length with binary bits should be -\\log_2\\frac{1}{8} = 3.</p>"},{"location":"math/information_theory/entropy/#an-expectation-perspective","title":"An Expectation Perspective","text":"<p>Entropy is an expectation of the encoding length of different outcomes. </p>  \\mathrm {H} (X)=\\operatorname {E} [-\\log(\\mathrm {P} (X))]"},{"location":"math/information_theory/joint_entropy/","title":"Joint Entropy","text":""},{"location":"math/information_theory/kl_divergence/","title":"KL Divergence","text":""},{"location":"math/information_theory/mutual_information/","title":"Mutual Information","text":""},{"location":"math/information_theory/noisy_channel_coding_theorem/","title":"Noisy-Channel Coding Theorem","text":""},{"location":"math/information_theory/shannon_hartley_theorem/","title":"Shannon\u2013Hartley Theorem","text":""},{"location":"math/information_theory/source_coding_theorem/","title":"Shannon's Source Coding Theorem","text":""},{"location":"math/linear_algebra/abstract_vectors/","title":"Abstract Vectors","text":"<p>We learned that multiplying a matrix can be seen as a linear transformation. Many functions can be seen as linear transformations as long as they follow the following two rules.</p> <p>a * f(v) = f(a * v)</p> <p>f(a) + f(b) = f(a + b)</p>"},{"location":"math/linear_algebra/change_of_basis/","title":"Change of Basis","text":"<p>A matrix can be seen as a linear transformation of a space. \\mathbf{Ax} means transform the vector \\mathbf{x}, which is in the original space, into the new space, but still using the original basis for coordination. The original basis means the perpendicular unit vectors. In this case, \\mathbf{x} should be a vector represented in the original basis coordination system.</p> <p>Let's consider another problem, \\mathbf{x} is (3, 2). However, it is not in the original coordinate system but a new coordinate system, which uses \\mathbf{A}'s column vectors as basis. 3 and 2 are the scalars for the column vectors in \\mathbf{A}. How can we translate the vector \\mathbf{x} back to the original coordination system? I mean what is the coordinate of the \\mathbf{x} represented by the original coordination system. It is the same as the above example, it should be \\mathbf{Ax}.</p> <p>So a matrix can have different meaning's in different situations. It can either mean a transformation of the space, or a translation from one coordination system to another. It depends on the meaning of the vector multiplied on the right. If x is using the new space basis, then means translation. If in the old one, it means transformation.</p> <p>Another problem is how to translate a vector \\mathbf{x} represented in the original system into the new coordination system. Just use \\mathbf{A}^{-1}\\mathbf{x}, where \\mathbf{A} consists of the basis vectors of the new coordination system as columns. The reason is as follows. Suppose \\mathbf{x}$ is using the new coordinate system specified by \\mathbf{A}. \\mathbf{A}^{-1}\\mathbf{Ax} is still \\mathbf{x}. \\mathbf{v} = \\mathbf{Ax} is the translated \\mathbf{x} in the original coordinate system. So \\mathbf{v} is \\mathbf{x} described by the original coordination system. \\mathbf{A}^{-1}\\mathbf{Ax}=\\mathbf{x} \\Rightarrow \\mathbf{A}^{-1}\\mathbf{v}=\\mathbf{x}, so \\mathbf{A}^{-1} can translate \\mathbf{v} to \\mathbf{x}. So \\mathbf{A}^{-1} is the opposite translation of \\mathbf{A}.</p> <p>If we want to do an operation (rotate a vector for 90 degree) on a vector in the new coordination system, what we do is translate it to the old system, do the operation, translate it back to the new. \\mathbf{A}^{-1}\\mathbf{BAx}, \\mathbf{B} is the operation matrix, \\mathbf{A} is the translation matrix.</p>"},{"location":"math/linear_algebra/column_space/","title":"Column Space","text":"<p>A matrix is a description of a space. A column space is also called a linear transformed space. Also can be seen as the span of all the column vectors of the matrix. Span means the weighted addition of the vectors.</p>"},{"location":"math/linear_algebra/cross_product/","title":"Cross Product","text":"<p>It is an operation on two 3-d vectors. The result of the operation is a vector perpendicular to the plane that contains the two 3-d vectors. The length of the vector is the area of the parallelogram between the two vectors. To choose from which direction the perpendicular vector goes, we use the right-hand rule.</p>"},{"location":"math/linear_algebra/determinant/","title":"Determinant","text":"<p>The determinant can only be calculated from matrices with equal number of rows and columns. The determinant is a single value meaning the scale change of the space.</p> <p>Image a 2-dimensional euclidean space \\mathbb{R}^2 space, the unit vector on \\mathbf{x} and \\mathbf{y} constructs a small square. After a linear transformation into a new 2-d space, how much does the space of the square changed? If it grows to 2 times the original space, the determinant of the transformation matrix would be 2. If the determinant is negative, it means the space is flipped.</p>"},{"location":"math/linear_algebra/dot_product/","title":"Dot Product","text":"<p>A 1-d vector can also be seen as a matrix linearly transforms the space into a 1-d space. Here is the relation between the vector and the transformation. The transformation is projecting all the vectors in the space to the line that contains the 1-d vector and scale by the length of the 1-d vector. The computation of the linear transformation is the same as calculating the dot product.</p>"},{"location":"math/linear_algebra/eigen_vector/","title":"Eigenvector and Eigenvalues","text":"<p>Intuitively, we can understand the eigenvectors of a matrix as follows. See the matrix as a linear transformation of the space. There are some some vectors remained in there original direction before and after the transformation. They are only scaled during the transformation. These vectors before the transformation are the eigenvectors. The scalar to scale them during the transformation are the eigenvalues.</p> <p>We can build an equation by the unchanged vectors. \\mathbf{v} is the unchanged vector after the linear transformation \\mathbf{A}, but only scaled by \\lambda.</p>  \\mathbf{Av} = \\lambda\\mathbf{v}\\\\ \\mathbf{Av} - \\lambda\\mathbf{v} = 0\\\\ (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0\\\\ det(\\mathbf{A} - \\lambda \\mathbf{I}) = 0  <p>(\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0 means \\mathbf{v} is linearly transformed to 0. The only possible situation for this is the space is squeezed to lower dimension by the linear transformation, during which \\mathbf{v} is squeezed to 0. (The linear transformation is defined by matrix\u00a0(\\mathbf{A} - \\lambda \\mathbf{I}). This means the determinant of the transformation matrix is 0. So, we can solve it to get \\lambda. Put \\lambda value into the (\\mathbf{A} - \\lambda \\mathbf{I}) \\mathbf{v} = 0, we get \\mathbf{v}.</p> <p>Notably, diagonal matrix's columns are eigenvectors and the only values are the eigenvalues.</p> <p>Consider the following problem, we want to compute a matrix \\mathbf{B} which is a transformation, which is the same as apply another transformation defined by matrix \\mathbf{A} a hundred times. So \\mathbf{B}=\\mathbf{A}^{100}. To compute this efficiently, we want to somehow converted to a multiplication problem of a diagonal matrix instead of the original \\mathbf{A}. If we represent the transformation defined by \\mathbf{A} using the eigenvectors of \\mathbf{A} as the basis, it would be much easier since in this transformation, the basis has been scaled only, instead of combined together. So the transformation matrix should be a diagonal matrix if represented by the coordination system, which use the eigenvectors as basis, namely eigenbasis. So to calculate the same transformation as \\mathbf{A} in the new coordination system, we calculate \\mathbf{D}=\\mathbf{C}^{-1}\\mathbf{AC}, where \\mathbf{C} is the translate matrix, that \\mathbf{Cx} translate \\mathbf{x}, which is in the new eigenvector coordination system back to the original coordination system. The column of \\mathbf{C} are the eigenvectors of \\mathbf{A}. So \\mathbf{D} is the transformation \\mathbf{A} defined in the new coordination system by the eigenvectors. \\mathbf{D} is a diagonal matrix since it is the \\mathbf{A} transformation in the eigenvector space which should only be the scale of the axis. We calculate \\mathbf{E}=\\mathbf{D}^{100}. Finally, \\mathbf{B}=\\mathbf{CEC}^{-1}. Use \\mathbf{C} to translate the coordinate system back to the original one.</p>"},{"location":"math/linear_algebra/inverse_matrix/","title":"Inverse Matrix","text":"<p>The inverse of a matrix can be seen as the opposite linear transformation. For example, a vector is changed by a linear transformation. The inverse of the transform matrix can transform the space, so that the changed v would go back to its original position. Actually, it is not only the vector but all the vectors in the space back to the original places. Notably, if a space is squeezed into lower dimensions (no matter real lower dimension, or a lower dimensional space in higher dimension representations), there is no inverse matrix for it.</p>"},{"location":"math/linear_algebra/linear_transformation/","title":"Linear Transformation","text":"<p>Vectors should be stored in columns.</p> <p>A m\\times n (m rows and n columns) matrix \\mathbf{A} can be seen as a linear transformation of a n dimensional space into m dimensional space. It is a mapping from n-dimensional space to m-dimensional space.</p> <p>The n column vectors in \\mathbf{A} are the coordinates of the vectors in the new m-dimensional space. During the transformation of the space, the the basis of the n dimensional space are mapped to these vectors in the new space.</p> <p>So a column vector \\mathbf{x} which original was a point in the n-dimensional space, would get its new coordinate in the m-dimensional space as \\mathbf{Ax}. In this multiplication, sum of element-wise multiplication are calculated between \\mathbf{x} and each row of \\mathbf{A}.</p> <p>Each of the n columns use the m unit vectors (basis in the new space) to represent its coordinate. The ith row of \\mathbf{A}, which has n elements, represents how long these n basis vectors are on the ith dimension of the m dimensions. So this multiplication between \\mathbf{x} and the ith row would calculate the length of \\mathbf{x} in the ith dimension.</p> <p>Matrix multiplication can be understand as a sequence of linear transformations of spaces. For example, \\mathbf{ABC} can be seen as: first transform by \\mathbf{C}, then by \\mathbf{B}, finally by \\mathbf{A}. They read from right to left like f(g(x)), which first calculate g.</p>"},{"location":"math/linear_algebra/null_space/","title":"Null Space","text":"<p>If a matrix squeezes a higher dimension into a lower dimension, the part of the space that has been squeezed to the root is the null space. Formally, the set of a satisfy \\mathbf{Xa}=0. The span of this set is the null space of \\mathbf{X}.</p>"},{"location":"math/linear_algebra/quadratic_form/","title":"Quadratic Form","text":"<p>It is a easier way to express the quadratic form of multiple variables.</p>  q_A(x_1,\\ldots,x_n) = \\sum_{i=1}^{n}\\sum_{j=1}^{n}a_{ij}{x_i}{x_j} = \\mathbf x^\\mathrm{T} A \\mathbf x.  <p>A is a symetric matrix. x is a vector of variables.</p>"},{"location":"math/linear_algebra/rank/","title":"Rank","text":"<p>The lowest number of dimensions possible to contain the linear transformed space. The linear transformation is defined by the matrix.</p>"},{"location":"math/optimization/bandit/","title":"Multi-Armed Bandit","text":""},{"location":"math/optimization/bandit/#the-problem-definition","title":"The Problem Definition","text":"<p>For a given number of times, you are allowed to draw samples from k unknown distributions. Each time you can choose one of the k distributions to draw a new sample. The target is to get the maximum sum of all the samples you can draw.</p>"},{"location":"math/optimization/bandit/#regret","title":"Regret","text":"<p>The regret is the measure of how good your strategy is. It is the difference between the sum your strategy gets and the optimal strategy gets. Therefore, we would like to have a strategy that minimizes the regret. The regret is usually noted as \\rho.</p>"},{"location":"math/optimization/bandit/#solution","title":"Solution","text":"<p>As you draw more samples, we would like to estimate the parameters of the distributions so that we can figure out which one is the best to draw.</p>"},{"location":"math/statistics/bayes_theorem/","title":"Bayes Theorem","text":""},{"location":"math/statistics/bayes_theorem/#equation","title":"Equation","text":"P(A\\mid B)={\\frac {P(B\\mid A)P(A)}{P(B)}}"},{"location":"math/statistics/bayes_theorem/#likelihood","title":"Likelihood","text":"<p>In the equation above, P(B\\mid A) is usually called the likelihood. It represents the likelihood for B to be true given A is true. A can be a probability distribution that fits with the training data.</p>"},{"location":"math/statistics/bayes_theorem/#prior","title":"Prior","text":"<p>P(A) is usually called the prior, which is the probability for A to be true. For example, in a classification task, P(A) can be the prior probability of a sample, without any further information, belongs to a certain class.</p>"},{"location":"math/statistics/bayes_theorem/#evidence","title":"Evidence","text":"<p>P(B) is usually called the evidence. It is some piece of information that alters our judgement for how likely that A would be true.</p>"},{"location":"math/statistics/bayes_theorem/#posterior","title":"Posterior","text":"<p>P(A\\mid B) is usually called the posterior probability. With evidence B being true, it is the probability for A to be true. For example, given a sample B, how likely it is from the distribution of A.</p>"},{"location":"math/statistics/l_norms/","title":"L-Norms","text":"<p>L^p-norms are some functions which takes a vector as input and output a value. It is written as \\left\\|\\mathbf x\\right\\|_ p.</p>"},{"location":"math/statistics/l_norms/#l0-norm","title":"L0-Norm","text":"<p>It is a measure of how many non-zero values are there in the vector. If have to put it into notations, we need to first define 0^0=0. The the L^0-norm is as follows.</p>  \\left\\|\\mathbf x\\right\\|_ 0 = |x_{1}|^{0}+|x_{2}|^{0}+\\cdots +|x_{n}|^{0}"},{"location":"math/statistics/l_norms/#l1-norm","title":"L1-Norm","text":"\\left\\|\\mathbf x\\right\\|_ 1 = |x_{1}|+|x_{2}|+\\cdots +|x_{n}|"},{"location":"math/statistics/l_norms/#l2-norm","title":"L2-Norm","text":"\\left\\|\\mathbf x\\right\\|_ 2 = \\sqrt{x_{1}^{2}+x_{2}^{2}+\\cdots +x_{n}^{2}}  <p>We also use its squared form quite often.</p>  \\left\\|\\mathbf x\\right\\|_ 2^2 = x_{1}^{2}+x_{2}^{2}+\\cdots +x_{n}^{2}"},{"location":"math/statistics/l_norms/#l-infinity-norm","title":"L-Infinity-Norm","text":"\\left\\|x\\right\\|_ {\\infty }=\\max \\left\\{|x_{1}|,|x_{2}|,\\dotsc ,|x_{n}|\\right\\}"},{"location":"math/statistics/l_norms/#general-form","title":"General Form","text":"<p>For 0&lt; p&lt; \\infty, we have the following general form.</p>  \\left\\|x\\right\\|_ {p}=\\left(|x_{1}|^{p}+|x_{2}|^{p}+\\dotsb +|x_{n}|^{p}\\right)^{1/p}"},{"location":"math/statistics/l_norms/#visualization","title":"Visualization","text":"<p>Following is a visualization of the contour line of different p values with the norm value equal to 1.</p>"},{"location":"math/statistics/law_of_iterated_expectations/","title":"Law of Iterated Expectations","text":"<p>It is also know as LIE. X is a random variable. Y is another variable. We have:</p>  \\operatorname {E} (X)=\\operatorname {E} (\\operatorname {E} (X\\mid Y))  <p>In \\operatorname {E} (X\\mid Y), Y is a specific value. In \\operatorname {E} (\\operatorname {E} (X\\mid Y)), we need to enumerate all the possible value of Y and multiply \\operatorname {E} (X\\mid Y) with the corresponding probability of that Y and sum together. Therefore, they are equal.</p>"},{"location":"math/statistics/linear_regression/","title":"Linear Regression","text":""},{"location":"math/statistics/linear_regression/#definition","title":"Definition","text":"<p>The equation of linear regression is as follows.</p>  \\mathbf {y} =\\mathbf{X}{\\boldsymbol {\\beta }}+{\\boldsymbol {\\varepsilon }}  <p>where \\mathbf {y} is the prediction target vector, \\mathbf{X} is the feature matrix, where each row is a feature vector, the first column of which only contains 1s, \\boldsymbol {\\beta} is the parameter to learn, \\boldsymbol {\\varepsilon } is the error term.</p>"},{"location":"math/statistics/linear_regression/#solution","title":"Solution","text":"<p>The solution is also called estimation of the parameters. The most straight-forward solution is the ordinary least squares (OLS) estimation. We will also introduce maximum likelihood estimation (MLE) and maximum a posteriori (MAP), which are the most widely used estimation methods in machine learning.</p>"},{"location":"math/statistics/linear_regression/#ordinary-least-squares","title":"Ordinary Least Squares","text":"<p>This method directly minimize the square of the error term \\boldsymbol {\\varepsilon }. We see the error term as an vector, we want to minimize the length of the vector, which is the same as minimizing the square of the length of the vector. The notation for the length of a vector is {\\bigl \\|}\\boldsymbol {\\varepsilon }{\\bigr \\|}. Its square is {\\bigl \\|}\\boldsymbol {\\varepsilon }{\\bigr \\|}^2 The loss function is:</p>  \\min_{\\boldsymbol \\beta} {\\bigl \\|}\\boldsymbol {\\varepsilon }{\\bigr \\|}^2 \\\\  <p>Here we use capital \\mathbf{Y} since it can also be a matrix for multivariate regression. We need to calculate the partial derivative of the loss function with respect to \\boldsymbol {\\beta}, which is also called the gradient since \\boldsymbol {\\beta} is a vector. Then we set the gradient to zero to minimize the loss since the loss is convex.</p>  \\min_{\\boldsymbol \\beta} {\\bigl \\|}\\boldsymbol {\\varepsilon }{\\bigr \\|}^2  =\\min_{\\boldsymbol \\beta} {\\bigl \\|}\\mathbf{Y} - \\mathbf{X}{\\boldsymbol {\\beta }}{\\bigr \\|}^2 =\\min_{\\boldsymbol \\beta} (\\mathbf Y - \\mathbf{X}{\\boldsymbol {\\beta }})^\\top(\\mathbf Y - \\mathbf{X}{\\boldsymbol {\\beta }})\\\\ =\\min_{\\boldsymbol \\beta} \\mathbf Y^\\top \\mathbf Y - \\mathbf Y^\\top \\mathbf{X}{\\boldsymbol {\\beta }}- (\\mathbf{X}{\\boldsymbol {\\beta }})^\\top \\mathbf Y  + (\\mathbf{X}{\\boldsymbol {\\beta }})^\\top\\mathbf{X}{\\boldsymbol {\\beta }}\\\\ =\\min_{\\boldsymbol \\beta} \\mathbf Y^\\top \\mathbf Y - \\mathbf Y^\\top \\mathbf{X}{\\boldsymbol {\\beta }}- {\\boldsymbol {\\beta }}^\\top\\mathbf{X}^\\top \\mathbf Y  + {\\boldsymbol {\\beta }}^\\top\\mathbf{X}^\\top\\mathbf{X}{\\boldsymbol {\\beta }}  <p>Set the first order derivative with respect to \\boldsymbol \\beta to zero. Need matrix diferentiation rules</p>  \\frac{\\partial}{\\partial \\boldsymbol \\beta}( \\mathbf Y^\\top \\mathbf Y - \\mathbf Y^\\top \\mathbf{X}{\\boldsymbol {\\beta }}- {\\boldsymbol {\\beta }}^\\top\\mathbf{X}^\\top \\mathbf Y  + {\\boldsymbol {\\beta }}^\\top\\mathbf{X}^\\top\\mathbf{X}{\\boldsymbol {\\beta }}) = -2\\mathbf X ^\\top \\mathbf Y + 2X^\\top\\mathbf X \\boldsymbol \\beta = 0\\\\ \\boldsymbol \\beta = (\\mathbf X^\\top\\mathbf X)^{-1}\\mathbf X ^\\top\\mathbf Y"},{"location":"math/statistics/linear_regression/#maximum-likelihood-estimation","title":"Maximum Likelihood Estimation","text":""},{"location":"math/statistics/linear_regression/#maximum-a-posteriori","title":"Maximum a Posteriori","text":""},{"location":"math/statistics/logistic_regression/","title":"Logistic Regression","text":""},{"location":"math/statistics/logit/","title":"Logit Function","text":"<p>It is a function mapping the probability of an event to happen from the rang of [0, 1] to {\\displaystyle (-\\infty ,+\\infty )}.</p> <p>If the probability for an event to happen is p, the following is the logit function. We sometime also refer to the value of the function as logit.</p>  {\\displaystyle \\operatorname {logit} (p)=\\log \\left({\\frac {p}{1-p}}\\right)}  <p>It is also the inverse function of sigmoid function. In neural networks, for binary classification problem, the output of a neural network is considered as logits since their value ranges are {\\displaystyle (-\\infty ,+\\infty )}. They need to pass a sigmoid layer to become the probabilities.</p> <p>For multi-class classification, the similar pair of inverse functions are softmax and multinominal logit.</p>"},{"location":"math/statistics/map/","title":"Maximum a Posteriori Estimation","text":"<p>You can think it as an advanced version of maximum likelihood estimation (MLE). In MLE, we assume the parameter \\boldsymbol\\theta is a constant value. However, in maximum a posteriori (MAP) estimation, we assume the parameter \\boldsymbol\\theta is also a random variable.</p> <p>Instead of maximizing p(\\mathbf X\\mid \\boldsymbol\\theta ), we would like to maximize the posterior p(\\boldsymbol\\theta\\mid \\mathbf X ). The meaning of the posterior here is that given the samples \\mathbf X, the probability for the parameters to be \\boldsymbol\\theta.</p>  {\\hat {\\boldsymbol\\theta }}={\\underset {\\boldsymbol\\theta \\in \\Theta }{\\operatorname {arg\\;max} }}\\ p(\\boldsymbol\\theta\\mid \\mathbf X ) = ={\\underset {\\boldsymbol\\theta \\in \\Theta }{\\operatorname {arg\\,max} }}\\ {\\frac {p(x\\mid \\theta )\\,p(\\theta )}{ \\int _ {\\Theta }p(x\\mid \\vartheta )\\,p(\\vartheta )\\,d\\vartheta }}={\\underset {\\boldsymbol\\theta \\in \\Theta}{\\operatorname {arg\\,max} }}\\ p(x\\mid \\theta )\\,p(\\theta )  <p>As you see, we explicitly modeled the prior for \\boldsymbol\\theta as p(\\boldsymbol\\theta).</p>"},{"location":"math/statistics/mle/","title":"Maximum Likelihood Estimation","text":"<p>Suppose we have a probability distribution with parameter \\boldsymbol\\theta. We also have some samples drawn from the distribution \\mathbf X. We would like to estimate \\boldsymbol\\theta based on \\mathbf X to maximize the following probability.</p>  {\\hat {\\boldsymbol\\theta }}={\\underset {\\boldsymbol\\theta \\in \\Theta }{\\operatorname {arg\\;max} }}\\ p(\\mathbf X\\mid \\boldsymbol\\theta )  <p>Intuitively, we would like to find the parameters, which would most likely to generate these samples.</p>"},{"location":"math/statistics/regularization/","title":"Regularization","text":"<p>Regularization usually refers to adding information to solve overfitting in a learning process.</p> <p>It can be adding a term to the loss function, which is called a regularization term. The term is usually an L-Norm on the parameters of the model.</p>"},{"location":"math/statistics/regularization/#select-the-right-l-norm","title":"Select the Right L-Norm","text":"<p>L1 can achieve sparsity. In other words, add an L1 regularization term can make it use more zeros in the parameters.</p> <p>L2 can make the polynomial curve more smooth since it doesn't make that many zeros.</p> <p>L-infinity are more likely to make the parameters equal to each other.</p>"},{"location":"math/statistics/distributions/cdf/","title":"Cumulative Distribution Function","text":""},{"location":"math/statistics/distributions/normal/","title":"Normal Distribution","text":""},{"location":"math/statistics/distributions/pdf/","title":"Probability Density Function","text":""},{"location":"math/statistics/distributions/pmf/","title":"Probability Mass Function","text":""},{"location":"math/statistics/distributions/poisson/","title":"Poisson Distribution","text":""},{"location":"tech/computer_networks/hub/","title":"Hub","text":"<p>A hub is not intelligent, it will just broadcast what ever it receives to all its neighbours. It is in the physical layer of the OSI model.</p>"},{"location":"tech/computer_networks/modem/","title":"Modem","text":"<p>Modem is purely for signal encoding and decoding, usually between carrier wave and digital information. It is in the physics layer of the OSI model.</p>"},{"location":"tech/computer_networks/osi/","title":"OSI Model","text":""},{"location":"tech/computer_networks/router/","title":"Router","text":"<p>Router is in the network layer of the OSI model. It uses the IP in the packet to decide where to send the packet.</p>"},{"location":"tech/computer_networks/switch/","title":"Switch","text":"<p>Switch is in the datalink layer of the OSI model. It uses the MAC address of the frame to decide where to send the frame. It keeps a table of MAC addresses and where to send to them. If the frame is sending to a MAC address not in the table, it would first do a flood (asking all its neighbours to find that MAC address in their neighbours recursively) to find the MAC address and record it in the table. Therefore, next time, it knows where to send it for the next hop when it see this MAC address.</p>"},{"location":"tech/large_language_models/continuous_batching/","title":"Continuous Batching","text":"<p>This is a technique to reduce request waiting time and increase the GPU utilization during serving.</p> <p>Blog link</p> <p>Paper link</p>"},{"location":"tech/large_language_models/continuous_batching/#the-problem","title":"The problem","text":"<p>When think of batching during inference, the requests have to arrive almost at the same time and they need to have exact the same number of tokens. Only in this way, we can batch them together to generate the next token for each request. This results in longer waiting time for the late-arriving requests. It also prevent from the shorter answers to return since it has to finish the longest sequence in the batch before return all of the results together.</p>"},{"location":"tech/large_language_models/continuous_batching/#handling-sequences-of-different-lengths-in-the-same-batch","title":"Handling sequences of different lengths in the same batch","text":"<p>Continuous batching came up with a technique to handle sequences of different lengths. They now can be batched together. What it did was just categorize the ops into two groups. One is different-length-compatible, for example, matmul generating the next K, Q, V vector, layer-norm, gelu. The other group is not compatible different-length-compatible, for example, attention layers, that uses the \\mathbf{Q}\\mathbf{K}^{T}. Then, it do the ops in the first group in a batched manner, but split them by request when execuing the ops in the second group.</p> <p>In this way, sequences of different lengths can be batched together for serving.</p>"},{"location":"tech/large_language_models/continuous_batching/#iteration-level-scheduling","title":"Iteration-level scheduling","text":"<p>Then, it does some scheduling at every interation. It iteration is generation one more token for each sequence in the batch. It may remove sequence from the batch if it reached the end or add a new squence to it when a new request arrives.</p> <p>So, now, the shorter answer no longer needs to wait for the longer answer to finish, and the newly arrived requests also do not need to wait to join a batch.</p>"},{"location":"tech/large_language_models/disaggregated_serving/","title":"Disaggregated Serving","text":"<p>Paper link</p> <p>The compute pattern of prefill and decoding are very different. During prefill, the sequence is long and a lot of KV caches to create. During decoding, they just use the previous KV caches for one more token. If we batch them together on the same GPU, they would slow each other as one may wait for the other to finish. Due to the different compute pattern, their compute time varies a lot on different stages. So a lot of time were wasted on waiting.</p> <p>The key idea is just to serve prefill and decoding on different GPUs, the compute with similar pattern get batched together for more efficient computing.</p>"},{"location":"tech/large_language_models/speculative_decoding/","title":"Speculative decoding","text":"<p>It is a technique to accelerate serving.</p> <p>Paper link</p> <p>Blog link</p>"},{"location":"tech/large_language_models/speculative_decoding/#key-idea","title":"Key idea","text":"<p>During inference, use the low-cost smaller models for some tokens and only use the large models for the tokens that it does not agree with the smaller one.</p>"},{"location":"tech/large_language_models/speculative_decoding/#efficiency","title":"Efficiency","text":"<p>It is not a technique of saving resource, but a way to inference multiple tokens in paralell so that we can save time. It consumes the same amount (or slightly more) of resource and requires more available GPUs at once since we are running in parallel, not in sequence. The small overhead is caused by using the smaller model.</p>"},{"location":"tech/large_language_models/speculative_decoding/#the-process","title":"The process","text":"<p>The smaller model generate some tokens: (x0, x1, x2, ..., xn).</p> <p>Put them into <code>n</code> sequences: (x0), (x0, x1), (x0, x1, x2), ..., (x0, x1, x2, ..., xn).</p> <p>Feed these sequences to the large model in parallel on <code>n</code> processes.</p> <p>Compare the output probabily of the <code>n</code> next tokens over the vocabulary with that of the smaller model.</p> <p>If the larger model has a lower confidence on an output token than the smaller model, which means the larger model doesn't like that token, then change that token.</p> <p>If a token is changed, the tokens following it, generated by the smaller model, are discarded.</p> <p>We just repeat the above process for the entire inference session.</p>"},{"location":"tech/snippets/gpu/","title":"GPU","text":""},{"location":"tech/snippets/gpu/#techsnippet","title":"tech/snippet","text":"<p>Use env var to limit the GPU.</p> <p>Bash: CUDA_VISIBLE_DEVICES=1 python myscript.py</p> <p>Python: import os os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\" # see issue #152 os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"</p> <p>https://stackoverflow.com/questions/37893755/tensorflow-set-cuda-visible-devices-within-jupyter</p>"},{"location":"tech/snippets/latex/","title":"LaTex","text":""},{"location":"tech/snippets/latex/#techsnippet","title":"tech/snippet","text":"<p>How to add? \\bibliographystyle{abbrv} \\begin{thebibliography}{99} \\bibitem{gSK0} A. Maccari, {\\em Phys. Lett. A} {\\bf 265} (2000) 187.</p> <p>\\bibitem{intro1} C. F. Liu, Z.D. Dai, {\\em Appl. Math. and Comput.} {\\bf 206} (2008) 272.</p> <p>\\bibitem{intro2} Z. H. Yang, {\\em Commun. Theor. Phys.} {\\bf 46} (2006) 807. \\end{thebibliography}</p> <p>How to Cite? bilinear~\\cite{Hirota1,Hirota2,Hirota3}, Darboux transformation~\\cite{dar1,dar2,dar3}, Bell polynomial~\\cite{bell1,bell2,bell3} and B\\\"{a}cklund transformation (BT)~\\cite{BT1}.</p> <p>Note: The default order of the bibliography is the order they appear in the list.</p> <p>The title of bibliography is \"Bibliography\" or \"Reference\" depend on what document class you use.</p> <p>Command line is \"latex filename.tex\" to make a dvi file, \"pdflatex filename.tex\" to make a pdf file.</p> <p>picture: \\includegraphics[height=8cm]{fig1.eps}</p> <p>table:</p> \\begin{center} \\begin{tabular}{@{}llr@{}} \\toprule \\multicolumn{3}{c}{Statistical Feature}\\\\ \\midrule No. &amp;Name &amp;Type\\\\ \\midrule 1 &amp;time stamp &amp;Text \\\\ 3 &amp;IMSI &amp;Number \\\\ 4 &amp;number of HTTP links with same IMSI in 2 min &amp;Number \\\\ 5 &amp;number of HTTP packet sent with same IMSI in 2 min &amp;Number \\\\ 6 &amp;number of HTTP packet recieved with same IMSI in 2 min &amp;Float \\\\ 7 &amp;number of Bytes sent with same IMSI in 2 min &amp;Number \\\\ 8 &amp;number of Bytes recieved with same IMSI in 2 min &amp;Number \\\\ 9 &amp;send-to-recieve ratio of Bytes with same IMSI in 2 min &amp;Float \\\\ 10 &amp;ratio of packet with the same destination IP in 5 min &amp;Float \\\\ 11 &amp;ratio of packet with the same destination IP and protocal type in 5 min &amp;Float \\\\ 12 &amp;number of PDP sessions originated by the user &amp;Number \\\\ \\bottomrule \\end{tabular} \\end{center} <p>break long urls:</p> <p>\\usepackage[hyphens]{url}</p> <p>\\url{http:.....}</p>"},{"location":"tech/snippets/linux_commands/","title":"Linux Commands","text":""},{"location":"tech/snippets/linux_commands/#techsnippet","title":"tech/snippet","text":"<p>execute the command with line number of 1957 in 'history' command: <code>!1957</code></p> <p>how to count the number of lines of code in a directory recursively: <code>find . -name '*.py'| xargs wc -l</code></p> <p>Way to unzip file to different directories: <pre><code>for i in *.zip; do \n    mkdir \"$i-dir\" \n    cd \"$i-dir\" \n    unzip \"../$i\" \n    cd ..\ndone\n</code></pre></p> <p>find string recursively in files in a folder: <code>find . -type f -print0 | xargs -0 grep -l \"target_string\"</code> or <code>grep --include \\*.py -r \"target_string\"</code></p> <p>find file recursively: <code>find . -name \"*.pdf\"</code></p> <p>replace string recursively in files in a folder: <code>find . -name \"*.cpp\" -print0 |  xargs -0 -n 1 sed -i -e 's/from/to/g'</code></p>"},{"location":"tech/snippets/socket_c/","title":"Linux C Socket","text":"<p>\u90e8\u5206\u8f6c\u81ea\uff1ahttp://goodcandle.cnblogs.com/archive/2005/12/10/294652.aspx</p> <ol> <li> <p>\u4ec0\u4e48\u662fTCP/IP\u3001UDP\uff1f</p> </li> <li> <p>Socket\u5728\u54ea\u91cc\u5462\uff1f</p> </li> <li> <p>Socket\u662f\u4ec0\u4e48\u5462\uff1f</p> </li> <li> <p>\u6709\u5f88\u591a\u7684\u6846\u67b6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u5728\u4eceSocket\u5f00\u59cb\uff1f</p> </li> <li> <p>Linux C Socket\u7b80\u5355\u793a\u4f8b 1.\u4ec0\u4e48\u662fTCP/IP \u3001UDP \uff1f</p> </li> </ol> <p>TCP_IP\uff08Transmission Control Protocol_Internet Protocol\uff09\u5373\u4f20\u8f93\u63a7\u5236\u534f\u8bae/\u7f51\u95f4\u534f\u8bae\uff0c\u662f\u4e00\u4e2a\u5de5\u4e1a\u6807\u51c6\u7684\u534f\u8bae\u96c6\uff0c\u5b83\u662f\u4e3a\u5e7f\u57df\u7f51\uff08WANs\uff09\u8bbe\u8ba1\u7684\u3002 UDP\uff08User Data Protocol\uff0c\u7528\u6237\u6570\u636e\u62a5\u534f\u8bae\uff09\u662f\u4e0eTCP\u76f8\u5bf9\u5e94\u7684\u534f\u8bae\u3002\u5b83\u662f\u5c5e\u4e8eTCP/IP\u534f\u8bae\u65cf\u4e2d\u7684\u4e00\u79cd\u3002 \u4e0b\u9762\u7684\u56fe\u8868\u660e\u4e86\u8fd9\u4e9b\u534f\u8bae\u7684\u5173\u7cfb\u3002</p> <p></p> <p>2.Socket \u5728\u54ea\u91cc\u5462\uff1f</p> <p></p> <p>3.Socket \u662f\u4ec0\u4e48\u5462\uff1f**</p> <p>Socket\u662f\u5e94\u7528\u5c42\u4e0eTCP_IP\u534f\u8bae\u65cf\u901a\u4fe1\u7684\u4e2d\u95f4\u8f6f\u4ef6\u62bd\u8c61\u5c42\uff0c\u5b83\u662f\u4e00\u7ec4\u63a5\u53e3\u3002\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0cSocket\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u95e8\u9762\u6a21\u5f0f\uff0c\u5b83\u628a\u590d\u6742\u7684TCP_IP\u534f\u8bae\u65cf\u9690\u85cf\u5728Socket\u63a5\u53e3\u540e\u9762\uff0c\u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u4e00\u7ec4\u7b80\u5355\u7684\u63a5\u53e3\u5c31\u662f\u5168\u90e8\uff0c\u8ba9Socket\u53bb\u7ec4\u7ec7\u6570\u636e\uff0c\u4ee5\u7b26\u5408\u6307\u5b9a\u7684\u534f\u8bae\u3002</p> <p>\u95e8\u9762\u6a21\u5f0f\uff0c\u7528\u81ea\u5df1\u7684\u8bdd\u8bf4\uff0c\u5c31\u662f\u7cfb\u7edf\u5bf9\u5916\u754c\u63d0\u4f9b\u5355\u4e00\u7684\u63a5\u53e3\uff0c\u5916\u90e8\u4e0d\u9700\u8981\u4e86\u89e3\u5185\u90e8\u7684\u5b9e\u73b0\u3002</p> <p>4.\u6709\u5f88\u591a\u7684\u6846\u67b6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u5728\u4eceSocket\u5f00\u59cb\uff1f</p> <p>\u73b0\u5728\u7684\u8de8\u5e73\u53f0\u7f51\u7edc\u7f16\u7a0b\u6846\u67b6\u5f88\u591a\uff0c\u5982Java\u7684SSH\uff0cC/C++\u7684Boost\u7b49\u3002</p> <p>\u73b0\u5728\u7684\u5206\u5e03\u5f0f\u6846\u67b6\u5f88\u591a\uff0c\u5982Hadoop\u7b49\u3002</p> <p>\u6211\u7684\u4efb\u52a1\u662f\u628a\u4e00\u4e2aC/C++\u7a0b\u5e8f\u505a\u6210\u5206\u5e03\u5f0f\uff0c\u8981\u6c42\u7684\u4e0d\u914d\u73af\u5883\uff0c\u57fa\u672c\u5c5e\u4e8e\u7eaf\u8ba1\u7b97\u7684\uff0c\u7ed3\u679c\u5f88\u5c0f\u3002\u6240\u4ee5\u9009\u62e9\u4e86Socket\u3002</p> <p>\u91cd\u8981\u7684\u662fSocket\u662f\u5206\u5e03\u5f0f\u3001\u4e91\u8ba1\u7b97\u3001\u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u5bf9Socket\u7684\u5b66\u4e60\u6709\u5229\u4e8e\u5bf9\u5176\u4ed6\u6846\u67b6\u7684\u7406\u89e3\u3002</p> <p>\u4e0b\u56fe\u662fSocket\u7f16\u7a0b\u7684\u57fa\u672c\u6d41\u7a0b\uff1a</p> <p> 5.Linux C Socket\u7b80\u5355\u5b9e\u4f8b\u4e0e\u8be6\u7ec6\u6ce8\u91ca</p> <p>\u7a0b\u5e8f\u4e3a\u7b80\u5355\u7684\u201c\u56de\u5c04\u201d\uff0c\u5ba2\u6237\u7aef\u5c06\u63a7\u5236\u53f0\u8f93\u5165\u7684\u4fe1\u606f\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7aef\uff0c\u670d\u52a1\u5668\u539f\u6837\u8fd4\u56de\u4fe1\u606f\u3002</p> <p>\u670d\u52a1\u5668\u7aef\uff1a</p> <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/shm.h&gt;\n\n#define MYPORT  8887\n#define QUEUE   20\n#define BUFFER_SIZE 1024\n\nint main()\n{\n    ///\u5b9a\u4e49sockfd\n    int server_sockfd = socket(AF_INET,SOCK_STREAM, 0);\n\n    ///\u5b9a\u4e49sockaddr_in\n    struct sockaddr_in server_sockaddr;\n    server_sockaddr.sin_family = AF_INET;\n    server_sockaddr.sin_port = htons(MYPORT);\n    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    ///bind\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u51fa\u9519\u8fd4\u56de-1\n    if(bind(server_sockfd,(struct sockaddr *)&amp;server_sockaddr,sizeof(server_sockaddr))==-1)\n    {\n        perror(\"bind\");\n        exit(1);\n    }\n\n    ///listen\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u51fa\u9519\u8fd4\u56de-1\n    if(listen(server_sockfd,QUEUE) == -1)\n    {\n        perror(\"listen\");\n        exit(1);\n    }\n\n    ///\u5ba2\u6237\u7aef\u5957\u63a5\u5b57\n    char buffer[BUFFER_SIZE];\n    struct sockaddr_in client_addr;\n    socklen_t length = sizeof(client_addr);\n\n    ///\u6210\u529f\u8fd4\u56de\u975e\u8d1f\u63cf\u8ff0\u5b57\uff0c\u51fa\u9519\u8fd4\u56de-1\n    int conn = accept(server_sockfd, (struct sockaddr*)&amp;client_addr, &amp;length);\n    if(conn&lt;0)\n    {\n        perror(\"connect\");\n        exit(1);\n    }\n\n    while(1)\n    {\n        memset(buffer,0,sizeof(buffer));\n        int len = recv(conn, buffer, sizeof(buffer),0);\n        if(strcmp(buffer,\"exit\\n\")==0)\n            break;\n        fputs(buffer, stdout);\n        send(conn, buffer, len, 0);\n    }\n    close(conn);\n    close(server_sockfd);\n    return 0;\n}\n</code></pre> <p>\u5ba2\u6237\u7aef\uff1a</p> <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/shm.h&gt;\n\n#define MYPORT  8887\n#define BUFFER_SIZE 1024\n\nint main()\n{\n    ///\u5b9a\u4e49sockfd\n    int sock_cli = socket(AF_INET,SOCK_STREAM, 0);\n\n    ///\u5b9a\u4e49sockaddr_in\n    struct sockaddr_in servaddr;\n    memset(&amp;servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(MYPORT);  ///\u670d\u52a1\u5668\u7aef\u53e3\n    servaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");  ///\u670d\u52a1\u5668ip\n\n    ///\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u6210\u529f\u8fd4\u56de0\uff0c\u9519\u8bef\u8fd4\u56de-1\n    if (connect(sock_cli, (struct sockaddr *)&amp;servaddr, sizeof(servaddr)) &lt; 0)\n    {\n        perror(\"connect\");\n        exit(1);\n    }\n\n    char sendbuf[BUFFER_SIZE];\n    char recvbuf[BUFFER_SIZE];\n    while (fgets(sendbuf, sizeof(sendbuf), stdin) != NULL)\n    {\n        send(sock_cli, sendbuf, strlen(sendbuf),0); ///\u53d1\u9001\n        if(strcmp(sendbuf,\"exit\\n\")==0)\n            break;\n        recv(sock_cli, recvbuf, sizeof(recvbuf),0); ///\u63a5\u6536\n        fputs(recvbuf, stdout);\n\n        memset(sendbuf, 0, sizeof(sendbuf));\n        memset(recvbuf, 0, sizeof(recvbuf));\n    }\n\n    close(sock_cli);\n    return 0;\n}\n</code></pre> <p>\u6267\u884c\uff1a</p> <p>\u5ba2\u6237\u7aef</p> <p> \u670d\u52a1\u5668\u7aef</p> <p></p> <p></p>"},{"location":"tech/snippets/socket_cpp_win/","title":"windows socket C++","text":"<p>Windows\u4e0bSocket\u7f16\u7a0b\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u90e8\u5206\uff1a \u670d\u52a1\u7aef 1\u3001\u521d\u59cb\u5316Windows Socket\u5e93\u3002 2\u3001\u521b\u5efaSocket\u3002 3\u3001\u7ed1\u5b9aSocket\u3002 4\u3001\u76d1\u542c\u3002 5\u3001Accept\u3002 6\u3001\u63a5\u6536\u3001\u53d1\u9001\u6570\u636e\u3002</p> <p>\u5ba2\u6237\u7aef 1\u3001\u521d\u59cb\u5316Windows Socket\u5e93\u3002 2\u3001\u521b\u5efaSocket\u3002 3\u3001\u8fde\u63a5Socket\u3002 4\u3001\u63a5\u6536\u3001\u53d1\u9001\u6570\u636e\u3002</p> <p>\u670d\u52a1\u7aef\u6bcf\u63a5\u6536\u5230\u4e00\u4e2a\u5ba2\u6237\u7aef\u7684Socket,\u5219\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u3002\u6ee1\u8db3\u4e00\u4e2a\u670d\u52a1\u7aef\u8fde\u63a5\u591a\u4e2a\u5ba2\u6237\u7aef\u3002</p> <pre><code>//Server.cpp\n#include &lt;iostream&gt;\n#include &lt;winsock2.h&gt;\n\nusing namespace std;\n\n#pragma comment(lib, \"ws2_32.lib\")\n\n#define PORT 4000\n#define IP_ADDRESS \"10.241.39.19\"\n\n\nDWORD WINAPI ClientThread(LPVOID lpParameter)\n{\n    SOCKET CientSocket = (SOCKET)lpParameter;\n    int Ret = 0;\n    char RecvBuffer[MAX_PATH];\n\n    while ( true )\n    {\n        memset(RecvBuffer, 0x00, sizeof(RecvBuffer));\n        Ret = recv(CientSocket, RecvBuffer, MAX_PATH, 0);\n        if ( Ret == 0 || Ret == SOCKET_ERROR ) \n        {\n            cout&lt;&lt;\"\u5ba2\u6237\u7aef\u9000\u51fa!\"&lt;&lt;endl;\n            break;\n        }\n        cout&lt;&lt;\"\u63a5\u6536\u5230\u5ba2\u6237\u4fe1\u606f\u4e3a:\"&lt;&lt;RecvBuffer&lt;&lt;endl;\n    }\n\n    return 0;\n}\n\nint main(int argc, char* argv[])\n{\n    WSADATA  Ws;\n    SOCKET ServerSocket, ClientSocket;\n    struct sockaddr_in LocalAddr, ClientAddr;\n    int Ret = 0;\n    int AddrLen = 0;\n    HANDLE hThread = NULL;\n\n    //Init Windows Socket\n    if ( WSAStartup(MAKEWORD(2,2), &amp;Ws) != 0 )\n    {\n        cout&lt;&lt;\"Init Windows Socket Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n\n    //Create Socket\n    ServerSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if ( ServerSocket == INVALID_SOCKET )\n    {\n        cout&lt;&lt;\"Create Socket Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n\n    LocalAddr.sin_family = AF_INET;\n    LocalAddr.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n    LocalAddr.sin_port = htons(PORT);\n    memset(LocalAddr.sin_zero, 0x00, 8);\n\n    //Bind Socket\n    Ret = bind(ServerSocket, (struct sockaddr*)&amp;LocalAddr, sizeof(LocalAddr));\n    if ( Ret != 0 )\n    {\n        cout&lt;&lt;\"Bind Socket Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n    //listen\n    Ret = listen(ServerSocket, 10);\n    if ( Ret != 0 )\n    {\n        cout&lt;&lt;\"listen Socket Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n\n    cout&lt;&lt;\"\u670d\u52a1\u7aef\u5df2\u7ecf\u542f\u52a8\"&lt;&lt;endl;\n\n    while ( true )\n    {\n        AddrLen = sizeof(ClientAddr);\n        ClientSocket = accept(ServerSocket, (struct sockaddr*)&amp;ClientAddr, &amp;AddrLen);\n        if ( ClientSocket == INVALID_SOCKET )\n        {\n            cout&lt;&lt;\"Accept Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n            break;\n        }\n\n        cout&lt;&lt;\"\u5ba2\u6237\u7aef\u8fde\u63a5::\"&lt;&lt;inet_ntoa(ClientAddr.sin_addr)&lt;&lt;\":\"&lt;&lt;ClientAddr.sin_port&lt;&lt;endl;\n\n        hThread = CreateThread(NULL, 0, ClientThread, (LPVOID)ClientSocket, 0, NULL);\n        if ( hThread == NULL )\n        {\n            cout&lt;&lt;\"Create Thread Failed!\"&lt;&lt;endl;\n            break;\n        }\n\n        CloseHandle(hThread);\n    }\n\n    closesocket(ServerSocket);\n    closesocket(ClientSocket);\n    WSACleanup();\n\n    return 0;\n}\n</code></pre> <pre><code>// Client.cpp\n#include &lt;iostream&gt;\n#include &lt;winsock2.h&gt;\n\nusing namespace std;\n\n#pragma comment(lib, \"ws2_32.lib\")\n\n#define PORT 4000\n#define IP_ADDRESS \"10.241.39.19\"\n\nint main(int argc, char * argv[])\n{\n    WSADATA Ws;\n    SOCKET ClientSocket;\n    struct sockaddr_in ServerAddr;\n    int Ret = 0;\n    int AddrLen = 0;\n    HANDLE hThread = NULL;\n    char SendBuffer[MAX_PATH];\n\n    //Init Windows Socket\n    if ( WSAStartup(MAKEWORD(2,2), &amp;Ws) != 0 )\n    {\n        cout&lt;&lt;\"Init Windows Socket Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n    //Create Socket\n    ClientSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if ( ClientSocket == INVALID_SOCKET )\n    {\n        cout&lt;&lt;\"Create Socket Failed::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n\n    ServerAddr.sin_family = AF_INET;\n    ServerAddr.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n    ServerAddr.sin_port = htons(PORT);\n    memset(ServerAddr.sin_zero, 0x00, 8);\n\n    Ret = connect(ClientSocket,(struct sockaddr*)&amp;ServerAddr, sizeof(ServerAddr));\n    if ( Ret == SOCKET_ERROR )\n    {\n        cout&lt;&lt;\"Connect Error::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n        return -1;\n    }\n    else\n    {\n        cout&lt;&lt;\"\u8fde\u63a5\u6210\u529f!\"&lt;&lt;endl;\n    }\n\n    while ( true )\n    {\n        cin.getline(SendBuffer, sizeof(SendBuffer));\n        Ret = send(ClientSocket, SendBuffer, (int)strlen(SendBuffer), 0);\n        if ( Ret == SOCKET_ERROR )\n        {\n            cout&lt;&lt;\"Send Info Error::\"&lt;&lt;GetLastError()&lt;&lt;endl;\n            break;\n        }\n    }\n\n    closesocket(ClientSocket);\n    WSACleanup();\n\n    return 0;\n}\n</code></pre>"},{"location":"tech/snippets/thread_c/","title":"Linux C Thread","text":""},{"location":"tech/snippets/thread_c/#techsnippet","title":"tech/snippet","text":"<p>\u8fdb\u7a0b \u7cfb\u7edf\u4e2d\u7a0b\u5e8f\u6267\u884c\u548c\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684\u6570\u636e\u6bb5\u3001\u4ee3\u7801\u6bb5\u548c\u5806\u6808\u6bb5 \u5728\u8fdb\u884c\u5207\u6362\u65f6\u9700\u8981\u6709\u6bd4\u8f83\u590d\u6742\u7684\u4e0a\u4e0b\u6587\u5207\u6362</p> <p>\u7ebf\u7a0b \u51cf\u5c11\u5904\u7406\u673a\u7684\u7a7a\u8f6c\u65f6\u95f4\uff0c\u652f\u6301\u591a\u5904\u7406\u5668\u4ee5\u53ca\u51cf\u5c11\u4e0a\u4e0b\u6587\u5207\u6362\u5f00\u9500, \u6bd4\u521b\u5efa\u8fdb\u7a0b\u5c0f\u5f88\u591a \u8fdb\u7a0b\u5185\u72ec\u7acb\u7684\u4e00\u6761\u8fd0\u884c\u8def\u7ebf \u5904\u7406\u5668\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u5143\uff0c\u4e5f\u79f0\u4e3a\u8f7b\u91cf\u7ea7\u8fdb\u7a0b \u53ef\u4ee5\u5bf9\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\uff0c\u5e76\u4e0e\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u5176\u4ed6\u7ebf\u7a0b\u5171\u4eab</p> <p>\u7ebf\u7a0b \u3000\u3000\u7ebf\u7a0b\u76f8\u5173\u7684\u6267\u884c\u72b6\u6001\u548c\u5b58\u50a8\u53d8\u91cf\u653e\u5728 \u7ebf\u7a0b\u63a7\u5236\u8868 \u5185 \u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u6709\u591a\u4e2a\u7ebf\u7a0b\u63a7\u5236\u8868\u53ca\u5806\u6808\u5bc4\u5b58\u5668\uff0c\u5171\u4eab\u4e00\u4e2a\u7528\u6237\u5730\u5740\u7a7a\u95f4</p> <p>\u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\u548c\u5730\u5740\u7a7a\u95f4 \u4efb\u4f55\u7ebf\u7a0b\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u64cd\u4f5c\u90fd\u4f1a\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u5e26\u6765\u5f71\u54cd</p> <p></p> <p>\u7ebf\u7a0b\u6280\u672f\u53d1\u5c55 Linux 2.2\u5185\u6838 \u2022\u4e0d\u5b58\u5728\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7ebf\u7a0b Linux 2 .4\u5185\u6838 \u2022\u6d88\u9664\u7ebf\u7a0b\u4e2a\u6570\u7684\u9650\u5236\uff0c\u5141\u8bb8\u52a8\u6001\u5730\u8c03\u6574\u8fdb\u7a0b\u6570\u4e0a\u9650 \u5728Linux \u5185\u68382.6\u4e4b\u524d\uff0c\u8fdb\u7a0b\u662f\u6700\u4e3b\u8981\u7684\u5904\u7406\u8c03\u5ea6\u5355\u5143\uff0c\u5e76\u6ca1\u652f\u6301\u5185\u6838\u7ebf\u7a0b\u673a\u5236 Linux 2.6\u5185\u6838 \u2022\u5b9e\u73b0\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u7684\u8fdb\u7a0b\u673a\u5236, \u57281996\u5e74\u7b2c\u4e00\u6b21\u83b7\u5f97\u7ebf\u7a0b\u7684\u652f\u6301</p> <p>\u7ebf\u7a0b\u6280\u672f\u53d1\u5c55 \u4e3a\u4e86\u6539\u5584LinuxThread\u95ee\u9898\uff0c\u6839\u636e\u65b0\u5185\u6838\u673a\u5236\u91cd\u65b0\u7f16\u5199\u7ebf\u7a0b\u5e93, \u6539\u5584Linux\u5bf9\u7ebf\u7a0b\u7684\u652f\u6301 \u2022\u7531IBM\u4e3b\u5bfc\u7684\u65b0\u4e00\u4ee3POSIX\u7ebf\u7a0b\u5e93\uff08Next Generation POSIX Threads\uff0c\u7b80\u79f0\u4e3aNGPT\uff09 \u2013NGPT\u9879\u76ee\u57282002\u5e74\u542f\u52a8 \u2013\u4e3a\u4e86\u907f\u514d\u51fa\u73b0\u6709\u591a\u4e2aLinux\u7ebf\u7a0b\u6807\u51c6\uff0c\u57282003\u5e74\u505c\u6b62\u8be5\u9879\u76ee \u2022\u7531Red Hat\u4e3b\u5bfc\u7684\u672c\u5730\u5316POSIX\u7ebf\u7a0b\u5e93 (Native POSIX Thread Library\uff0c\u7b80\u79f0\u4e3aNTPL) \u2013\u6700\u65e9\u5728Red Hat Linux9\u4e2d\u88ab\u652f\u6301 \u2013\u73b0\u5728\u5df2\u7ecf\u6210\u4e3aGNU C\u51fd\u6570\u5e93\u7684\u4e00\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u6210\u4e3aLinux\u7ebf\u7a0b\u7684\u6807\u51c6</p> <p>\u7ebf\u7a0b\u6807\u8bc6 \u7ebf\u7a0bID \u2022\u8fdb\u7a0bID\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u552f\u4e00\u7684 \u2022\u7ebf\u7a0bID\u53ea\u5728\u5b83\u6240\u5c5e\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\u6709\u6548 \u51fd\u6570: pthread_self()</p> <p> \u7ebf\u7a0b\u6807\u8bc6 pthread_t\u7c7b\u578b\u901a\u5e38\u7528\u7ed3\u6784\u6765\u8868\u793a \u2022\u4e0d\u80fd\u628a\u5b83\u4f5c\u4e3a\u6574\u6570\u5904\u7406 \u2013Linux\u4f7f\u7528\u65e0\u7b26\u53f7\u957f\u6574\u6570\u8868\u793a \u2022\u4e3a\u4e86\u79fb\u690d\uff0c\u4f7f\u7528\u51fd\u6570\u6765\u6bd4\u8f83\u7ebf\u7a0bID \u51fd\u6570: pthread_equal()</p> <p></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n\nint main(){\n    pthread_t thread_id;\n\n    thread_id=pthread_self(); // \u8fd4\u56de\u8c03\u7528\u7ebf\u7a0b\u7684\u7ebf\u7a0bID\n    printf(\"Thread ID: %lu.\\n\",thread_id)\n\n    if (pthread_equal(thread_id,pthread_self())) {\n//    if (thread_id==0) {\n        printf(\"Equal!\\n\");\n    } else {\n        printf(\"Not equal!\\n\");\n    }\n    return 0;\n}\n</code></pre> <p> \u7ebf\u7a0b\u7f16\u7a0b \u64cd\u4f5c\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u7ebf\u7a0b</p> <p>\u521b\u5efa\u7ebf\u7a0b \u2022\u8c03\u7528\u8be5\u7ebf\u7a0b\u51fd\u6570\u7684\u5165\u53e3\u70b9 \u2022\u4f7f\u7528\u51fd\u6570pthread_create()\uff0c\u7ebf\u7a0b\u521b\u5efa\u540e\uff0c\u5c31\u5f00\u59cb\u8fd0\u884c\u76f8\u5173\u7684\u7ebf\u7a0b\u51fd\u6570</p> <p></p> <pre><code>#include &lt;stdio.h&gt; \n#include &lt;stdlib.h&gt; \n#include &lt;pthread.h&gt; \n\nvoid *thrd_func(void *arg); \npthread_t tid; \n\nint main(){ \n    // \u521b\u5efa\u7ebf\u7a0btid\uff0c\u4e14\u7ebf\u7a0b\u51fd\u6570\u7531thrd_func\u6307\u5411\uff0c\u662fthrd_func\u7684\u5165\u53e3\u70b9\uff0c\u5373\u9a6c\u4e0a\u6267\u884c\u6b64\u7ebf\u7a0b\u51fd\u6570\n    if (pthread_create(&amp;tid,NULL,thrd_func,NULL)!=0) {\n        printf(\"Create thread error!\\n\");\n        exit(1);\n    }\n\n    printf(\"TID in pthread_create function: %u.\\n\",tid);\n    printf(\"Main process: PID: %d,TID: %u.\\n\",getpid(),pthread_self()); \n\n    sleep(1); //race\n\n    return 0;\n}\n\nvoid *thrd_func(void *arg){\n//    printf(\"I am new thread!\\n\");\n    printf(\"New process:  PID: %d,TID: %u.\\n\",getpid(),pthread_self()); //why pthread_self\n    printf(\"New process:  PID: %d,TID: %u.\\n\",getpid(),tid); //why pthread_self\n\n    pthread_exit(NULL); //\u9000\u51fa\u7ebf\u7a0b\n//    return ((void *)0);\n}\n</code></pre> <p></p> <p>\u9000\u51fa\u7ebf\u7a0b \u2022\u5728\u7ebf\u7a0b\u51fd\u6570\u8fd0\u884c\u5b8c\u540e\uff0c\u8be5\u7ebf\u7a0b\u4e5f\u5c31\u9000\u51fa\u4e86 \u2022\u6216\u4f7f\u7528\u51fd\u6570pthread_exit()\uff0c\u8fd9\u662f\u7ebf\u7a0b\u7684\u4e3b\u52a8\u884c\u4e3a \u2022\u4e0d\u80fd\u4f7f\u7528exit()</p> <p></p> <p>\u4f7f\u8c03\u7528\u8fdb\u7a0b\u7ec8\u6b62\uff0c\u6240\u6709\u7ebf\u7a0b\u90fd\u7ec8\u6b62\u4e86</p> <p>\u7b49\u5f85\u7ebf\u7a0b</p> <p>\u2022\u7531\u4e8e\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u591a\u4e2a\u7ebf\u7a0b\u662f\u5171\u4eab\u6570\u636e\u6bb5\u7684\uff0c\u901a\u5e38\u5728\u7ebf\u7a0b\u9000\u51fa\u4e4b\u540e\uff0c\u9000\u51fa\u7ebf\u7a0b\u6240\u5360\u7528\u7684\u8d44\u6e90\u5e76\u4e0d\u4f1a\u968f\u7740\u7ebf\u7a0b\u7684\u7ec8\u6b62\u800c\u5f97\u5230\u91ca\u653e</p> <p>\u2022pthread_join()\u51fd\u6570</p> <p>\u7c7b\u4f3c\u8fdb\u7a0b\u7684wait()/waitpid()\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u5f53\u524d\u7ebf\u7a0b\u6302\u8d77\u6765\u7b49\u5f85\u7ebf\u7a0b\u7684\u7ed3\u675f \u662f\u4e00\u4e2a\u7ebf\u7a0b\u963b\u585e\u7684\u51fd\u6570\uff0c\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b\u4e00\u76f4\u7b49\u5f85\u5230\u88ab\u7b49\u5f85\u7684\u7ebf\u7a0b\u7ed3\u675f\u4e3a\u6b62 \u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u88ab\u7b49\u5f85\u7ebf\u7a0b\u7684\u8d44\u6e90\u5c31\u88ab\u6536\u56de</p> <p></p> <pre><code>#include &lt;stdio.h&gt;\n\n#include &lt;stdlib.h&gt;\n\n#include &lt;pthread.h&gt;\n\nvoid * thrd_func1(void * arg);\n\nvoid * thrd_func2(void * arg);\n\nint main() {\n    pthread_t tid1, tid2;\n    void * tret; // \u521b\u5efa\u7ebf\u7a0btid1\uff0c\u7ebf\u7a0b\u51fd\u6570\n    thrd_func1\n    if (pthread_create( &amp; tid1, NULL, thrd_func1, NULL) != 0) {\n        pr intf(\"Create thread 1 error!\\n\");\n        exit(1);\n    } // \u521b\u5efa\u7ebf\u7a0btid2,\u7ebf\u7a0b\u51fd\u6570\n    thrd_func2\n    if (pthread_create( &amp; tid2, NULL, thrd_func2, NULL) != 0) {\n        printf(\"Create thread 2 error!\\n\");\n        exit(1);\n        20\n    } // \u7b49\u5f85\u7ebf\u7a0btid1\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d\n    if (pthread_jo in (tid1, &amp; tret) != 0) {\n        printf(\"Join thread 1 error!\\n\");\n        exit(1);\n    }\n    printf(\"Thread 1 exit code: %d.\\n\", (int * ) tret); // \u7b49\u5f85tid2\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d\n    if (pthread_join(tid2, &amp; tret) != 0) {\n        printf(\"Join thread 2 error!\\n\");\n        exit(1);\n    }\n    printf(\"Thread 2 exit code: %d.\\n\", (int * ) tret);\n    return 0;\n}\n\nvoid * thrd_func1(void * arg) {\n    printf(\"Thread 1 returning!\\n\"); //    sleep(3);\n    return ((void * ) 1); // \u81ea\u52a8\u9000\u51fa\u7ebf\u7a0b\n}\n\nvoid * thrd_func2(void * arg) {\n    printf(\"Thread 2 exiting!\\n\");\n    pthread_e xit((void * ) 2); // \u7ebf\u7a0b\u4e3b\u52a8\u9000\u51fa\uff0c\u8fd4\u56de(void *)2\n}\n</code></pre> <p></p> <p>\u53d6\u6d88\u7ebf\u7a0b</p> <p>\u2022\u5728\u522b\u7684\u7ebf\u7a0b\u4e2d\u8981\u7ec8\u6b62\u53e6\u4e00\u4e2a\u7ebf\u7a0b \u2022pthread_cancel()\u51fd\u6570 \u2022\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u53ef\u4ee5\u8bbe\u7f6e\u81ea\u5df1\u7684\u53d6\u6d88\u72b6\u6001 \u2013\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u63a5\u6536\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u53d6\u6d88\u8bf7\u6c42\u4e4b\u540e\uff0c\u662f\u63a5\u53d7\u8fd8\u662f\u5ffd\u7565\u8fd9\u4e2a\u8bf7\u6c42 \u2013\u5982\u679c\u63a5\u53d7\uff0c\u662f\u7acb\u523b\u8fdb\u884c\u7ec8\u6b62\u64cd\u4f5c\u8fd8\u662f\u7b49\u5f85\u67d0\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u7b49</p> <p></p> <pre><code>#include &lt;stdio.h&gt;\n\n#include &lt;stdlib.h&gt;\n\n#include &lt;pthread.h&gt;\n\nvoid * thrd_func1(void * arg);\nvoid * thrd_func2(void * arg);\n\npthread_t tid1, tid2;\n\nint main() { // \u521b\u5efa\u7ebf\u7a0btid1\uff0c\u7ebf\u7a0b\u51fd\u6570thrd_func1\n    if (pthread_create( &amp; tid1, NULL, thrd_func1, NULL) != 0) {\n        printf(\"Create thread 1 error!\\n\");\n        exit(1);\n    } // \u521b\u5efa\u7ebf\u7a0btid2\uff0c\u7ebf\u7a0b\u51fd\u6570thrd_func2\n    if (pthread_create( &amp; tid2, NULL, thrd_func2, NULL) != 0) {\n        printf(\"Create thread 2 err      or!\\n\");\n        exit(1);\n    } // \u7b49\u5f85\u7ebf\u7a0btid1\u9000\u51fa\n    if (pthread_join(tid1, NULL) != 0) {\n        printf(\"Join thread 1 error!\\n\");\n        exit(1);\n    } else printf(\"Thread 1 Joined!\\n\"); // \u7b49\u5f85\u7ebf\u7a0btid2\u9000\u51fa\n    if (pthread_join(tid2, NULL) != 0) {\n        printf(\"Join thread 2 error!\\n\");\n        exit(1);\n    } else printf(\"Thread 2 Joined!\\n\");\n    return 0;\n}\n\nvoid * thrd_func1(void * arg) { //    pthread_setcancelstate(PTHREAD_CANCEL_DISABLE,NULL);\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL); // \u8bbe\u7f6e\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5cancel\u6389\u6b64\u7ebf\u7a0b\n    while (1) {\n        printf(\"Thread 1 is running!\\n\");\n        sleep(1);\n    }\n    pthread_exit((void * ) 0);\n}\n\nvoid * thrd_func2(void * arg) {\n    printf(\"Thread 2 is running!\\n\");\n    sleep(5);\n    if (pthread_canc el(tid1) == 0) // \u7ebf\u7a0btid2\u5411\u7ebf\u7a0btid1\u53d1\u9001cancel\n        printf(\"Send Cancel cmd to Thread 1.\\n\");\n    pthread_exit((void * ) 0);\n}\n</code></pre> <p></p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; \n#include &lt;pthread.h&gt; \n\n#define THREAD_NUM 3 \n#define REPEAT_TIMES 5 \n#define DELAY 4 \n\nvoid *thrd_func(void *arg);\n\nint main(){\n    pthread_t thread[THREAD_NUM];\n    int no;\n    void *tret;\n\n    srand((int)time(0)); // \u521d\u59cb\u5316\u968f\u673a\u51fd\u6570\u53d1\u751f\u5668 \n\n    for(no=0;no&lt;THREAD_NUM;no++){\n        if (pthread_create(&amp;thread[no],NULL,thrd_func,(void*)no)!=0) { // \u521b\u5efaTHREAD_NUM\u4e2a\u7ebf\u7a0b\uff0c\u4f20\u5165(void*)no\u4f5c\u4e3athrd_func\u7684\u53c2\u6570\n            printf(\"Create thread %d error!\\n\",no);\n            exit(1);\n        } else\n        printf(\"Create thread %d success!\\n\",no);\n    }\n\n    for(no=0;no&lt;THREAD_NUM;no++){\n        if (pthread_join(thread[no],&amp;tret)!=0){ // \u7b49\u5f85thread[no]\u7ebf\u7a0b\u7ed3\u675f\uff0c\u7ebf\u7a0b\u51fd\u6570\u8fd4\u56de\u503c\u653e\u5728tret\u4e2d\n            printf(\"Join thread %d error!\\n\",no);\n            exit(1);\n        }else\n        printf(\"Join thread %d success!\\n\",no);\n    }              \n    return 0;\n} \n\nvoid *thrd_func(void *arg){     \n    int thrd_num=(void*)arg;\n    int delay_time=0;\n    int count=0; \n\n    printf(\"Thread %d is starting.\\n\",thrd_num);\n    for(count=0;count&lt;REPEAT_TIMES;count++) {\n        delay_time=(int)(DELAY*(rand()/(double)RAND_MAX))+1;\n        sleep(delay_time);\n        printf(\"\\tThread %d:job %d delay =%d.\\n\",thrd_num,count,delay_time);\n    } \n    printf(\"Thread %d is exiting.\\n\",thrd_num);\n    pthread_exit(NULL);\n}\n</code></pre> <p></p> <p>\u7ebf\u7a0b\u540c\u6b65\u4e0e\u4e92\u65a5 \u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u8d44\u6e90\u548c\u5730\u5740\u7a7a\u95f4\uff0c\u5bf9\u8fd9\u4e9b\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5fc5\u987b\u8003\u8651\u7ebf\u7a0b\u95f4\u540c\u6b65\u4e0e\u4e92\u65a5\u95ee\u9898 \u4e09\u79cd\u7ebf\u7a0b\u540c\u6b65\u673a\u5236 \u2022\u4e92\u65a5\u9501 \u2022\u4fe1\u53f7\u91cf \u2022\u6761\u4ef6\u53d8\u91cf \u4e92\u65a5\u9501\u66f4\u9002\u5408\u540c\u65f6\u53ef\u7528\u7684\u8d44\u6e90\u662f\u60df\u4e00\u7684\u60c5\u51b5 \u4fe1\u53f7\u91cf\u66f4\u9002\u5408\u540c\u65f6\u53ef\u7528\u7684\u8d44\u6e90\u4e3a\u591a\u4e2a\u7684\u60c5\u51b5</p> <p></p> <p></p> <p> \u4e92\u65a5\u9501 \u7528\u7b80\u5355\u7684\u52a0\u9501\u65b9\u6cd5\u63a7\u5236\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u539f\u5b50\u64cd\u4f5c \u53ea\u6709\u4e24\u79cd\u72b6\u6001: \u4e0a\u9501\u3001\u89e3\u9501 \u53ef\u628a\u4e92\u65a5\u9501\u770b\u4f5c\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u5168\u5c40\u53d8\u91cf \u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u638c\u63e1\u67d0\u4e2a\u4e92\u65a5\u9501\uff0c\u62e5\u6709\u4e0a\u9501\u72b6\u6001\u7684\u7ebf\u7a0b\u80fd\u591f\u5bf9\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u64cd\u4f5c \u82e5\u5176\u4ed6\u7ebf\u7a0b\u5e0c\u671b\u4e0a\u9501\u4e00\u4e2a\u5df2\u7ecf\u88ab\u4e0a\u9501\u7684\u4e92\u65a5\u9501,\u5219\u8be5\u7ebf\u7a0b\u5c31\u4f1a\u6302\u8d77\uff0c\u76f4\u5230\u4e0a\u9501\u7684\u7ebf\u7a0b\u91ca\u653e\u6389\u4e92\u65a5\u9501\u4e3a\u6b62 \u4e92\u65a5\u9501\u4fdd\u8bc1\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u5bf9\u5171\u4eab\u8d44\u6e90\u6309\u987a\u5e8f\u8fdb\u884c\u539f\u5b50\u64cd\u4f5c</p> <p>\u4e92\u65a5\u9501\u5206\u7c7b \u533a\u522b\u5728\u4e8e\u5176\u4ed6\u672a\u5360\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u5728\u5e0c\u671b\u5f97\u5230\u4e92\u65a5\u9501\u65f6\u662f\u5426\u9700\u8981\u963b\u585e\u7b49\u5f85 \u5feb\u901f\u4e92\u65a5\u9501 \u2022\u8c03\u7528\u7ebf\u7a0b\u4f1a\u963b\u585e\u76f4\u81f3\u62e5\u6709\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b\u89e3\u9501\u4e3a\u6b62 \u2022\u9ed8\u8ba4\u4e3a\u5feb\u901f\u4e92\u65a5\u9501 \u68c0\u9519\u4e92\u65a5\u9501 \u2022\u4e3a\u5feb\u901f\u4e92\u65a5\u9501\u7684\u975e\u963b\u585e\u7248\u672c\uff0c\u5b83\u4f1a\u7acb\u5373\u8fd4\u56de\u5e76\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f</p> <p>\u4e92\u65a5\u9501\u4e3b\u8981\u5305\u62ec\u4e0b\u9762\u7684\u57fa\u672c\u51fd\u6570\uff1a \u4e92\u65a5\u9501\u521d\u59cb\u5316\uff1apthread_mutex_init() \u4e92\u65a5\u9501\u4e0a\u9501\uff1apthread_mutex_lock() \u4e92\u65a5\u9501\u5224\u65ad\u4e0a\u9501\uff1apthread_mutex_trylock() \u4e92\u65a5\u9501\u89e3\u9501\uff1apthread_mutex_unlock() \u6d88\u9664\u4e92\u65a5\u9501\uff1apthread_mutex_destroy()</p> <p></p> <p></p> <p> View Code</p> <p> \u548c\u4e0a\u4e00\u7248\u672c\u7684\u7a0b\u5e8f\u5dee\u5f02\u5728\u4e8e\u6709\u6ca1\u6709\u9501\uff0c\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u7b49\"thread x is exiting.\"\u4e4b\u540e\u5176\u4ed6\u7ebf\u7a0b\u624d\u80fd\u7ee7\u7eed\u3002</p> <p>\u4fe1\u53f7\u91cf \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6240\u7528\u5230\u7684PV\u539f\u5b50\u64cd\u4f5c\uff0c\u5e7f\u6cdb\u7528\u4e8e\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u4e0e\u4e92\u65a5 \u2022\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u8ba1\u6570\u5668\uff0c\u88ab\u7528\u6765\u63a7\u5236\u5bf9\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee PV\u539f\u5b50\u64cd\u4f5c\uff1a\u5bf9\u6574\u6570\u8ba1\u6570\u5668\u4fe1\u53f7\u91cfsem\u7684\u64cd\u4f5c \u2022\u4e00\u6b21P\u64cd\u4f5c\u4f7fsem\u51cf\u4e00\uff0c\u800c\u4e00\u6b21V\u64cd\u4f5c\u4f7fsem\u52a0\u4e00 \u2022\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u6839\u636e\u4fe1\u53f7\u91cf\u7684\u503c\u6765\u5224\u65ad\u662f\u5426\u5bf9\u516c\u5171\u8d44\u6e90\u5177\u6709\u8bbf\u95ee\u6743\u9650 \u2013\u5f53\u4fe1\u53f7\u91cfsem\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u96f6\u65f6\uff0c\u8be5\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5177\u6709\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee\u6743\u9650 \u2013\u5f53\u4fe1\u53f7\u91cfsem\u7684\u503c\u5c0f\u4e8e\u96f6\u65f6\uff0c\u8be5\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5c31\u5c06\u963b\u585e\u76f4\u5230\u4fe1\u53f7\u91cfsem\u7684\u503c\u5927\u4e8e\u7b49\u4e8e0\u4e3a\u6b62</p> <p>PV\u64cd\u4f5c\u4e3b\u8981\u7528\u4e8e\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u548c\u4e92\u65a5 \u4e92\u65a5\uff0c\u51e0\u4e2a\u7ebf\u7a0b\u53ea\u8bbe\u7f6e\u4e00\u4e2a\u4fe1\u53f7\u91cfsem \u540c\u6b65\uff0c\u4f1a\u8bbe\u7f6e\u591a\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5b89\u6392\u4e0d\u540c\u521d\u503c\u6765\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u7684\u987a\u5e8f\u6267\u884c</p> <p></p> <p> \u4fe1\u53f7\u91cf\u51fd\u6570 sem_init() \u521b\u5efa\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u5e76\u521d\u59cb\u5316\u5b83 sem_wait()\u548csem_trywait(): P\u64cd\u4f5c\uff0c\u5728\u4fe1\u53f7\u91cf\u5927\u4e8e\u96f6\u65f6\u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u51cf\u4e00 \u2022\u533a\u522b: \u82e5\u4fe1\u53f7\u91cf\u5c0f\u4e8e\u96f6\u65f6\uff0csem_wait()\u5c06\u4f1a\u963b\u585e\u7ebf\u7a0b,sem_trywait()\u5219\u4f1a\u7acb\u5373\u8fd4\u56de sem_post(): V\u64cd\u4f5c\uff0c\u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u52a0\u4e00\u540c\u65f6\u53d1\u51fa\u4fe1\u53f7\u6765\u5524\u9192\u7b49\u5f85\u7684\u7ebf\u7a0b sem_getvalue(): \u5f97\u5230\u4fe1\u53f7\u91cf\u7684\u503c sem_destroy(): \u5220\u9664\u4fe1\u53f7\u91cf</p> <p></p> <p> eg. \u540c\u6b65\u5404\u7ebf\u7a0b\uff0c\u6267\u884c\u987a\u5e8f\u4e3a\u9006\u5e8f\u3002</p> <p> View Code</p> <p></p> <p>http://pic002.cnblogs.com/images/2012/350751/2012041520535874.jpg</p>"},{"location":"tech/snippets/ubuntu/","title":"ubuntu","text":""},{"location":"tech/snippets/ubuntu/#techsnippet","title":"tech/snippet","text":"<p>shutdown shortcut</p> <p><code>gnome-session-quit --power-off</code></p> <p>make fish shell default</p> <p><code>chsh -s</code> which fish``</p> <p>Unity Tweak Tool</p> <p><code>sudo add-apt-repository ppa:noobslab/themes</code> <code>sudo apt-get update</code> sudo apt-get install flatabulous-theme</p> <p><code>sudo add-apt-repository ppa:noobslab/icons</code> <code>sudo apt-get update</code> <code>sudo apt-get install ultra-flat-icons</code></p>"},{"location":"tech/software_engineering/api_design/","title":"API Design","text":"<ul> <li>Design end-to-end workflows instead of single APIs.</li> <li>Don't put too many classes directly under the same path for importing. It is hard for the user to auto-complete the class name since there would be too many candidates.</li> <li>The keywords in constructor should be accessible with the instance. (i.e. the constructor keywords should also be attributes or properties)</li> <li>If the parent class and the sub class share some args, the required arguments should be documented again in the sub class even they are the same. The arguments in kwargs can be not documented. For the ones not required and not in the kwargs, we should also document them even they are repeated in some other classes.</li> <li>In docstrings of a class, use Args or Arguments to specify the args of init. Use Attributes to specify the attributes which are not init args but publicly accessible.</li> <li>It is not a good practice for the user to provide a list, whose length is required to be a specific number. The user may easily miss some of the elements and got an error.</li> <li>Do not use acronym for any API related things exposed to the users unless it is a really well-known acronym.</li> <li>If the subclass doesn't support some kwarg, it should raise an error when user use it, instead of ignore them silently.</li> <li>When type checking boolean, should be clear whether 0 and 1 are considered valid or not.</li> </ul>"},{"location":"tech/software_engineering/design_pattern/","title":"Design Patterns","text":""},{"location":"tech/software_engineering/design_pattern/#techsoftware-engineering","title":"tech/software engineering","text":"<ul> <li>Factory. It generates objects of classes which extend the same class by checking the parameter which is the name of one of the classes. Then, these objects can be used in polymorphic. Note that if you want the factory to generate other objects besides the original ones you need to change the code of the factory.</li> </ul> <ul> <li>Abstract Factory There is an abstract class which several factories can derive from. Thus, they can generate different kind of objects extending different classes.</li> </ul> <ul> <li>Singleton It is a class has only one instance which already be generated. It can be used to store things which everybody need to access.</li> </ul> <ul> <li>Builder It assembles different parts to form an object.</li> </ul> <ul> <li>Prototype It cached the objects which can be load from elsewhere in it. It serves as an intermediate layer to reduce the number of loading operations.</li> </ul> <ul> <li>Adapter It allows the user to manage an object with interface B using the function of interface A.</li> </ul> <ul> <li>Bridge It split a functionality out of a class using a member whose type is an interface so that the classes which implement the interface do not need to extends the original class which require to contain everything. They only need to implement the interface to have that functionality.</li> </ul> <ul> <li>Filter It lets multiple concrete classes implementing the same filtering interface to filter the list of objects of another class.</li> </ul> <ul> <li>Composite It uses a class A which has a member of a list of instances of A. We are able to use it as nodes to create a tree like structure.</li> </ul> <ul> <li>Decorator It allows us to decorate an object of a class using a Decorator class which contains the object of the original class as its member and some methods to decorate the object like set its border color and so on.</li> </ul> <ul> <li>Facade It hides the complexities of the system and provides an interface to the client using which the client can access the system.</li> </ul> <ul> <li>Flyweight It help us to get or create the objects we want and reduce the number of objects created, too. It uses a hash-map to check whether the object we are ordering is already exist or not, depend on which the decision of whether to create one is made.</li> </ul> <ul> <li>Proxy It is a bit like Prototype design pattern. The only difference is that it only keeps the most recent visited object in it.</li> </ul> <ul> <li>Chain of Responsibilities It has many receivers. Each one contains another to form a chain. When the message is send to the first receiver, it decides whether to handle it or pass it to the next one.</li> </ul> <ul> <li>Command It wraps a request in an object as a command which is to pass to the invoker. The invoker find a way to executes those command. One way to execute is that all these commands implements the same interface which contains an execute method.</li> </ul>"},{"location":"tech/software_engineering/design_review/","title":"Design Review","text":""},{"location":"tech/software_engineering/design_review/#techsoftware-engineering","title":"tech/software engineering","text":"<p>The content of a design review doc: End-to-end Workflows: Detailed Class Signatures</p> <p>Two ways to evaluate whether a design is good or not. 1. The complexity of the class communication graph. 2. How intuitive it is when you read the code.</p> <p>About the class communication graph: The ideal communication graph of a project would be a hierarchical one, where the classes only communicate with the parents (the classes using the class). If there are too many interconnections between the non-parent-child classes, it is a bad design. The parent and child relation should also be intuitive.</p> <p>About rewriting a project: Rewriting a project is a good way to keep the class structures simple. The cost of rewriting is a one time cost. The cost of not rewriting would be the cost of engineering efforts in the future as the project grows. The larger the project grows the more cost there will be. Therefore, for a long term project, we should always try to rewrite the project to keep the class structures simple. It would cost some now but less in the future.</p>"},{"location":"tech/software_engineering/git/","title":"Git","text":""},{"location":"tech/software_engineering/git/#techsoftware-engineering","title":"tech/software engineering","text":""},{"location":"tech/software_engineering/git/#basics","title":"Basics","text":"<ul> <li>The normal way to contribute to a public repo with git. https://github.com/junit-team/junit4/blob/e848a97320851c8614cf9712fa5e2b5092d82925/CONTRIBUTING.md</li> </ul> <ul> <li>Forked sync changes in the upstream repo: https://help.github.com/articles/configuring-a-remote-for-a-fork/ https://help.github.com/articles/syncing-a-fork /</li> </ul> <ul> <li>Delete a branch. <code>git branch -d branch_name</code></li> </ul> <ul> <li>List all the branches. <code>git branch</code></li> </ul> <ul> <li>Switch to a branch <code>git checkout branch_name</code></li> </ul> <ul> <li>Git make the current branch exactly the same as upstream. <code>git fetch upstream</code> <code>git reset --hard upstream/master</code> <code>git push -f origin [current_branch_name]</code></li> </ul> <ul> <li>Delete a branch remotely <code>git push origin --delete &lt;branchName&gt;</code></li> </ul> <ul> <li>How to checkout a remote branch that doesn't exist locally?</li> </ul> <p><code>git branch -v -a</code> To see all the branches available for checkout. <code>git fetch</code> <code>git checkout &lt;branch_name&gt;</code> The branch name should not contain origin/ or remotes/.</p> <ul> <li>How to deal with a detached HEAD?</li> </ul> <p>It is caused by checking out a remote branch directly like <code>git checkout origin/devel</code> Or caused by checkout a commit with SHA1. It is starting a new route from a previous node (commit). So you need to create a branch to save the changes on the detached HEAD. Just use <code>git checkout -b &lt;branch_name&gt;</code> is good enough.</p> <ul> <li>Show remote URL. <code>git remote show origin</code></li> </ul> <ul> <li>Show git branch tree-structure view. <code>git status --graph</code></li> </ul> <ul> <li>Stash by hunks. <code>git stash -p</code> and use <code>?</code> to print the instructions.</li> </ul>"},{"location":"tech/software_engineering/git/#tags","title":"Tags","text":"<p>List the tags <pre><code>git tag\n</code></pre></p> <p>Get pull the tags <pre><code>git fetch\n</code></pre></p> <p>Add a tag <pre><code>git tag -a tag_name\ngit push origin tag_name\n</code></pre></p>"},{"location":"tech/software_engineering/git/#undo-things","title":"Undo Things","text":"<ul> <li>How to undo a commit (not pushed to remote) to unstagged? <code>git reset HEAD~</code></li> </ul> <ul> <li>Unstage a single file <code>git restore --staged my_file.py</code></li> </ul> <ul> <li>How to revert the last several commits? First you can use <code>git reset &lt;SHA1&gt;</code>  and <code>git push origin &lt;branch_name&gt; -f</code>. However, this is not recommended, since it lost the information of those commits in the commit history. You should use revert. If only revert one commit, just <code>git revert &lt;SHA&gt;</code>. This command will directly fire a new commit for you to reverse the changes. If multiple revert, use <code>git revert -n &lt;SHA&gt;</code> multiple times for different commits in the latest to the oldest order. <code>-n</code> means do not auto fire a commit for it. If the commit to be reverted is a merge commit, use <code>git revert -n &lt;SHA&gt; -m 1</code> to revert to the 1st branch or <code>-m 2</code> to revert to the second branch. Then make a commit. It can only revert the last changes, instead of jumping over some commits and revert the previous ones.</li> </ul> <ul> <li>How to revert commits in the middle of the history? If we have commit A B C D E, and you want to revert B and C. You first <code>git checkout -b &lt;new_branch_name&gt; &lt;SHA of A&gt;</code>. Then cherry-pick the commits from D to E with <code>git cherry-pick &lt;SHA of D&gt;..&lt;SHA of E&gt;</code>.</li> </ul> <ul> <li>how to delete a tag? <code>git tag -d [tag_name]</code> <code>git push origin :[tag_name]</code></li> </ul> <ul> <li>how to delete a release? click the release name. The delete button is on the top right.</li> </ul> <ul> <li>How to stash? We stash the uncommited changes and pull from remote and unstash them to apply. <code>git stash</code> <code>git stash pop</code></li> </ul>"},{"location":"tech/software_engineering/git/#clean-up","title":"Clean Up","text":"<p><code>rebase master -i</code></p>"},{"location":"tech/software_engineering/git/#sync-with-remote","title":"Sync with Remote","text":"<p>Force push the local changes.</p> <p><code>git push origin branch_name --force-with-lease</code></p> <p>Force pull.</p> <pre><code>git checkout branch_name\ngit fetch --all\ngit reset --hard origin/branch_name\n</code></pre>"},{"location":"tech/software_engineering/git/#across-branches","title":"Across Branches","text":""},{"location":"tech/software_engineering/git/#how-to-merge-two-branches","title":"How to merge two branches?","text":"<p>You can use git merge but not recommended. git rebase is more professional. For example, you are rebasing the master branch when you are on a feature branch. It would start from the current master branch head, and add the commits of your feature branch one by one to it. So that in the log of the current branch (feature) the commits from master would before the commits of the feature branch. If there is a conflict, it would stop and ask you to solve. You just solve it and git add the files with conflicts. and no commit is needed just use <code>git rebase --continue</code> to continue the rebase process. When push to the remote branch, it needs to use  <code>git push --force-with-release origin branch_name</code> .</p>"},{"location":"tech/software_engineering/git/#how-to-cherry-pick","title":"How to cherry-pick?","text":"<p>Just find the commit in other branch you need. And on the branch you want to add the commit, execute <code>git cherry-pick &lt;SHA&gt;</code>.</p>"},{"location":"tech/software_engineering/git/#working-on-a-branch-with-a-dependence-on-another-branch-that-is-being-reviewed","title":"Working on a branch with a dependence on another branch that is being reviewed","text":"<p>feature_b is created like this <code>git checkout feature_a</code> <code>git checkout -b feature_b</code></p> <p>update feature_b for the latest changes in feature_a <code>git checkout feature_b</code> <code>git rebase feature_a</code></p> <p>When feature_a has been merged into master, you simply get the new master and rebase feature_a onto it a last time: <code>git checkout master</code> <code>git pull origin master</code> <code>git checkout feature_b</code> <code>git rebase --onto master feature_a feature_b</code></p>"},{"location":"tech/software_engineering/git/#checkout-a-pull-request-branch-of-others-fork","title":"Checkout a pull request branch of other's fork","text":"<pre><code>$ git remote add theirusername git@github.com:theirusername/reponame.git\n$ git fetch theirusername\n$ git checkout -b mynamefortheirbranch theirusername/theirbranch\n</code></pre>"},{"location":"tech/software_engineering/guide_for_technical_development/","title":"Guide for Technical Development","text":"<p>Having a solid foundation in Computer Science is important to become a successful Software Engineer. This guide is a suggested path for university students to develop their technical skills academically and non-academically through self paced hands-on learning. You may use this guide to determine courses to take, but please make sure you are taking courses required for your major in order to graduate. The online resources provided in this guide are not meant to replace courses available at your university. However, they may help supplement your learning or provide an introduction to a topic.</p> <p>Using this guide:</p> <ul> <li>Please use this guide at your discretion</li> <li>There may be other things you want to learn or do outside of this guide - go for it!</li> <li>Checking off all items in this guide does not guarantee a job at Google</li> <li>This guide will evolve or change - check back for updates Follow our Google for Students +Page to get additional tips, resources, and other students interested in development.</li> </ul>"},{"location":"tech/software_engineering/guide_for_technical_development/#recommendations-for-academic-learnings","title":"Recommendations for Academic Learnings","text":"<ul> <li>Introduction to CS Course</li> </ul> <ul> <li>Take Introduction to Computer Science courses that provide basic instructions on coding.</li> </ul> <ul> <li>Online resources: Udacity - intro to CS course, Coursera - Computer Science 101</li> </ul> <ul> <li>Code in at least one object oriented programming language: C++, Java, or Python</li> </ul> <ul> <li>Beginner Online Resources: Coursera - Learn to Program: The Fundamentals, MIT Intro to Programming in Java, Google's Python Class, Coursera - Introduction to Python, Python Open Source E-Book</li> </ul> <ul> <li>Intermediate Online Resources: Udacity's Design of Computer Programs, Coursera - Learn to Program: Crafting Quality Code, Coursera - Programming Languages, Brown University - Introduction to Programming Languages</li> </ul> <ul> <li>Learn other Programming Languages</li> </ul> <ul> <li>Notes: Add to your repertoire - JavaScript, CSS &amp; HTML; Ruby; PHP; C; Perl; shell script; Lisp and Scheme.</li> </ul> <ul> <li>Online Resources: w3school.com - HTML Tutorial, Codecademy, Udacity - Mobile Web Development, Udacity - HTML5 Game Development</li> </ul> <ul> <li>Test Your Code</li> </ul> <ul> <li>Notes: Learn how to catch bugs, create tests, and break your software</li> </ul> <ul> <li>Online Resources: Udacity - Software Testing Methods, Udacity - Software Debugging</li> </ul> <ul> <li>Develop logical reasoning and knowledge of discrete math</li> </ul> <ul> <li>Online Resources: MIT Mathematics for Computer Science, Coursera - Introduction to Logic, Coursera - Linear and Discrete Optimization, Coursera - Probabilistic Graphical Models, Coursera - Game Theory</li> </ul> <ul> <li>Develop strong understanding of Algorithms and Data Structures</li> </ul> <ul> <li>Notes: Learn about fundamental data types (stack, queues, and bags), sorting algorithms (quicksort, mergesort, heapsort), data structures (binary search trees, red-black trees, hash tables), and Big O.</li> </ul> <ul> <li>Online Resources: MIT Introduction to Algorithms, Coursera Introduction to Algorithms Part 1 &amp; Part 2, List of Algorithms, List of Data Structures, Book: The Algorithm Design Manual</li> </ul> <ul> <li>Develop a strong knowledge of operating systems</li> </ul> <ul> <li>Online Resources: UC Berkeley Computer Science 162</li> </ul> <ul> <li>Learn UX Design</li> </ul> <ul> <li>Online Resources: Udacity - UX Design for Mobile Developers</li> </ul> <ul> <li>Learn Artificial Intelligence</li> </ul> <ul> <li>Online Resources: Stanford University - Introduction to Robotics, Natural Language Processing, Machine Learning</li> </ul> <ul> <li>Learn how to build compilers</li> </ul> <ul> <li>Online Resources: Coursera - Compilers</li> </ul> <ul> <li>Learn cryptography</li> </ul> <ul> <li>Online Resources: Coursera - Cryptography, Udacity - Applied Cryptography</li> </ul> <ul> <li>Learn Parallel Programming</li> </ul> <ul> <li>Online Resources: Coursera - Heterogeneous Parallel Programming</li> </ul> <ul> <li>Work on project outside of the classroom.</li> </ul> <ul> <li>Notes: Create and maintain a website, build your own server, or build a robot.</li> </ul> <ul> <li>Online Resources: Apache List of Projects, Google Summer of Code, Google Developer Group</li> </ul> <ul> <li>Work on a small piece of a large system (codebase), read and understand existing code, track down documentation, and debug things.</li> </ul> <ul> <li>Notes: GitHub is a great way to read other people\u2019s code or contribute to a project.</li> </ul> <ul> <li>Online Resources: GitHub, Kiln</li> </ul> <ul> <li>Work on project with other programmers.</li> </ul> <ul> <li>Notes: This will help you improve your ability to work well in a team and enable you to learn from others.</li> </ul> <ul> <li>Practice your algorithmic knowledge and coding skills</li> </ul> <ul> <li>Notes: Practice your algorithmic knowledge through coding competitions like CodeJam or ACM\u2019s International Collegiate Programming Contest.</li> </ul> <ul> <li>Online Resources: CodeJam, ACM ICPC</li> </ul> <ul> <li>Become a Teaching Assistant</li> </ul> <ul> <li>Helping to teach other students will help enhance your knowledge in the subject matter.</li> </ul> <ul> <li>Internship experience in software engineering</li> </ul> <ul> <li>Notes: Make sure you apply for internships well in advance of the period internships take place. In the US, internships take place during the summer, May-September. Applications are usually accepted several months in advance.</li> </ul> <p>https://www.google.com/about/careers/students/guide-to-technical-development.html</p>"},{"location":"tech/software_engineering/guide_for_technical_development/#techsoftware-engineering","title":"tech/software engineering","text":""},{"location":"tech/software_engineering/java_log_best_practices/","title":"Java Log Best Practices","text":"<p>What do I mean? There are lots of Java logging frameworks and libraries out there, and most developers use one or more of them every day. Two of the most common examples for Java developers are log4j and logback. They are simple and easy to use and work great for developers. Basic java log files are just not enough, though, but we have some Java best practices and tips to help you make the most of them!</p> <p>Have you ever had to work with your log files once your application left development? If so, you quickly run into a few pain points.</p> <ul> <li>There\u2019s a lot more data.</li> <li>You have to get access to the data.</li> <li>It\u2019s spread across multiple servers.</li> <li>A specific operation may be spread across applications \u2013 so even more logs to dig through.</li> <li>It\u2019s flat and hard to query; even if you do put it in SQL, you are going to have to do full-text indexing to make it usable.</li> <li>It\u2019s hard to read; messages are scrambled like spaghetti.</li> <li>You generally don\u2019t have any context of the user, etc.</li> <li>You probably lack some details that would be helpful. (You mean \u201clog.Info(\u2018In the method\u2019)\u201d isn\u2019t helpful???)</li> <li>You will be managing log file rotation and retention. Additionally, you have all this rich data about your app that is being generated and you simply aren\u2019t proactively putting it to work.</li> </ul>"},{"location":"tech/software_engineering/java_log_best_practices/#its-time-to-get-serious-about-logging","title":"It\u2019s Time to Get Serious About Logging","text":"<p>Once you\u2019re working on an application that is not running on your desktop, logging messages (including exceptions) are usually your only lifeline to quickly discovering why something in your app isn\u2019t working correctly. Sure, APM tools can alert you to memory leaks and performance bottlenecks, but generally lack enough detail to help you solve a specific problem, i.e. why can\u2019t this user log in, or why isn\u2019t this record processing?</p> <p>At Stackify, we\u2019ve built a \u201cculture of logging\u201d which set out to accomplish these goals:</p> <ol> <li>Log all the things. Log as much as we possibly can, to always have relevant, contextual logs that don\u2019t add overhead.</li> <li>Work smarter, not harder. Consolidate and aggregate all of our logging to a central location, available to all devs, and easy to distil. Also, to find new ways for our logging and exception data to help us proactively improve our product.</li> </ol> <p>In this post, we\u2019ll explore these best practices, and share what we\u2019ve done to address it, much of which has become a part of Stackify\u2019s log management product. Also, if you haven\u2019t used Prefix to view your logs, be sure to check it out!</p>"},{"location":"tech/software_engineering/java_log_best_practices/#start-logging-all-the-things","title":"Start Logging All the Things!","text":"<p>I\u2019ve worked in a lot of shops where log messages looked like this:</p> <p> I\u2019ll give the developer credit; at least they are using a try/catch and handling the exception. The exception will likely have a stack trace so I know roughly where it came from, but no other context is logged.</p> <p>Sometimes, they even do some more proactive logging, like this:</p> <p> But generally, statements like that don\u2019t go a long way towards letting you know what\u2019s really happening in your app. If you\u2019re tasked with troubleshooting an error in production, and/or it is happening for just one (or a subset) of the application users, this doesn\u2019t leave you with a lot to go on, especially when considering your log statement could be a needle in a haystack in an app with lots of use.</p> <p>As I mentioned earlier, logging is often one of the few lifelines you have in production environments where you can\u2019t physically attach and debug. You want to log as much relevant, contextual data as you can. Here are our guiding principles on doing that.</p>"},{"location":"tech/software_engineering/java_log_best_practices/#walk-the-code","title":"Walk the Code","text":"<p>Let\u2019s pretend that you have a process that you want to add logging around so that you can look at what happened. You could just put a try / catch around the entire thing and handle the exceptions (which you should) but it doesn\u2019t tell you much about what was passed into the request. Take a look at the following, oversimplified example.</p> <pre><code>public class Foo {\n\n    private int id;\n\n    private double value;\n\n    public Foo(int id, double value) {\n     this.id = id;\n     this.value = value;\n    }\n\n    public int getId() {\n     return id;\n    }\n\n    public double getValue() {\n     return value;\n    }\n\n}\n</code></pre> <p>Take the following factory method, which creates a Foo. Note how I\u2019ve opened the door for error \u2013 the method takes a Double as an input parameter. I call doubleValue() but don\u2019t check for null. This could cause an exception.</p> <pre><code>public class FooFactory {\n\n    public static Foo createFoo(int id, Double value) {\n     return new Foo(id, value.doubleValue());\n    }\n\n}\n</code></pre> <p>This is a simple scenario, but it serves the purpose well. Assuming this is a really critical aspect of my Java app (can\u2019t have any failed Foos!) let\u2019s add some basic logging so we know what\u2019s going on.</p> <pre><code>public class FooFactory {\n\n    private static Logger LOGGER = LoggerFactory.getLogger(FooFactory.class);\n\n    public static Foo createFoo(int id, Double value) {\n\n     LOGGER.debug(\"Creating a Foo\");\n\n     try {\n         Foo foo = new Foo(id, value.doubleValue());\n\n         LOGGER.debug(\"{}\", foo);\n\n         return foo;\n\n     } catch (Exception e) {\n         LOGGER.error(e.getMessage(), e);\n     }\n\n     return null;\n    }\n\n}\n</code></pre> <p>Now, let\u2019s create two foos; one that is valid and one that is not:</p> <pre><code>FooFactory.createFoo(1, Double.valueOf(33.0));\n    FooFactory.createFoo(2, null);\n</code></pre> <p>And now we can see some logging, and it looks like this:</p> <pre><code>2017-02-15 17:01:04,842 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo\n2017-02-15 17:01:04,848 [main] DEBUG com.stackifytest.logging.FooFactory: com.stackifytest.logging.Foo@5d22bbb7\n2017-02-15 17:01:04,849 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo\n2017-02-15 17:01:04,851 [main] ERROR com.stackifytest.logging.FooFactory:\njava.lang.NullPointerException\n    at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15)\n    at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11)\n</code></pre> <p>Now we have some logging \u2013 we know when Foo objects are created, and when they fail to create in createFoo(). But we are missing some context that would help. The default toString() implementation doesn\u2019t build any data about the members of the object. We have some options here, but let\u2019s have the IDE generate an implementation for us.</p> <pre><code>@Override\n    public String toString() {\n     return \"Foo [id=\" + id + \", value=\" + value + \"]\";\n    }\n</code></pre> <p>Run our test again:</p> <pre><code>2017-02-15 17:13:06,032 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo\n2017-02-15 17:13:06,041 [main] DEBUG com.stackifytest.logging.FooFactory: Foo [id=1, value=33.0]\n2017-02-15 17:13:06,041 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo\n2017-02-15 17:13:06,043 [main] ERROR com.stackifytest.logging.FooFactory:\njava.lang.NullPointerException\n    at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15)\n    at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11)\n</code></pre> <p>Much better! Now we can see the object that was logged as \u201c[id=, value=]\u201d. Another option you have for toString is to use Javas\u2019 reflection capabilities. The main benefit here is that you don\u2019t have to modify the toString method when you add or remove members. Here is an example using Google\u2019s Gson library. Now, let\u2019s look at the output:</p> <pre><code>2017-02-15 17:22:55,584 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo\n2017-02-15 17:22:55,751 [main] DEBUG com.stackifytest.logging.FooFactory: {\"id\":1,\"value\":33.0}\n2017-02-15 17:22:55,754 [main] DEBUG com.stackifytest.logging.FooFactory: Creating a Foo\n2017-02-15 17:22:55,760 [main] ERROR com.stackifytest.logging.FooFactory:\njava.lang.NullPointerException\n    at com.stackifytest.logging.FooFactory.createFoo(FooFactory.java:15)\n    at com.stackifytest.logging.FooFactoryTest.test(FooFactoryTest.java:11)\n</code></pre> <p>When you log objects as JSON and use Stackify\u2019s Retrace tool, you can get some nice details like this:</p> <p> Retrace Logging Dashboard JSON Viewer</p>"},{"location":"tech/software_engineering/java_log_best_practices/#logging-more-details-with-diagnostic-contexts","title":"Logging More Details with Diagnostic Contexts","text":"<p>And this brings us to one last point on logging more details: diagnostic context logging. When it comes to debugging a production issue, you might have the \u201cCreating a Foo\u201d message thousands of times in your logs, but with no clue who the logged in user was that created it. Know who the user was is the sort of context that is priceless in being able to quickly resolve an issue. Think about what other detail might be useful \u2013 for example, HttpWebRequest details. But who wants to have to remember to log it every time? Diagnostic context logging to the rescue, specifically the mapped diagnostic context. Read more about SLF4J\u2019s MDC here: https://logback.qos.ch/manual/mdc.html.</p> <p>The easiest way to add context items to your logging is usually a servlet filter. For this example, let\u2019s create a servlet filter that generates a transaction id and attaches it to the MDC.</p> <pre><code>public class LogContextFilter implements Filter {\n\n    public void init(FilterConfig config) {\n    }\n\n    public void destroy() {\n    }\n\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {\n\n     String transactionId = UUID.randomUUID().toString();\n\n     MDC.put(\"TRANS_ID\", transactionId);\n\n     try {\n         chain.doFilter(request, response);\n     }\n     finally {\n         MDC.clear();\n     }\n    }\n\n}\n</code></pre> <p>Now, we can see some log statements like this:</p> <p> More context. We can now trace all log statements from a single request.</p> <p>This brings us to the next topic, which is Work Harder, Not Smarter. But before that, I\u2019m going to address a question I\u2019m sure to hear a lot of in the comments: \u201cBut if I log everything won\u2019t that create overhead, unnecessary chatter, and huge log files?\u201d My answer comes in a couple of parts: first, use the logging verbosity levels. you can LOGGER.debug() everything you think you\u2019ll need, and then set your config for production appropriately, i.e. Warning and above only. When you do need the debug info, it\u2019s only changing a config file and not redeploying code. Second, if you\u2019re logging in an async, non-blocking way, then overhead should be low. Last, if you\u2019re worried about space and log file rotation, there are smarter ways to do it, and we\u2019ll talk about that in the next section.</p>"},{"location":"tech/software_engineering/java_log_best_practices/#work-smarter-not-harder","title":"Work Smarter, Not Harder","text":"<p>Now that we\u2019re logging everything, and it\u2019s providing more contextual data, we\u2019re going to look at the next part of the equation. As I\u2019ve mentioned, and demonstrated, just dumping all of this out to flat files still doesn\u2019t help you out a lot in a large, complex application and environment. Factor in thousands of requests, files spanning multiple days, weeks, or longer, and across multiple servers, you have to consider how you are going to quickly find the data that you need.</p> <p>What we all really need is a solution that provides:</p> <ul> <li>Aggregates all Log &amp; Exception data to one place</li> <li>Makes it available, instantly, to everyone on your team</li> <li>Presents a timeline of logging throughout your entire stack/infrastructure</li> <li>Is highly indexed and searchable by being in a  structured format This is the part where I tell you about Stackify Retrace. As we sought to improve our own abilities to quickly and efficiently work with our log data, we decided to make it a core part of our product (yes, we use Stackify to monitor Stackify) and share with our customers, since we believe it\u2019s an issue central to application troubleshooting.</li> </ul> <p>First, we realize that lots of developers already have logging in place, and aren\u2019t going to want to take a lot of time to rip that code out and put new code in. That\u2019s why we\u2019ve created logging appenders for the most common Java logging frameworks.</p> <p>Continuing with log4j as a sample, the setup is easy. Just add the Stackify appender to your project\u2019s maven pom file.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;com.stackify&lt;/groupId&gt;\n   &lt;artifactId&gt;stackify-log-log4j12&lt;/artifactId&gt;\n   &lt;version&gt;1.1.9&lt;/version&gt;\n   &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Also, add in some configuration for the Stackify appender to your logging.properties file.</p> <pre><code>log4j.rootLogger=DEBUG, CONSOLE, STACKIFY\n\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d [%t] %-5p %c: %m%n\n\nlog4j.appender.STACKIFY=com.stackify.log.log4j12.StackifyLogAppender\nlog4j.appender.STACKIFY.apiKey=[HIDDEN]\nlog4j.appender.STACKIFY.application=test-logging\nlog4j.appender.STACKIFY.environment=test\n</code></pre> <p>As you can see, if you\u2019re already using a different appender, you can keep it in place and put them side-by-side. Now that you\u2019ve got your logs streaming to Stackify we can take a look at the logging dashboard. (By the way, if our monitoring agent is installed, you can also send Syslog entries to Stackify as well!)</p> <p> This dashboard shows a consolidated stream of log data, coming from all your servers and apps, presented in a timeline. From here, you can quickly</p> <ul> <li>View logs based on a range of time</li> <li>Filter for specific servers, apps, or environments Plus there are a couple of really great usability things built in. One of the first things you\u2019ll notice is that chart at the top. It\u2019s a great way to quickly \u201ctriage\u201d your application. The blue line indicates the rate of log messages, and the red bars indicate # of exceptions being logged.</li> </ul> <p>It\u2019s clear that a few minutes ago, my web app started having a lot more consistent activity but more importantly, we started getting more exceptions about the same time. Exceptions don\u2019t come without overhead for your CPU and memory, and they also can have a direct impact on user satisfaction, which can cost real money.</p> <p>By zooming in on the chart to this time period, I can quickly filter my log detail down to that time range and take a look at the logs for that period of time.</p> <p></p>"},{"location":"tech/software_engineering/java_log_best_practices/#searching-your-logs","title":"Searching Your Logs","text":"<p>Do you see that blue text below that looks like a JSON object?</p> <p> Well, it is a JSON object. That\u2019s the result of logging objects, and adding context properties earlier. It looks a lot nicer than plain text in a flat file, doesn\u2019t it? Well, it gets even more awesome. See the search box at the top of the page? I can put in any search string that I can think of, and it will query all my logs as if it were a flat file. As we discussed earlier, however, this isn\u2019t great because you could end up with a lot more matches than you want. Suppose that I want to search for all objects with an id of 5. Fortunately, our log aggregator is smart enough to help in this situation. That\u2019s because when we find serialized objects in logs, we index each and every field we find. That makes it easy to perform a search like this:</p> <pre><code>json.idNumber:5.0\n</code></pre> <p>That search yields the following results:</p> <p> Want to know what else you can search by? Just click on the document icon when you hover over a log record, and you\u2019ll see all the fields that Stackify indexes. Being able to get more value out of your logs and search by all the fields is called structured logging.</p> <p></p>"},{"location":"tech/software_engineering/java_log_best_practices/#exploring-java-exception-details","title":"Exploring Java  Exception Details","text":"<p>You may have also noticed this little red bug icon (  ) next to exception messages. That\u2019s because we treat exceptions differently by automatically showing more context. Click on it and we present a deeper view of that exception.</p> <p> Our libraries not only grab the full stack trace, but all of the web request details, including headers, query strings, and server variables, when available. In this modal, there is a \u201cLogs\u201d tab which gives you a pre-filtered view of the logging from the app that threw the error, on the server where it occurred, for a narrow time window before and after the exception, to give more context around the exception. Curious about how common or frequent this error occurs, or want to see details on other occurrences? Click the \u201cView All Occurrences\u201d button and voila!</p> <p> I can quickly see this error has occurred 60 times over the last hour. Errors and logs are closely related, and in an app where a tremendous amount of logging can occur, exceptions could sometimes get a bit lost in the noise. That\u2019s why we\u2019ve built an Errors Dashboard as well, to give you this same consolidated view but limited to exceptions.</p> <p> Here I can see a couple of great pieces of data:</p> <ul> <li>I\u2019ve had an uptick in my rate of exceptions over the past few minutes.</li> <li>The majority of my errors are coming from my \u201ctest\u201d environment \u2013 to the tune of about 84 per hour.</li> <li>I have a couple of new errors that have just started occurring (as indicated by the red triangles). Have you ever put a new release of your app out to production and wondered what QA missed? (Not that I\u2019m saying QA would ever miss a bug\u2026\u2026) Error Dashboard to the rescue. You can watch real time and see a trend \u2013 lots of red triangles, lots of new bugs. Big spike in the graph? Perhaps you have an increase in usage, so a previously known error is being hit more; perhaps some buggy code (like a leaking SQL connection pool) went out and is causing a higher rate of SQL timeout errors than normal.</li> </ul> <p>It\u2019s not hard to imagine a lot of different scenarios for which this could provide early warning and detection. Hmm. Early warning and detection. That brings up another great topic.</p>"},{"location":"tech/software_engineering/java_log_best_practices/#monitor","title":"Monitor","text":"<p>Wouldn\u2019t it be nice to be alerted when</p> <ul> <li>An error rate for a specific app or environment suddenly increases?</li> <li>An error that was specifically resolved starts happening again?</li> <li>A certain action that you log does not happen enough, too often, etc? Stackify can do all of that. Let\u2019s take a look at each.</li> </ul>"},{"location":"tech/software_engineering/java_log_best_practices/#error-rates","title":"Error Rates","text":"<p>When we looked at the error dashboard, I noted that my \u2018test\u2019 environment is getting a high number of errors per hour. From the Error dashboard, click on \u201cError Rates\u201d and then select which app/environment you wish to configure alerts for:</p> <p> I can configure monitors for \u201cErrors/Minute\u201d and \u201cTotal Errors Last 60 minutes\u201d and then choose the \u201cNotifications\u201d tab to specify who should be alerted, and how. Subsequently, if using Stackify Monitoring, I can configure all of my other alerting here as well: App running state, memory usage, performance counters, custom metrics, ping checks, and more.</p>"},{"location":"tech/software_engineering/java_log_best_practices/#resolved-errors-new-errors","title":"Resolved Errors &amp; New Errors","text":"<p>Earlier on, I introduced a new error by not checking for null values when creating Foo objects. I\u2019ve since fixed that and confirmed it by looking at the details for that particular error. As you can see, the last time it happened was 12 minutes ago:</p> <p> It was a silly mistake, but one that is easy to make. I\u2019m going to mark this one as \u201cresolved\u201d which lets me do something really cool: get an alert if it comes back. The Notifications menu will let me check my configuration, and by default, I\u2019m set to receive both new and regressed error notifications for all my apps and environments.</p> <p> Now, if the same error occurs again in the future, I\u2019m going to get an email about the regression and it shows up on the dashboard as such. This is a great little bit of automation to help out when you \u201cthink\u201d you\u2019ve solved the issue and want to make sure.</p>"},{"location":"tech/software_engineering/java_log_best_practices/#log-monitors","title":"Log Monitors","text":"<p>Some things aren\u2019t very straightforward to monitor. Perhaps you have a critical process that runs asynchronously and the only record of its success (or failure) is logging statements. Earlier in this post, I showed the ability to run deep queries against your structured log data, and any of those queries can be saved and monitored. I\u2019ve got a very simple scenario here: my query is executed every minute, and we can monitor how many matching records we have.</p> <p> It\u2019s just a great simple way to check system health if a log file is your only indication.</p>"},{"location":"tech/software_engineering/java_log_best_practices/#java-logging-best-practices","title":"Java Logging Best Practices","text":"<p>All of this error and log data can be invaluable, especially when you take a step back and look at a slightly larger picture. Below is the Application Dashboard for a Java web app that contains all of the monitoring:</p> <p> As you can see, you get some great contextual data at a glance that errors and logs contribute to: Satisfaction and HTTP Error Rate. You can see that user satisfaction is high and the HTTP error rate is low. You can quickly start drilling down to see which pages might not be performing well, and what errors are occurring:</p> <p> There was a lot to cover in this post, and I feel like I barely scratched the surface. If you dig a little deeper or even get your hands on it, you can! I hope that these Java logging best practices will help you write better logs and save time troubleshooting.</p> <p>All of our Java logging appenders are available on GitHub and you can  sign up for a free trial to get started with Stackify today!</p> <p>Java Best Practices for Smarter Application Logging &amp; Exception Handling</p>"},{"location":"tech/software_engineering/management/","title":"Management","text":""},{"location":"tech/software_engineering/management/#conways-law","title":"Conway's Law","text":"<p>Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</p> <p>\u2014\u2009Melvin E. Conway</p>"},{"location":"tech/software_engineering/management/#agile","title":"Agile","text":"<p>Agile software development is a set of principles for software development in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, and continuous improvement, and it encourages rapid and flexible response to change. Agile itself has never defined any specific methods to achieve this, but many have grown up as a result and have been recognized as being 'Agile'.</p> <p>The big task is divided into sub-tasks hierarchically. Each small task is called a \"ticket\", which has an \"assignee\" and a \"report to\". The task can have several stages from its open to close, which are \"in progress\", \"code review\", \"test\", \"demo\". If it is blocked by some issue during the development, you can put it onto \"blocked by\" status. But it needs another ticket to specify what issue blocked it. It can be an existing ticket or a new one.</p> <p>Each ticket has a certain number of story points proportion to its workload. One story point usually means the workload of one workday. We are assigning the tickets to people every two weeks on the first Monday's meeting called \"sprint planning\". We call every such two weeks a \"sprint\" too. Each person got 6 to 7 sprints every two weeks. We also check how every ticket going of the last two weeks during the \"sprint planning\".</p> <p>We have \"stand up meeting\" (SDU) for short every Tuesday and Thursday afternoon to see if anyone's task is blocked by anything.</p> <p>Every three month is a program increment (PI) which require all teams to release their new version of product. Each PI consist of 12 sprints and some buffer weeks.</p> <p>Before each PI begins, a big room planning is held, in which each department will create all the tickets for the next PI. They work together to assign tickets to each other.</p> <p>Each ticket should be specific about how we evaluate it and how can it be count as ended.</p> <p>This agile management method is called SAFe. </p>"},{"location":"tech/software_engineering/management/#techsoftware-engineering","title":"tech/software engineering#","text":""},{"location":"tech/software_engineering/python/","title":"Python","text":""},{"location":"tech/software_engineering/python/#data-model","title":"Data Model","text":"<ul> <li><code>collections.namedtuple</code> is for classes only with attributes, which is similar to <code>struct</code> in C++.</li> <li><code>__getitem__(self, position)</code> overrides the <code>[]</code> operator.</li> <li><code>__len__</code>'s return value is used as the return value for <code>len(...)</code>.</li> </ul> <pre><code>import collections\n\nCard = collections.namedtuple('Card', ['rank', 'suit'])\n\nclass FrenchDeck(object):\n    ranks = [str(n) for n in range(2, 11)] + list('JQKA')\n    suits = 'spades diamonds clubs hearts'.split()\n\n    def __init__(self):\n        self._cards = [Card(rank, suit) for suit in self.suits\n                                        for rank in self.ranks]\n\n    def __len__(self):\n        return len(self._cards)\n\n    def __getitem__(self, position):\n        return self._cards[position]\n</code></pre> <pre><code>&gt;&gt;&gt; deck = FrenchDeck()\n&gt;&gt;&gt; len(deck)\n52\n&gt;&gt;&gt; deck[0]\nCard(rank='2', suit='spades')\n</code></pre>"},{"location":"tech/software_engineering/python/#data-structures","title":"Data Structures","text":"<ul> <li>dictionary.pop(key[, default]) <pre><code>a = {'name': 'alice'}\nprint(a.pop('name', 'bob'))\n# alice\na = {}\nprint(a.pop('name', 'bob'))\n# alice\n</code></pre></li> </ul> <ul> <li><code>my_dict.setdefault(key, []).append(new_value)</code> \u2026is the same as running\u2026 <pre><code>if key not in my_dict:\n    my_dict[key] = []\n    my_dict[key].append(new_value)\n</code></pre></li> </ul> <p>\u2026except that the latter code performs at least two searches for key\u2014three if it\u2019s not found\u2014while setdefault does it all with a single lookup.</p>"},{"location":"tech/software_engineering/python/#decorators","title":"Decorators","text":"<p>Decorator <code>deco</code> is implemented as a function <code>deco</code> that returns a function <code>inner</code>. If <code>target</code> is decorated with <code>@deco</code>, then <code>inner</code> will be executed instead of <code>target</code>, when <code>target</code> is called.</p> <p>Following is an easy example.</p> <pre><code>&gt;&gt;&gt; def deco(func):\n...     def inner():\n...         print('running inner()')\n...     return inner\n...\n&gt;&gt;&gt; @deco\n... def target():\n...     print('running target()')\n...\n&gt;&gt;&gt; target()\nrunning inner()\n&gt;&gt;&gt; target\n&lt;function deco.&lt;locals&gt;.inner at 0x10063b598&gt;\n</code></pre> <p>The decorator functions, for example, the <code>deco</code> function in the example above, are run at import time instead of when calling <code>target</code>.</p>"},{"location":"tech/software_engineering/python/#design-patterns","title":"Design Patterns","text":"<ul> <li>Functions can be treat as objects in Python.</li> <li>The strategy pattern and command pattern can be simplified. Whenever, there are multiple classes implementing the same interface to override a single function, we can simplify these classes into functions and pass them around.</li> </ul>"},{"location":"tech/software_engineering/python/#rewriting-strategy-pattern","title":"Rewriting Strategy Pattern","text":"<p>The following code is to get the best promotion on the given order with function <code>best_promo</code>. The decorator <code>@promotion</code> will register all these promo functions at the import time to the global variable <code>promos</code>.</p> <p>There are 2 things optimized here. * The promo functions can just be functions instead of classes implementing the same interface. * We don't need to mannually construct the <code>promos</code> list. Otherwise, everytime we have a new type of promo function, we will have to modify the code in two places, the implementation of the promofunction and the <code>promos</code> list.</p> <pre><code>promos = []  1\n\ndef promotion(promo_func):  2\n    promos.append(promo_func)\n    return promo_func\n\n@promotion  3\ndef fidelity(order):\n    \"\"\"5% discount for customers with 1000 or more fidelity points\"\"\"\n    return order.total() * .05 if order.customer.fidelity &gt;= 1000 else 0\n\n@promotion\ndef bulk_item(order):\n    \"\"\"10% discount for each LineItem with 20 or more units\"\"\"\n    discount = 0\n    for item in order.cart:\n        if item.quantity &gt;= 20:\n            discount += item.total() * .1\n    return discount\n\n@promotion\ndef large_order(order):\n    \"\"\"7% discount for orders with 10 or more distinct items\"\"\"\n    distinct_items = {item.product for item in order.cart}\n    if len(distinct_items) &gt;= 10:\n        return order.total() * .07\n    return 0\n\ndef best_promo(order):  4\n    \"\"\"Select best discount available\n    \"\"\"\n    return max(promo(order) for promo in promos)\n</code></pre>"},{"location":"tech/software_engineering/python/#scopes","title":"Scopes","text":"<p>The global variables are separated from local variables defined in functions. If you want to use an global variable in a function, you have to define it with <code>global variable_name</code>. Otherwise the following error would happen.</p> <pre><code>&gt;&gt;&gt; b = 6\n&gt;&gt;&gt; def f2(a):\n...     # global b\n...     print(a)\n...     print(b)\n...     b = 9\n...\n&gt;&gt;&gt; f2(3)\n3\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in f2\nUnboundLocalError: local variable 'b' referenced before assignment\n</code></pre> <p>We should uncomment the <code>global b</code> to make it correct. </p>"},{"location":"tech/software_engineering/python/#closure","title":"Closure","text":""},{"location":"tech/software_engineering/python/#pytest","title":"Pytest","text":"<ul> <li>pytest: Pytest Course - YouTube</li> <li>Mock classes You cannot directly mock a class, e.g. <code>class ClassA</code>, if it contains a line of <code>super(ClassA, self).__init__()</code> since <code>super</code> does not allow to be called with a mock object. So you have to mock the functions instead of the entire class. For example, <code>mock.patch('ClassA.__init__')</code>.</li> </ul> <ul> <li>Assert mocked function calls</li> </ul> <pre><code>import mock\n\n\n@mock.patch('ClassA.foo')\n@mock.patch('ClassA.bar')\ndef test_add_early_stopping(bar, foo): # Remember they are in reversed order in args.\n    ClassA.some_function_which_calls_foo_inside()\n    assert foo.called\n    foo.assert_called_with(x=1, y=2)\n\n    args, kwargs = foo.call_args_list[0]  # 0 means the first time that foo is called. 1 means the second time.\n    assert kwargs['x'] == 1\n\n    foo.return_value = mock.Mock()  # Change the return value of the mock object.\n</code></pre>"},{"location":"tech/software_engineering/python/#version-compatibility","title":"Version Compatibility","text":"<p>If some modules only work with certain versions of dependencies, we should enclose the <code>import</code> statement in a <code>try</code> clause.</p> <pre><code>try:\n    from .augment import HyperEfficientNet\nexcept ImportError:\n    HyperEfficientNet = None\n</code></pre>"},{"location":"tech/software_engineering/python/#python-best-practices","title":"Python Best Practices","text":"<ul> <li>Import modules instead of specific objects. If the name of the module conflicts with the variables in the current module, just use \"from .. import .. as ..\" to avoid it.</li> <li>Import one module per line.</li> <li>The constructors should always have docstring describing the Args.</li> <li>In long if statements, to line break, avoid using \"\\\", but use \"if (a and b and c)\" and directly line break after each \"and\".</li> <li>When override a method of the parent class, to avoid the duplication of the code, we can try to do the new things in the override functions and do the old things by calling the super function.</li> <li>When calling a function with many arguments, use the argument names to call to avoid errors.</li> <li>Although we can avoid duplicate code by using the kwargs in the subclass and pass it to super().init(), but we sometimes can explicitly list the args in the subclass for readability.</li> <li>If the subclass don't support all the args in the super().init(), we can remove the kwargs from the subclass and list all the supported ones explicitly.</li> <li>Two reasons to extract a function: code reuse, or readability.</li> <li>We don't really need requirements.txt when we have everything in setup.py. We can use  <code>pip install .</code>  to install the dependencies.</li> <li>In setup.py, we don't specify the version of a dependency package the feature we use from it exists in all versions. If the feature only exists later than a certain version, we just put \"&gt;=\" to specify the version. Using \"==\" is not a good practice since it may mess up the dependencies of other packages which depends on the same package.</li> <li>The comments to a if statement should be above it. The same for the else clause.</li> <li>To test if an exception is correctly thrown, assert 'This is broken' in str(context.exception).</li> </ul>"},{"location":"tech/software_engineering/refactor/","title":"Refactor","text":""},{"location":"tech/software_engineering/refactor/#techsoftware-engineering","title":"tech/software engineering","text":"<p>Day 1:</p> <p>Creating Instance: If the instance requires a lot of code to be created, do not create it using the constructor. The constructors should be short. Create it with a Creation method, which is a static method that returns an instance of the class.</p> <p>When there are multiple constructors that overlap each other, we should write a general purpose constructor. The general constructor should be called in other constructors by writing \"this(...)\" in the first line.</p> <p>Extracting methods: Local variables sometimes have the same use as a extracted function. The key factor deciding whether to use a local variable or extract a function is whether it would make the code more readable. Local variables should be final. Since it is not wise to change the value of a local variable. If you need to calculate a value in several steps, create temporary variables for each step, so that every variable name is meaningful as the assigned value to it.</p> <p>Day 2:</p> <p>Use exceptions for switch to make sure the arguments are legal. switch (a) { case ... case ... default: throw IllegalArgumentException(\"Invalid ...\"); }</p> <p>Use java reflection to do Factory design pattern. return (Customer) Class.forName(name).newInstance();</p> <p>Use java reflection to do Singleton design pattern when you have multiple classes are singleton. Class[] params = Class[]{String.class, Integer.class} Method method = Class.forName(singleton).getMethod(methodName, params}. method.invoke(null, new Object[]{\"\", 0}); http://www.newthinktank.com/2013/01/code-refactoring-5/</p> <p>Day 3:</p> <p>We can use the strategy pattern to extract a part of the class. If we have different salary strategies for different employees. Several types of employees may share the same salary strategy. The subclasses of Employee should not just override a function of calculateSalary(), but have a member of PayType which is an interface. Then we have different classes implementing the interface for different calculation for salaries. http://www.newthinktank.com/2013/01/code-refactoring-7/</p> <p>Template pattern is used to simplify the code for several classes has common operations, but some of them may omit some steps of the operations. http://www.newthinktank.com/2013/01/code-refactoring-8/</p> <p>If we have an instance of the subclass, call a function of the superclass g(). The superclass function g() call a override function f(). The f() would be the one in the subclass instead of in the super class. But if f() is not a function but a member int f, the superclass function g() can never access the int f in the subclass.</p> <p>Day 4:</p> <p>Composite pattern There should be an abstract class as the superclass for the leaf and normal nodes in the tree. http://www.newthinktank.com/2013/01/code-refactoring-9/</p> <p>Builder Pattern There is a Sandwich which has a lot of attributes. The Builder has a bunch of methods, each of which set one of the attributes. Builder is an abstract class. There should be different kinds of builder extending the Builder class. Each kind of builder is used to make a specific kind of sandwich. The subBuilder would implement the methods to set a specific value to the sandwich attributes. There should be an Artist class which calls the Builder's methods in order to make the sandwich. http://www.newthinktank.com/2013/01/code-refactoring-10/ </p> <p>The difference between Builder and Template is as follows. Builders are subclasses extending the sandwich builder class to set different values to variables in Sandwich. Templates need a bunch of subclasses of Sandwich each of which override the functions of Sandwich to set the values. In one word, Builder is for more complicated objects.</p> <p>There is also a way to use Builder pattern to build Composite pattern.</p> <p>Using builder pattern is also a way to decouple the unit tests from he constructor of the classes. The most typical case is like this. One class is representing one row of data in the database table, whose constructor takes all the parameters to fill in each column of the row. The database is subject to change. So the constructor is subject to change. If we use the constructor in unit tests, when we wanna change the database schema, it is not easy to do, because we need to change all the unit tests which used that class. In stead of using the constructor we should use builder pattern.</p> <p>The builder pattern can also return \"this\" for every set operation. http://www.javaworld.com/article/2074938/core-java/too-many-parameters-in-java-methods-part-3-builder-pattern.html http://rdafbn.blogspot.com/2012/07/step-builder-pattern_28.html This is also know as the step-builder.</p>"},{"location":"tech/software_engineering/uml/","title":"Unified Modeling Language","text":""},{"location":"tech/software_engineering/unit_testing/","title":"Unit Testing","text":"<p>Unit tests should be simple, readable, and behavior-driven. We want to achieve the following effect. Whenever a unit tests fails, the developer can directly tell what expected bahavior is not working from the test name. The developer can tell the test itself is correctly implemented at a glance.</p>"},{"location":"tech/software_engineering/unit_testing/#mockito","title":"Mockito","text":"<p>Car car = new Car(); car.manager = mock(Manager.class); when(manager.getServerPermission()).thenReturn(true); in startEngine() will call getServerPermission() car.startEngine(); veryfy(car.manager).getServerPermission(); car.setMiles(4); assert(4, car.getMiles());</p>"},{"location":"tech/software_engineering/unit_testing/#junit","title":"JUnit","text":"<p><pre><code>@Test(expected = IndexOutOfBoundsException.class) \npublic void empty() { \n     new ArrayList&lt;Object&gt;().get(0); \n}\n</code></pre> For DAO layer classes, we may want to create a super class or interface for it. When testing any other classes that calls DAO, we just mock the DAO by implementing its interface. How to test DAO layer: http://howtodoinjava.com/best-practices/how-you-should-unit-test-dao-layer/ A very good example involves mock and anonymous class: http://stackoverflow.com/questions/5577274/testing-java-sockets</p>"},{"location":"tech/software_engineering/c%2B%2B/absl/","title":"Abseil","text":"<p>The Abseil library is an open-source collection of C++ libraries developed and used extensively at Google. It's not a single, monolithic library but a set of utilities designed to augment and modernize the C++ standard library.</p>"},{"location":"tech/software_engineering/c%2B%2B/absl/#nullability","title":"Nullability","text":"<p>A lot of bugs are caused in C++ because of wrong handling of the null pointers. <code>absl_nullable</code> and <code>absl_nonnull</code> provides a way to annotate the pointers to be nullable or not.  When annotated, the compiler will warn when the pointers are used in a unsafe way.</p> <pre><code>// The annotation tells static analysis tools that 'data' is never null.\nvoid ProcessData(Data* absl_nonnull data) {\n  // We can immediately and safely use data without a null check.\n  data-&gt;DoSomething();\n}\n\n// Correct usage:\nData my_data;\nProcessData(&amp;my_data);\n\n// Incorrect usage:\nProcessData(nullptr); // Static analysis tools will flag this as an error.\n</code></pre> <pre><code>// The annotation tells us that 'error' might be null.\nvoid LogMessage(const std::string&amp; message, ErrorInfo* absl_nullable error) {\n  // The annotation reminds us to check for nullness.\n  if (error != nullptr) {\n    error-&gt;Log();\n  }\n  std::cout &lt;&lt; message &lt;&lt; std::endl;\n}\n\n// Correct usage:\nErrorInfo my_error;\nLogMessage(\"An error occurred.\", &amp;my_error);\nLogMessage(\"Everything is fine.\", nullptr); // Valid to pass nullptr.\n</code></pre> <pre><code>class DataProcessor {\npublic:\n  DataProcessor(Cache* absl_nullable cache) : cache_(cache) {}\n\n  void Process(const std::string&amp; key) {\n    if (cache_ != nullptr) {\n      // It's safe to check and use the cache if it exists.\n      if (cache_-&gt;Get(key)) {\n        // ... use cached data\n        return;\n      }\n    }\n    // ... calculate data and potentially add to cache\n  }\n\nprivate:\n  // The annotation indicates that a 'cache' is optional.\n  Cache* absl_nullable cache_;\n};\n</code></pre> <pre><code>class Dependency {};\n\nclass MyClass {\npublic:\n  // The constructor must ensure 'dependency_' is initialized with a valid object.\n  // Using a member initializer list is the standard and safest way.\n  MyClass(Dependency* absl_nonnull dep) : dependency_(dep) {}\n\n  void UseDependency() {\n    // We can safely dereference 'dependency_' without a null check.\n    dependency_-&gt;SomeMethod();\n  }\n\nprivate:\n  // The 'absl_nonnull' annotation ensures this pointer is always valid.\n  Dependency* absl_nonnull dependency_;\n};\n\n// ...\nDependency my_dep;\nMyClass my_object(&amp;my_dep); // This is correct.\n// MyClass another_object(nullptr); // Static analysis will flag this as an error.\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/absl/#status","title":"Status","text":"<p><code>StatusOr</code> provides an alternative way for error handling, other than throw. The developer must explicity checking if an error is returned from the function before using its value.</p> <pre><code>#include \"absl/status/status.h\"\n#include \"absl/status/statusor.h\"\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\n// A function that might succeed or fail.\nabsl::StatusOr&lt;std::string&gt; FindUserByID(int id) {\n  if (id == 123) {\n    return \"Alice\"; // Success: returns a string value.\n  }\n  // Failure: returns a status with an error code and message.\n  return absl::NotFoundError(\"User not found with the given ID.\");\n}\n\nint main() {\n  // --- Case 1: Successful operation ---\n  absl::StatusOr&lt;std::string&gt; success_result = FindUserByID(123);\n\n  // Use 'ok()' to check for success.\n  if (success_result.ok()) {\n    // If ok(), it's safe to access the value.\n    std::cout &lt;&lt; \"Success! Found user: \" &lt;&lt; success_result.value() &lt;&lt; std::endl;\n    // The dereference operator '*' also works.\n    std::cout &lt;&lt; \"Dereferencing gives: \" &lt;&lt; *success_result &lt;&lt; std::endl;\n  } else {\n    // This block won't be executed in this case.\n    std::cout &lt;&lt; \"Error: \" &lt;&lt; success_result.status().message() &lt;&lt; std::endl;\n  }\n\n  std::cout &lt;&lt; \"\\n----------------------------------\\n\" &lt;&lt; std::endl;\n\n  // --- Case 2: Failing operation ---\n  absl::StatusOr&lt;std::string&gt; failure_result = FindUserByID(456);\n\n  if (failure_result.ok()) {\n    // This block won't be executed in this case.\n    std::cout &lt;&lt; \"Success! Found user: \" &lt;&lt; failure_result.value() &lt;&lt; std::endl;\n  } else {\n    // If not ok(), get the error status.\n    std::cout &lt;&lt; \"Error! Status: \" &lt;&lt; failure_result.status() &lt;&lt; std::endl;\n  }\n\n  // A common, dangerous mistake is to access the value without checking ok().\n  // This line would crash the program if uncommented:\n  // std::cout &lt;&lt; \"Trying to access value directly: \" &lt;&lt; failure_result.value() &lt;&lt; std::endl;\n\n  return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/best_practice/","title":"Best Practices","text":"<p>This note is to put the knowledge we learned about C++ building to application. They are just some inferences from the knowledge.</p>"},{"location":"tech/software_engineering/c%2B%2B/best_practice/#do-not-define-non-inline-functions-in-headers","title":"Do not define non-inline functions in headers","text":"<p>Even with the header guards, it will still result in an error. For example, you have a file <code>a.h</code> with a function implementation of <code>int A()</code> within the header guard. And you have <code>a.cpp</code> and <code>b.cpp</code> both includes <code>a.h</code>. So, you will get two translation units for the <code>.cpp</code> files. Each of them would compile the function separately. So, if you ever need to link them into one executable, it results in an linking error because it violates the ODR.</p> <p>However, inline functions are OK since they do not remain a function as they are compiled, they are simply copy and pasted into the functions calling them.</p>"},{"location":"tech/software_engineering/c%2B%2B/best_practice/#do-not-use-unnamed-namespace-in-headers","title":"Do not use unnamed namespace in headers","text":"<p>Similarly, if you use unnamed namespace in headers, it will also be compiled multiple times. However, it will not results in an linking error because the functions in the unnamed namespace are only visible to the translation unit that uses it. However, if you ever want to use the variables in the namespace, you will face a problem. Every translation unit has its own version of the same variable. They do not share the same variable. So, it is bug-prone.</p>"},{"location":"tech/software_engineering/c%2B%2B/constexpr/","title":"The <code>constexpr</code> keyword","text":"<p>The <code>constexpr</code> keyword is to tell the compiler to compute the value of the constant variable at compile time instead of runtime.</p> <p>If it is a <code>constexpr</code> function, the return value of the function calls could be computed at compile time if all the args could be computed at compile time.</p> <p>Following are some examples.</p> <pre><code>#include &lt;iostream&gt;\n\nconstexpr int multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    // Computed at compile time.\n    constexpr int a = 10;\n    constexpr int b = 10 * 20;\n    constexpr int c = multiply(5, 10);\n    int d = multiply(5, 10);\n    int arr[multiply(2, 3)];\n\n    // Computed at runtime.\n    int user_num;\n    std::cin &gt;&gt; user_num;\n    int runtime_result = multiply(7, user_num);\n\n    // This would be an error, as the array size must be a compile-time constant\n    // int another_arr[multiply(4, user_num)]; // ERROR!\n\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/declaration_and_definition/","title":"Declaration and Definition","text":"<p>Declaration mark the existence of an entity (variable, function, struct, or class).</p> <p>Definition is the complete implementation of a function/struct/class, or memory allocation for a variable.</p> <p>An entity can be declared multiple times in multiple places but can only have one definition. This is called the One Definition Rule (ODR).</p> <p>We can even declare the same function in the same file multiple times.</p> <p>We often put only declarations in <code>.h</code> files and definitions in <code>.cpp</code> files. So, each <code>.cpp</code> file can include a lot of <code>.h</code> file without violating ODR since it only includes the declaration without definition.</p>"},{"location":"tech/software_engineering/c%2B%2B/declaration_and_definition/#class-and-struct","title":"Class and struct","text":"<p>One exception is struct/class definition. The full class definition (including all member declarations) is typically placed in a header file because the compiler needs to know the full layout and members of the class whenever an object of that class is created or its members are accessed.</p> <p>Here is an example of class declaration vs definition.</p> <pre><code>// declaration\nclass MyClass;\n\n// definition\nclass MyClass {\npublic:\n    void memberFunction();\nprivate:\n    int data;\n};\n</code></pre> <p>This is why we need the header guards to ensure they are not declared multiple times.</p>"},{"location":"tech/software_engineering/c%2B%2B/declaration_and_definition/#variable","title":"Variable","text":"<p>It is tricky to declara variables since their definition looks as simple as a declaration. So we have to use <code>extern</code> to mark it as a declaration refering to an external entity.</p> <p>Here is an example:</p> <pre><code>// declaration\nextern int globalCounter;\n// definition\nint globalCounter = 0;\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/deduction/","title":"Deduction","text":"<p>In C++, deduction refers to the process by which the compiler automatically determines the type of a variable, function template argument, or class template argument based on the context of its use. It saves you from explicitly specifying types, making code more concise and flexible.</p> <p>See the following example. The argument and the return type of a function can both be <code>auto</code>. And the template type is also a deduction.</p> <pre><code>// Function template with argument type deduction, and an 'auto' argument\ntemplate &lt;typename T&gt;\nauto process_data(const std::vector&lt;T&gt;&amp; data, auto operation) { // 'data' type deduced, 'operation' type is deduced\n    auto sum = T();\n\n    for (const auto&amp; item : data) {\n        sum += operation(item); // Apply the 'operation' to each item\n    }\n\n    return sum;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/forwarding_references/","title":"Forwarding References","text":"<p>We know rvalue references. The forwarding references is about passing lvalue to rvalue reference arguments.</p> <p>You have to use template even you only want to use it with int. This is a grammar requirement.</p> <p>The <code>std::forward&lt;T&gt;</code> would forward the type (lvalue or rvalue) to the function called. So, it routes to the corresponding overloaded function.</p> <pre><code>#include &lt;utility&gt; // For std::forward and std::move\n#include &lt;iostream&gt;\n\n// A template function using a forwarding reference\ntemplate &lt;typename T&gt;\nvoid wrapper_function(T&amp;&amp; arg) {\n    // std::forward maintains the original value category\n    // If arg was an lvalue, it's forwarded as an lvalue.\n    // If arg was an rvalue, it's forwarded as an rvalue.\n    some_other_function(std::forward&lt;T&gt;(arg));\n}\n\nvoid some_other_function(int&amp; lref) {\n    std::cout &lt;&lt; \"some_other_function called with lvalue reference: \" &lt;&lt; lref &lt;&lt; std::endl;\n}\n\nvoid some_other_function(int&amp;&amp; rref) {\n    std::cout &lt;&lt; \"some_other_function called with rvalue reference: \" &lt;&lt; rref &lt;&lt; std::endl;\n}\n\nint main() {\n    int a = 10;\n    wrapper_function(a);          // a is an lvalue, T deduces to int&amp;, T&amp;&amp; becomes int&amp;\n    wrapper_function(20);         // 20 is an rvalue, T deduces to int, T&amp;&amp; becomes int&amp;&amp;\n\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/header_guard/","title":"Header Guard","text":"<p>Here is an example of header guard:</p> <pre><code>// A.h\n#ifndef A_H\n#define A_H\n\n// Declaration of a function defined in A.cpp\nvoid functionInA();\n\n#endif // A_H\n</code></pre> <p>The <code>#ifndef</code>, <code>#define</code>, <code>#endif</code> are the header guard. It prevents the content in the header file being declared multiple times during the C++ build process.</p> <p>Note that header guard would not guard across mutiple translation units. The code inside the guard will be preprocessed and compiled in each translation unit.</p>"},{"location":"tech/software_engineering/c%2B%2B/header_vs_source/","title":"Header vs Source","text":"<p>In general only declarations should be put into the header files (<code>.h</code> files), the definitions should all go into source files (<code>.cpp</code> files). This is to obey the ODR. We want each translation unit to be aware of everything declared but not keep a separate copy of the object in memory. Then, they link to the same object.</p> <p>There are a few exceptions.</p>"},{"location":"tech/software_engineering/c%2B%2B/header_vs_source/#inline-functions","title":"Inline functions","text":"<p>They are not compiled as separate functions at compile time. They are just copied and pasted into the functions calling them. So, they have no declaration or definition. It is OK to have them in the header files.</p> <pre><code>// MyMath.h\n#pragma once\n\ninline int add(int a, int b) { // Defined directly in the header\n    return a + b;\n}\n</code></pre> <p>Some trivial member functions would also be implicitly converted to inline functions.</p> <pre><code>// Person.h\n#pragma once\n#include &lt;string&gt;\n\nclass Person {\nprivate:\n    std::string name;\npublic:\n    Person(const std::string&amp; n) : name(n) {}\n    const std::string&amp; getName() const { // Small function defined in header (implicitly inline)\n        return name;\n    }\n};\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/header_vs_source/#classtemplates","title":"Class/Templates","text":"<p>classes and templates are type definitions. They are typically kept in the headers. They have no linkage.</p> <p>Classes are typically defined in header files because at compile time, the compiler needs to know the member functions and variables to compile their usages in code.</p> <pre><code>#pragma once // Prevents multiple inclusions of the same header\n\nclass MyClass {\npublic:\n    int value; // Member variable declared\n\n    MyClass(int val); // Constructor declaration\n    void printValue(); // Member function declaration\n    void inlineFunc() { // Inline function defined directly in header\n        // Body here\n        value++;\n    }\n};\n</code></pre> <p>So, if you use <code>MyClass my_class; my_class.printValue();</code>, the compiler would have to know the <code>printValue()</code> function.  So, the header file has to have the definition instead of just a declaration of the class name.</p> <p>For templates, the compiler needs the entire definition of the class or the function to generate the code for that type when instantiated.</p> <p>See template for more details on how a template is compiled.</p> <pre><code>// MyContainer.h\n#pragma once\n\ntemplate &lt;typename T&gt;\nclass MyContainer {\npublic:\n    T value;\n    MyContainer(T val) : value(val) {}\n    void printValue() { // Template member function defined in header\n        // Implementation detail needs to be visible\n        std::cout &lt;&lt; \"Value: \" &lt;&lt; value &lt;&lt; std::endl;\n    }\n};\n\ntemplate &lt;typename T&gt;\nT getMax(T a, T b) { // Template function defined in header\n    return (a &gt; b) ? a : b;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/header_vs_source/#constantsenum","title":"Constants/Enum","text":"<p><code>const</code> variables with external linkage. If you have a const global variable that you want to be visible across multiple translation units, it's typically declared in a header. However, if it's not constexpr and not an integral type, it still needs a single definition in a .cpp file. But for simple integral consts, they can often be defined in the header.</p> <pre><code>// Config.h\n#pragma once\n\nclass Config {\npublic:\n    static const int MAX_USERS = 100; // Can be defined in header\n    enum Status { ACTIVE, INACTIVE };\n    static const Status DEFAULT_STATUS = ACTIVE; // Can be defined in header\n};\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/header_vs_source/#constexpr","title":"<code>constexpr</code>","text":"<p><code>constexpr</code> functions are functions that can be evaluated at compile time if their arguments are known at compile time.</p> <pre><code>// Constants.h\n#pragma once\n\nconstexpr int multiply(int x, int y) { // Defined in header for compile-time evaluation\n    return x * y;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/internal_vs_external_linkage/","title":"Internal vs External Linkage","text":"<p>This internal vs external linkage concept is referring to the translation unit at compile time. It describes if an entity has its own copy in a translation unit or link to one from another translation unit.</p> <p>If a function is declared in the header and implemented in the source file, it would create a external linkage.  Every translation unit gets the same copy of the function.</p> <p>If the function is defined directly in the header, it would create an internal linkage. Every translation unit would get a separate copy.</p> <p>There is also a concept called \"no linkage\".  For example, the local variables that no others can refer to.</p>"},{"location":"tech/software_engineering/c%2B%2B/lambda/","title":"Lambda functions","text":"<p>Basic grammar:</p> <pre><code>[capture_list](parameters) -&gt; return_type {\n    // function body\n}\n</code></pre> <p>Concrete example:</p> <pre><code>int x = 10;\nauto multiply_by_x = [x](int y) {\n    return x * y;\n};\nint result = multiply_by_x(5); // result will be 50 (10 * 5)\nx = 20; // Changing x here won't affect the captured x in the lambda\nint new_result = multiply_by_x(5); // new_result will still be 50\n</code></pre> <p><code>[x]</code> captures by value. If you use <code>[&amp;x]</code>, it would be captured by reference.</p> <p>If you use <code>[=]</code>, or <code>[&amp;]</code>, they will capture every automatic variable (variables with automatic storage duration, i.e., local variables, function parameters) by value or by reference.</p>"},{"location":"tech/software_engineering/c%2B%2B/lvalue_vs_rvalue/","title":"lvalue vs rvalue","text":"<p>The intuitive understanding is whether they can appear on the left side of the <code>=</code> sign. The more accurate definition is whether they have a persistent memory location. If they do, they are lvalue, otherwise, rvalue.</p> <p>Some examples of lvalues:</p> <ul> <li>Variables: <code>int x = 10;</code> (<code>x</code> is an lvalue)</li> <li>Dereferenced pointers: <code>*ptr</code></li> <li>Function calls (operator override) that return an lvalue reference: <code>std::cout &lt;&lt;</code></li> <li>Members of objects that are lvalues.</li> </ul> <p>Some examples of rvalues:</p> <ul> <li>Literals: <code>10</code>, <code>\"hello\"</code></li> <li>Temporary objects created by expressions: <code>x + y</code> (the result of the addition is a temporary rvalue)</li> <li>Function calls that return by value: <code>std::string func_returns_string()</code></li> <li><code>std::move</code>'s return value</li> </ul> <p>You can use <code>&amp;</code> for lvalue reference arguments, and <code>&amp;&amp;</code> for rvalue arguments. The following function overload is an example of how the compiler would route the calls to different functions.</p> <p>If you do not overload and only have one function, you can pass a rvalue to an lvalue reference without error, but not an lvalue to an rvalue reference.</p> <pre><code>void process(std::vector&lt;int&gt;&amp; vec) { }\n\nvoid process(std::vector&lt;int&gt;&amp;&amp; vec) { }\n\nint main() {\n    std::vector&lt;int&gt; my_vec = {1, 2, 3};\n    process(my_vec);                   // Calls process(std::vector&lt;int&gt;&amp;) - lvalue\n    process(std::vector&lt;int&gt;{4, 5, 6}); // Calls process(std::vector&lt;int&gt;&amp;&amp;) - rvalue (temporary object)\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/move_constructor/","title":"Move constructor","text":"<p>What it does is to copy the data and nullify the source. We mark it as <code>noexcept</code>, so that it would not fall back to the copy constructor of the vector. The move constructor is featured by the <code>&amp;&amp;</code> rvalue reference. When use <code>move</code>, it picks the correct constructor among others.</p> <pre><code>class MyVectorWrapper {\npublic:\n    // Move Constructor (Shallow Copy + Nullify Source)\n    MyVectorWrapper(MyVectorWrapper&amp;&amp; other) noexcept : data_(other.data_), size_(other.size_) {\n        std::cout &lt;&lt; \"Move Constructor: Moving \" &lt;&lt; size_ &lt;&lt; \" ints.\\n\";\n        other.data_ = nullptr; // Crucial: Nullify the source's pointer\n        other.size_ = 0;       // Crucial: Reset source's size\n    }\n\n\nprivate:\n    int* data_;\n    size_t size_;\n};\n\nint main() {\n    MyVectorWrapper moved_wrapper = std::move(original_wrapper); // Calls Move Constructor\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/nodiscard/","title":"The <code>nodiscard</code> keyword","text":""},{"location":"tech/software_engineering/c%2B%2B/noexcept/","title":"The <code>noexcept</code> keyword","text":"<p><code>noexcept</code> in C++ is a specifier that indicates whether a function is guaranteed not to throw an exception. If a function marked <code>noexcept</code> does throw an exception, the program's execution is immediately terminated by calling <code>std::terminate</code>.</p> <p>It would also change the behavior of the std containers, like <code>std::vector</code>. If you garantee there is no exception throw, the vector knows that it move process would not be interrupted to leave the vector in an corrupted status, it can do the move without making copies to prevent the corruption.</p> <p>This is why we want to use <code>noexcept</code> to the move contructor.</p>"},{"location":"tech/software_engineering/c%2B%2B/optional/","title":"The <code>optional</code> keyword","text":"<p>It can contain a value or nothing. The typical use cases are: * Function parameters. * Function return values. * Member variables.</p>"},{"location":"tech/software_engineering/c%2B%2B/optional/#function-parameters","title":"Function parameters","text":"<pre><code>void log(const std::string&amp; message, std::optional&lt;int&gt; severity) {\n    // has_value() checks if it has a value.\n    if (severity.has_value()) {\n        // Use the severity value.\n        std::cout &lt;&lt; \"[Severity \" &lt;&lt; severity.value() &lt;&lt; \"] \";\n    }\n    std::cout &lt;&lt; message &lt;&lt; std::endl;\n}\n\n// Usage\nlog(\"Application started.\", 1);\nlog(\"Something happened.\", std::nullopt);\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/optional/#function-return-values","title":"Function return values","text":"<pre><code>std::optional&lt;std::string&gt; find_name(const std::map&lt;int, std::string&gt;&amp; users, int id) {\n    auto it = users.find(id);\n    if (it != users.end()) {\n        return it-&gt;second; // Return the found string.\n    }\n    return std::nullopt; // Return an empty optional.\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/optional/#member-variables","title":"Member variables","text":"<pre><code>class UserProfile {\npublic:\n    std::string first_name;\n    std::optional&lt;std::string&gt; middle_name;\n    std::string last_name;\n};\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/optional/#example-usages","title":"Example usages","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;optional&gt;\n#include &lt;string&gt;\n\n// A function that returns an optional string.\nstd::optional&lt;std::string&gt; get_user_name(int id) {\n    if (id == 1) {\n        return \"Alice\";\n    }\n    return std::nullopt; // The empty state.\n}\n\nint main() {\n    // Case 1: The optional has a value.\n    std::optional&lt;std::string&gt; user1 = get_user_name(1);\n\n    // Check if a value exists using has_value() or in a boolean context.\n    if (user1.has_value()) { // Same as: if (user1)\n        std::cout &lt;&lt; \"User 1 found: \" &lt;&lt; *user1 &lt;&lt; std::endl;\n        std::cout &lt;&lt; \"Using value() member: \" &lt;&lt; user1.value() &lt;&lt; std::endl;\n    }\n\n    // Use value_or() to get the value or a default.\n    std::string name_or_default = user1.value_or(\"Guest\");\n    std::cout &lt;&lt; \"User 1 (with value_or): \" &lt;&lt; name_or_default &lt;&lt; std::endl;\n\n    // Case 2: The optional is empty.\n    std::optional&lt;std::string&gt; user2 = get_user_name(2);\n\n    if (!user2.has_value()) { // Same as: if (!user2)\n        std::cout &lt;&lt; \"User 2 not found.\" &lt;&lt; std::endl;\n    }\n\n    // Using value_or() on an empty optional returns the default.\n    name_or_default = user2.value_or(\"Guest\");\n    std::cout &lt;&lt; \"User 2 (with value_or): \" &lt;&lt; name_or_default &lt;&lt; std::endl;\n\n    // --- Dangerous usage ---\n    // Calling .value() on an empty optional will throw an exception.\n    try {\n        std::cout &lt;&lt; user2.value() &lt;&lt; std::endl;\n    } catch (const std::bad_optional_access&amp; e) {\n        std::cout &lt;&lt; \"Caught exception: \" &lt;&lt; e.what() &lt;&lt; std::endl;\n    }\n\n    // Using reset() to make a non-empty optional empty.\n    user1.reset();\n    if (!user1.has_value()) {\n        std::cout &lt;&lt; \"User 1 has been reset.\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/pointers/","title":"Pointers","text":"<p><code>shared_ptr</code> and  <code>unique_ptr</code> are parts of the C++ standard library.  They provide a safer way to manage pointers.  The dynamically allocated objects will be destroyed when these pointers goes out of scope.</p>"},{"location":"tech/software_engineering/c%2B%2B/pointers/#nullptr","title":"<code>nullptr</code>","text":"<p><code>nullptr</code> was introduced to solve the ambiguity of <code>NULL</code> and <code>0</code>. It is a <code>prvalue</code>, a pure rvalue. It can only exist as an rvalue. It is of type <code>std::nullptr_t</code>.</p> <p>It provides type safety. So, there is no ambiguity when you call a overloaded function with it. However, if you call it with <code>0</code> or <code>NULL</code>, the could be either <code>int</code> or <code>char</code>.</p>"},{"location":"tech/software_engineering/c%2B%2B/pointers/#unique_ptr","title":"<code>unique_ptr</code>","text":"<pre><code>// A function that returns a unique_ptr to a newly created object.\nstd::unique_ptr&lt;MyClass&gt; createMyClass() {\n\n    // Use make_unique to create one.\n    std::unique_ptr&lt;MyClass&gt; ptr1 = std::make_unique&lt;MyClass&gt;();\n\n    // std::unique_ptr&lt;MyClass&gt; ptr2 = ptr1; // This would cause a compile-time error\n    std::unique_ptr&lt;MyClass&gt; ptr2 = std::move(ptr1); // Ownership is moved\n\n    // ptr1 becomes nullptr.\n    if (ptr1 == nullptr) {\n        std::cout &lt;&lt; \"ptr1 is now null\" &lt;&lt; std::endl;\n    }\n\n    // Create another object ptr3.\n    std::unique_ptr&lt;MyClass&gt; ptr3 = std::make_unique&lt;MyClass&gt;();\n\n    // Do not use std::move when returning. The ownership is automatically\n    // transferred.\n    return ptr2;\n    // MyClass is destroyed when ptr3 goes out of scope\n}\n</code></pre> <p>When passing a <code>unique_ptr</code> as a parameter to a function, you either need to pass by reference, or using <code>std::move</code>. However, if using <code>std::move</code>, the object will be destroyed at the end of the function if you don't return it back.</p>"},{"location":"tech/software_engineering/c%2B%2B/pointers/#shared_ptr","title":"<code>shared_ptr</code>","text":"<p><code>shared_ptr</code> is much simpler, it allows multiple pointers to point to the same object. So, no <code>std::move</code> is needed. It uses <code>std::make_shared&lt;MyClass&gt;();</code> to create.</p> <p>Dereferenced pointers: referring to the value that a pointer is pointing to.</p>"},{"location":"tech/software_engineering/c%2B%2B/pointers/#release","title":"<code>.release()</code>","text":"<p>It releases the ownership from <code>unique_ptr</code> and can give the ownership to a plain pointer like <code>int*</code>.</p> <pre><code>std::unique_ptr&lt;int&gt; p1 = std::make_unique&lt;int&gt;(10);\nint* raw_ptr = p1.release();\nstd::unique_ptr&lt;int&gt; p2(raw_ptr); // The new unique_ptr takes ownership.\n// p1 is now null. p2 owns the memory.\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/raii/","title":"RAII","text":""},{"location":"tech/software_engineering/c%2B%2B/rvo/","title":"Return Value Optimization (RVO)","text":"<p>Return Value Optimization (RVO) and Named Return Value Optimization (NRVO). They are compiler optimizations to void unnecessary copy/move of the return value of a function in certain scenarios.</p> <p>Let's look at the following code:</p> <pre><code>MyClass createObject() {\n    return MyClass(); // RVO likely happens here\n}\n</code></pre> <pre><code>MyClass createAndModifyObject() {\n    MyClass obj;\n    // ... modify obj ...\n    return obj; // NRVO likely happens here\n}\n</code></pre> <p>At first glance, the local objects in the functions should be created in the stack memory and returned by copying it back as an rvalue. However, RVO &amp; NRVO happen here to help optimize that. The compiler directly constructs the objects in the caller's memory location. This means no copy and no move actually happen.</p>"},{"location":"tech/software_engineering/c%2B%2B/static/","title":"The <code>static</code> keyword","text":"<p>There are 5 different ways of using the <code>static</code> keyword in total.</p> <ul> <li>Defining a variable in a function.</li> <li>Defining member variable.</li> <li>Defining a global variable.</li> <li>Defining a member function.</li> <li>In anonymous union. (less common)</li> </ul>"},{"location":"tech/software_engineering/c%2B%2B/static/#defining-a-variable-in-a-function","title":"Defining a variable in a function.","text":"<pre><code>#include &lt;iostream&gt;\n\nvoid counter() {\n    static int count = 0; // Initialized only once\n    count++;\n    std::cout &lt;&lt; \"Count: \" &lt;&lt; count &lt;&lt; std::endl;\n}\n\nint main() {\n    counter(); // Count: 1\n    counter(); // Count: 2\n    counter(); // Count: 3\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/static/#defining-member-variable","title":"Defining member variable.","text":"<p>If we define a member variable of a class with the <code>static</code> keyword, it belongs to the class instead of any object, and shared among all the objects.</p> <p>You have to separate the declaration and definition/initialization. This is due to the memory allocation. The static member variable is not created with any object but with the class.</p> <p>It can be accessed with class name: <code>MyClass::objectCount</code>.</p> <p>It is not recommended to access it from a object, like <code>obj1.objectCount</code>. It would not error out, but it is confusing.</p> <pre><code>#include &lt;iostream&gt;\n\nclass MyClass {\npublic:\n    static int objectCount; // Declaration\n\n    MyClass() {\n        objectCount++;\n    }\n\n    ~MyClass() {\n        objectCount--;\n    }\n};\n\n// Definition and initialization of the static member variable\nint MyClass::objectCount = 0;\n\nint main() {\n    std::cout &lt;&lt; MyClass::objectCount &lt;&lt; std::endl; // Access via class name\n\n    MyClass obj1;\n    MyClass obj2;\n    std::cout &lt;&lt; MyClass::objectCount &lt;&lt; std::endl;\n\n    {\n        MyClass obj3;\n        std::cout &lt;&lt; MyClass::objectCount &lt;&lt; std::endl;\n    } // obj3 goes out of scope and is destroyed\n\n    std::cout &lt;&lt; MyClass::objectCount &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/static/#defining-a-global-variable","title":"Defining a global variable.","text":"<p>Now, we use the <code>static</code> keyword outside any function or class. The defined variable is only visible in that file. This is similar to using a unnamed namespace.</p> <pre><code>static int globalStaticVar = 10; // Only visible in this file.\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/static/#defining-a-member-function","title":"Defining a member function.","text":"<p>It is similar to Python's static method. It cannot access <code>this</code> pointer, so no object's members access.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass Logger {\npublic:\n    static void logMessage(const std::string&amp; message) {\n        std::cout &lt;&lt; \"[LOG] \" &lt;&lt; message &lt;&lt; std::endl;\n    }\n\nprivate:\n    // This would be inaccessible from a static member function\n    std::string privateData;\n};\n\nint main() {\n    Logger::logMessage(\"Application started.\"); // Call via class name\n    Logger::logMessage(\"Processing data...\");\n    // Logger myLogger;\n    // myLogger.logMessage(\"This also works but is less common for static functions.\");\n\n    return 0;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/std_move/","title":"The <code>move</code> function","text":"<p>To understand move you will first need to understand lvalue and rvalue. You will also need to understand Return Value Optimization.</p> <p>It is to create an rvalue from the given argument. The given argument would be left in a valid but unspecified state. For example, a string would become an empty string, a vector would become an empty vector.</p> <p>It is useful in a <code>return</code> statement when the RVO does not apply. For example:</p> <p><pre><code>std::vector&lt;int&gt; func(std::vector&lt;int&gt; data) {\n    ...\n    return std::move(data);\n}\n</code></pre> Actually, in the case above, the <code>std::move</code> may be redundant. Since, it triggers the move constructor by default.</p> <p>It is also useful when we just want to move the resource.</p> <pre><code>moved_string = std::move(large_string); // Moves the content\n</code></pre> <p>It is also useful to create an rvalue to trigger the rvalue reference function. If the function is overloaded, in the following case, it would correctly pick the rvalue reference function.</p> <pre><code>void process_data(std::vector&lt;int&gt;&amp;&amp; data_to_process) {...}\n\nstd::vector&lt;int&gt; my_active_data = {10, 20, 30};\n\n// process_data(my_active_data); // COMPILE ERROR! Cannot bind lvalue to rvalue reference.\nprocess_data(std::move(my_active_data)); // OK! Explicitly say you're done with my_active_data.\n</code></pre> <p>It is also widely used in the \"pass by value and move\" pattern. We call the constructor by passing by values not by references, and move the value to the member variables.</p> <pre><code>class MyClass {\npublic:\n    // The vector is passed by value, then moved into the member variable.\n    MyClass(std::vector&lt;int&gt; data) : m_data(std::move(data)) {\n        // 'data' is now in a valid but unspecified state.\n        // It's a \"moved-from\" object.\n    }\n\nprivate:\n    std::vector&lt;int&gt; m_data;\n};\n</code></pre> <p>Another important use case is to move the <code>unique_ptr</code> since they cannot be copied.</p>"},{"location":"tech/software_engineering/c%2B%2B/template/","title":"Template","text":"<p>If the same code for different types looks duplicated, we can use templates to reduce them.</p> <pre><code>void swap(int&amp; a, int&amp; b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\nvoid swap(double&amp; a, double&amp; b) {\n    double temp = a;\n    a = b;\n    b = temp;\n}\n</code></pre> <p>This can be changed to:</p> <pre><code>template &lt;typename T&gt;\nvoid swap(T&amp; a, T&amp; b) {\n    T temp = a;\n    a = b;\n    b = temp;\n}\n</code></pre> <p>Templates can be used with functions:</p> <pre><code>template &lt;typename T&gt; // Declares a template with a type parameter T\nT maximum(T a, T b) {\n    return (a &gt; b) ? a : b;\n}\n\nint main() {\n    int i = maximum(5, 10);      // T becomes int\n    double d = maximum(3.14, 2.71); // T becomes double\n    char c = maximum('a', 'z');   // T becomes char\n    return 0;\n}\n</code></pre> <p>And classes:</p> <pre><code>template &lt;typename T1, typename T2&gt; // Two type parameters\nclass Pair {\npublic:\n    T1 first;\n    T2 second;\n\n    Pair(T1 f, T2 s) : first(f), second(s) {}\n\n    void print() {\n        std::cout &lt;&lt; \"First: \" &lt;&lt; first &lt;&lt; \", Second: \" &lt;&lt; second &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    Pair&lt;int, double&gt; p1(10, 20.5);      // T1 is int, T2 is double\n    Pair&lt;std::string, int&gt; p2(\"Hello\", 123); // T1 is std::string, T2 is int\n\n    p1.print();\n    p2.print();\n    return 0;\n}\n</code></pre> <p>And variables:</p> <pre><code>template &lt;typename T&gt;\nconstexpr int DefaultBufferSize = 1024 / sizeof(T);\n\n// Usage:\n// char buffer_char[DefaultBufferSize&lt;char&gt;];   // buffer_char has size 1024\n// int buffer_int[DefaultBufferSize&lt;int&gt;];     // buffer_int has size 256 (if int is 4 bytes)\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/template/#type-specific-implementations","title":"Type specific implementations","text":"<p>For certain types, you may want to have a specialized implementation instead of the general template one.  You can use the explicit specialization here.</p> <pre><code>template &lt;typename T&gt;\nvoid print(T value) {\n    std::cout &lt;&lt; \"Generic print: \" &lt;&lt; value &lt;&lt; std::endl;\n}\n\ntemplate &lt;&gt; // No new template parameters; we're specializing an existing one\nvoid print&lt;const char*&gt;(const char* value) { // Specify the exact type\n    std::cout &lt;&lt; \"Specialized for C-string: \" &lt;&lt; value &lt;&lt; std::endl;\n}\n\n// Usage:\n// print(123);           // Calls generic print&lt;int&gt;\n// print(\"Hello\");       // Calls specialized print&lt;const char*&gt;\n// print(std::string(\"World\")); // Calls generic print&lt;std::string&gt;\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/template/#limit-the-types","title":"Limit the types","text":"<p>To limit what types can be used with the template, you can simply use asserts.</p> <pre><code>template &lt;typename T&gt;\nT multiply(T a, T b) {\n    // Assert that T is an arithmetic type (e.g., int, float, double)\n    static_assert(std::is_arithmetic_v&lt;T&gt;, \"Type must be an arithmetic type!\");\n    return a * b;\n}\n</code></pre> <p>Or for C++20 and later, you can use <code>concepts</code>.</p> <pre><code>// Define a concept that requires a type to be integral\ntemplate &lt;typename T&gt;\nconcept Integral = std::is_integral_v&lt;T&gt;;\n\n// Use the concept to constrain the template function\ntemplate &lt;Integral T&gt;\nT add(T a, T b) {\n    return a + b;\n}\n</code></pre>"},{"location":"tech/software_engineering/c%2B%2B/template/#compile","title":"Compile","text":"<p>They should be defined in header files. They need to be instantiated at compile time since the compiler needs to know the function/class when it sees the usages.</p> <p>The compiler only generate the code for the usages of the types it saw, not for every type.  So the more types used with the template, the longer it compiles.</p>"},{"location":"tech/software_engineering/c%2B%2B/translation_unit/","title":"Translation Unit","text":"<p>Let's use a simple example of four files: <code>A.h</code>, <code>B.h</code>, <code>A.cpp</code>, <code>B.cpp</code>. * <code>A.cpp</code> includes <code>A.h</code>. * <code>A.h</code> includes <code>B.h</code>. * <code>A.cpp</code> contains the <code>main()</code> function. * <code>B.cpp</code> includes <code>B.h</code>.</p> <p>To build the files you may use a single command:</p> <pre><code>g++ A.cpp B.cpp -o my_program\n</code></pre> <p>Or you can also make it more clear:</p> <pre><code>g++ -c A.cpp -o A.o\ng++ -c B.cpp -o B.o\ng++ A.o B.o -o my_program\n</code></pre> <p>The three stages of building: * Preprocessing. * Compilation. * Linking.</p> <p>The preprocessing is to produce the translation units. So, in our example, we will produce 2 translation units. One for A and one for B.</p> <p>Preprocessing is the a process of fetching all the included files (<code>*.h</code>) recursively and paste them into one giant file.  This expanded code forms the translation unit.</p> <p>So, <code>A.cpp</code> would fetch <code>A.h</code>, then from <code>A.h</code> to <code>B.h</code>. <code>B.cpp</code> would fetch <code>B.h</code>.</p> <p>However, the \"translation unit\" only knows some of the function declarations, but not definitions.  If a function is declared in <code>B.h</code> and is defined in <code>B.cpp</code>, the translation unit of <code>A.cpp</code> would not have the definition of that function. It will wait till the linking to link the declaration to the definition.</p> <p>So, the preprocessing is to collect all the entities involved without their definition (except for structs and classes). It allows the entities to refer to each other and create circular dependencies without causing an error.</p> <p>The translation unit will later be compiled into <code>.o</code> files. So, the translation units have one-to-one mapping to the <code>.o</code> files.</p>"},{"location":"tech/system/compiler/","title":"Compiler","text":"<ul> <li>AST is short for abstract syntax tree.</li> <li>IR is short for intermediate representation.</li> <li>The compiler can optimize the code execution because assembly language have more control over the hardware.</li> <li>LLVM can do both JIT (just-in-time) compiling and AOT (ahead-of-time) compiling.</li> </ul>"},{"location":"tech/system/compiler/#deep-learning-compiler","title":"Deep Learning Compiler","text":"<ul> <li>If running on GPUs, the output of a deep learning compiler is something like assembly code for GPUs.</li> <li>Deep learning compilers have both JIT and AOT kind.</li> </ul>"},{"location":"tech/system/compiler/#how-does-a-driver-work","title":"How does a driver work?","text":"<p>A driver is a program usually loaded by the operating system at start.  It creates an abstraction of the hardware it manages.  A program running on the CPU may call this driver through the bus, and the driver will operate the hardware and writeback the results.</p> <p>The GPU has a Nvidia driver, which contains a CUDA driver. They operate the GPUs.</p>"},{"location":"tech/system/compiler/#how-does-a-cuda-c-code-compile","title":"How does a CUDA C++ code compile?","text":"<p>It is compiled with Nvidia CUDA Compiler (NVCC) instead of gcc or g++ or clang. The NVCC is implemented based on LLVM. It would analysis the C++ code and extract out the code to run on CPU (the host code) and the code to run on GPU (the device code). Put them into an executable binary file, named CUDA Binary (cubin) file. The executable runs on the host machine, but also contains the parts to run on GPU, like the PTX. When runs it will call the CUDA runtime to run on GPU.</p>"},{"location":"tech/system/compiler/#how-does-ptx-work","title":"How does PTX work?","text":"<p>\"With CUDA driver APIs, compilation and loading are tied together. PTX Compiler APIs de-couple the two operations. This allows applications to perform early compilation and caching of the GPU assembly code.\" Source</p>"},{"location":"tech/system/compiler/#xla","title":"XLA","text":"<p>XLA is the deep learning compiler for TensorFlow. XLA is a JIT compiler. It starts from High level IR. It outputs the LLVM IR to run on GPU.</p>"},{"location":"tech/system/compiler/#language-compiler","title":"Language Compiler","text":""},{"location":"tech/system/compiler/#c-compiling-process","title":"C Compiling Process","text":"<p>It contains 4 steps in total: preprocessing, compile, assembly, and linking.</p>"},{"location":"tech/system/compiler/#preprocessing","title":"Preprocessing","text":"<p><code>*.c -&gt; *.i</code></p> <p>It just fetch all the <code>#include&lt;&gt;</code> sources and insert them into the code.</p>"},{"location":"tech/system/compiler/#compile","title":"Compile","text":"<p><code>*.i -&gt; *.s</code></p> <p>It converts the C language into assembly language. It is still text file till now.</p>"},{"location":"tech/system/compiler/#assembly","title":"Assembly","text":"<p><code>*.s -&gt; *.o</code></p> <p>It converts the assembly language to an binary file with machine language instructions.</p>"},{"location":"tech/system/compiler/#linking","title":"Linking","text":"<p><code>*.o -&gt; *</code></p> <p>There are some functions that are built-in in C language, which doesn't require an <code>include</code> before using, for example <code>printf</code>. They are precompiled and assembled to save the compiling time. Linking is to fetch these binaries and pack them all together with the compiled program so that the final executable file is self-contained.</p>"},{"location":"tech/system/compiler/#java-compiling-process","title":"Java Compiling Process","text":""},{"location":"tech/system/compiler/#python-interpreting-process","title":"Python Interpreting Process","text":""},{"location":"tech/system/architecture/cpu/","title":"CPU","text":"<ul> <li>Interruption can be triggered by CPU. For example, a key is pressed on keyboard.</li> <li>CPU and RAM do not need drivers.</li> </ul>"},{"location":"tech/system/architecture/cpu/#program-counter-pc","title":"Program Counter (PC)","text":"<p>Program counter (PC) is a componenet of CPU. It points to an address (in main memory) that contains the next instruction to be executed.</p>"},{"location":"tech/system/architecture/cpu/#register-file","title":"Register File","text":"<p>The register file is a set of registers (storage devices) of word length.</p>"},{"location":"tech/system/architecture/cpu/#arithmeticlogic-unit-alu","title":"Arithmetic/Logic Unit (ALU)","text":"<p>Arithmetic/logic unit (ALU) is a componenet of CPU. The ALU do operations on the specified registers.</p>"},{"location":"tech/system/architecture/cpu/#bus-interface","title":"Bus Interface","text":"<p>Bus interface is a componenet of CPU. It accepts the information from the buses. For example, a key is pressed.</p>"},{"location":"tech/system/architecture/cpu/#examples-of-cpu-instructions","title":"Examples of CPU instructions","text":"<ul> <li>Load: Copy from main memory to register.</li> <li>Store: Copy from register to main memory.</li> <li>Operate: Copy the content of 2 registers to ALU and performan an operation and write the result to one of the registers.</li> <li>Jump: Extract a word from a instruction and put into PC.</li> </ul>"},{"location":"tech/system/operating_system/overview/","title":"Operating System","text":"<p>Operating system is based on CPU, RAM, and driver APIs to provide good programming experience for the application programs. For example, executing instructions on CPU, memory management, thread and process switches, caching.</p>"},{"location":"tech/system_design/overview/","title":"tabase replication modes:","text":"<p>Database replication modes:</p> <p>Master-Slave Replication: One primary database (master) accepts writes, and multiple secondary databases (slaves) replicate the data. This ensures that data is consistent across all databases, but may introduce some latency.</p> <p>Multi-Master Replication: All databases accept writes and replicate data with each other. This ensures high availability and low latency, but can be more complex to manage.</p> <p>Considerations:</p> <p>Cache invalidation: How will you invalidate cache entries when data is updated in one of the databases?</p> <p>How to interview?</p> <ul> <li>Clarify the requirements.</li> <li>Give the design and explain the reasons behind it.</li> <li>Give the potential issues and tradeoffs.</li> </ul>"},{"location":"tech/tools/bazel/","title":"Bazel","text":"<p>To directly show the error messages of the failed tests on screen: <pre><code>bazel test --test_output=errors ...\n</code></pre></p>"},{"location":"tech/tools/docker/","title":"Docker","text":"<pre><code>docker run -p 5005:5005 -i -t jhfjhfj1/tamuta2:latest _bin_bash\npython -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. core.proto\ndocker build -t tamuta2:latest .\ndocker build -f Dockerfile_dry_run -t ta2image .\ndocker run -i --entrypoint _bin_bash tamuta2 -c 'ta2_search $CONFIG_JSON_PATH'\ndocker build -f Dockerfile_base -t mybase .\ndocker run -i --entrypoint _bin_bash ta2image d-c '_resources_executable/1.sh $CONFIG_JSON'\ndocker run  -p 5005:5005 -it --entrypoint _bin_bash jhfjhfj1/tamuta2:latest -c 'ta2_serve $CONFIG_JSON'\n</code></pre> <p>Create a docker image: <pre><code>docker build -t autokeras:latest .\n</code></pre></p> <p>run docker as a shell: <pre><code>docker run -it --entrypoint /bin/bash image_name\n</code></pre></p> <p>You save the image as a tar archive, using <code>docker save -o</code>:</p> <pre><code>docker save -o archive.tar sheffien/rim\n</code></pre> <p>Then you load it (on a different computer) with</p> <pre><code>docker load -i archive.tar\n</code></pre> <p>and now it will show up in your docker images list:</p> <p><code>docker images</code></p> <p>The Docker.</p> <p>Use <code>ENV</code> to set environment variable. <pre><code>docker build -t registry.datadrivendiscovery.org/ta2/texas-anm-university_tamu_1.0.0:latest .\ndocker login registry.datadrivendiscovery.org\ndocker push registry.datadrivendiscovery.org/ta2/texas-anm-university_tamu_1.0.0\ndocker tag tamuta2 jhfjhfj1/tamuta2\ndocker push jhfjhfj1/tamuta2\ndocker exec tamuta2 _bin_bash\n</code></pre></p> <p>Remove docker images.</p> <pre><code>docker rmi IMAGE_ID\n</code></pre> <p>Remove all docker images.</p> <pre><code>docker rmi $(docker images -a -q)\n</code></pre> <p>Remove all docker images with pattern</p> <pre><code>docker images -a | grep \"pattern\" | awk '{print $3}' | xargs docker rmi\n</code></pre> <p>Use gpus in docker containers</p> <pre><code>distribution=$(. /etc/os-release;echo $ID$VERSION_ID) &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/gpgkey | sudo apt-key add -       &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\n\nsudo apt-get update\n\nsudo apt-get install -y nvidia-docker2\n\nsudo systemctl restart docker\n\ndocker run --rm --gpus all tensorflow/tensorflow:latest-gpu nvidia-smi\n</code></pre>"},{"location":"tech/tools/gcp/","title":"Google Cloud Platform","text":""},{"location":"tech/tools/gcp/#techtool","title":"tech/tool","text":"<p>Registry a place to store containers. https://cloud.google.com/container-registry/docs/quickstart#pushing_your_image</p> <p>API Endpoints The Open APIs on google platform needs special configuration. I just followed the tutorial in deploying GRPC server.</p> <p>Container Engine It is a platform that you can upload docker containers. It will use the \"ENTRYPOINT\" to run the container. The container can be on the Registry. If it is not google's registry, special permission is needed.</p> <p>GRPC-server setup I just followed the tutorial here: https://cloud.google.com/endpoints/docs/get-started-grpc-container-engine</p> <p># Explicitly tell <code>gcloud ml-engine local train</code> to use Python 3 ! gcloud config set ml_engine/local_python $(which python3)</p>"},{"location":"tech/tools/gdb/","title":"Debugging with GDB | BetterExplained","text":""},{"location":"tech/tools/gdb/#techtool","title":"tech/tool","text":"<p>gdb primary tutorial</p> <p>A debugger lets you pause a program, examine and change variables, and step through code. Spend a few hours to learn one so you can avoid dozens of hours of frustration in the future. This is a quick guide, more information here:</p> <ul> <li>Official Page \u2013 Documentation</li> <li>Sample session \u2013 Short Tutorial \u2013 Long Tutorial</li> </ul>"},{"location":"tech/tools/gdb/#getting-started-starting-and-stopping","title":"Getting Started: Starting and Stopping","text":"<ul> <li><code>gcc -g myprogram.c</code><p>* Compiles myprogram.c with the debugging option (-g). You still get an a.out, but it contains debugging information that lets you use variables and function names inside GDB, rather than raw memory locations (not fun).</p> </li> </ul> <ul> <li><code>gdb a.out</code><p>* Opens GDB with file a.out, but does not run the program. You\u2019ll see a prompt <code>(gdb)</code> \u2013 all examples are from this prompt.</p> </li> </ul> <ul> <li><code>r</code></li> <li><code>r arg1 arg2</code></li> <li><code>r &lt; file1</code><p>* Three ways to run \u201ca.out\u201d, loaded previously. You can run it directly (r), pass arguments (r arg1 arg2), or feed in a file. You will usually set breakpoints before running.</p> </li> </ul> <ul> <li><code>help</code></li> <li><code>h breakpoints</code><p>* List help topics (help) or get help on a specific topic (h breakpoints). GDB is well-documented.</p> </li> </ul> <ul> <li><code>q</code> \u2013 Quit GDB</li> </ul>"},{"location":"tech/tools/gdb/#stepping-through-code","title":"Stepping Through Code","text":"<p>Stepping lets you trace the path of your program, and zero in on the code that is crashing or returning invalid input.</p> <ul> <li><code>l</code></li> <li><code>l 50</code></li> <li><code>l myfunction</code><p>* List 10 lines of source code for current line (l), a specific line (l 50), or for a function (l myfunction).</p> </li> </ul> <ul> <li><code>next</code><p>* Run program until next line, then pause. If the current line is a function, execute the entire function, then pause. Next is good for walking through your code quickly.</p> </li> </ul> <ul> <li><code>step</code><p>* Run the next instruction, not line. If the current instructions is setting a variable, it is the same as <code>next</code>. If it\u2019s a function, it will jump into the function, execute the first statement, then pause. Step is good for diving into the details of your code.</p> </li> </ul> <ul> <li><code>finish</code>     * Finish executing the current function, then pause (also called step out). Useful if you accidentally stepped into a function.</li> </ul>"},{"location":"tech/tools/gdb/#breakpoints-and-watchpoints","title":"Breakpoints and Watchpoints","text":"<p>Breakpoints are one of the keys to debugging. They pause (break) a program when it reaches a certain location. You can examine and change variables, then resume execution. This is helpful when seeing why certain inputs fail, or testing inputs.</p> <ul> <li><code>break 45</code></li> <li><code>break myfunction</code><p>* Set a breakpoint at line 45, or at myfunction. The program will pause when it reaches the breakpoint.</p> </li> </ul> <ul> <li><code>watch x == 3</code><p>* Set a watchpoint, which pauses the program when a condition changes (when x == 3 changes). Watchpoints are great for certain inputs (myPtr != NULL) without having to break on every function call.</p> </li> </ul> <ul> <li><code>continue</code><p>* Resume execution after being paused by a breakpoint_watchpoint. The program will continue until it hits the next breakpoint_watchpoint.</p> </li> </ul> <ul> <li><code>delete N</code><p>* Delete breakpoint N (breakpoints are numbered when created).</p> </li> </ul>"},{"location":"tech/tools/gdb/#setting-variables-and-calling-functions","title":"Setting Variables and Calling Functions","text":"<p>Viewing and changing variables at run-time is a huge part of debugging. Try giving functions invalid inputs or running other test cases to find the root of problems. Typically, you will view/set variables when the program is paused.</p> <ul> <li><code>print x</code><p>* Print current value of variable x. Being able to use the original variable names is why the (-g) flag is needed; programs compiled regularly have this information removed.</p> </li> </ul> <ul> <li><code>set x = 3</code></li> <li><code>set x = y</code><p>* Set x to a set value (3) or to another variable (y)</p> </li> </ul> <ul> <li><code>call myfunction()</code></li> <li><code>call myotherfunction(x)</code></li> <li><code>call strlen(mystring)</code><p>* Call user-defined or system functions. This is extremely useful, but beware calling buggy functions.</p> </li> </ul> <ul> <li><code>display x</code></li> <li><code>undisplay x</code><p>* Constantly display value of variable x, which is shown after every step or pause. Useful if you are constantly checking for a certain value. Use undisplay to remove the constant display.</p> </li> </ul>"},{"location":"tech/tools/gdb/#backtrace-and-changing-frames","title":"Backtrace and Changing Frames","text":"<p>The stack is a list of the current function calls \u2013 it shows you where you are in the program. A frame stores the details of a single function call, such as the arguments.</p> <ul> <li><code>bt</code><p>* Backtrace, aka print the current function stack to show where you are in the current program. If <code>main</code> calls function <code>a()</code>, which calls <code>b()</code>, which calls <code>c()</code>, the backtrace is</p> </li> </ul> <pre><code>c &lt;= current location\nb\na\nmain\n</code></pre> <ul> <li><code>up</code></li> <li><code>down</code><p>* Move to the next frame up or down in the function stack. If you are in <code>c</code>, you can move to <code>b</code> or <code>a</code> to examine local variables.</p> </li> </ul> <ul> <li><code>return</code><p>* Return from current function.</p> </li> </ul>"},{"location":"tech/tools/gdb/#crashes-and-core-dumps","title":"Crashes and Core Dumps","text":"<p>A \u201ccore dump\u201d is a snapshot of memory at the instant the program crashed, typically saved in a file called \u201ccore\u201d. GDB can read the core dump and give you the line number of the crash, the arguments that were passed, and more. This is very helpful, but remember to compile with (-g) or the core dump will be difficult to debug.</p> <ul> <li><code>gdb myprogram core</code><p>* Debug myprogram with \u201ccore\u201d as the core dump file.</p> </li> </ul> <ul> <li><code>bt</code><p>* Print the backtrace (function stack) at the point of the crash. Examine variables using the techniques above.</p> </li> </ul>"},{"location":"tech/tools/gdb/#handling-signals","title":"Handling Signals","text":"<p>Signals are messages thrown after certain events, such as a timer or error. GDB may pause when it encounters a signal; you may wish to ignore them instead.</p> <ul> <li><code>handle [signalname] [action]</code></li> <li><code>handle SIGUSR1 nostop</code></li> <li><code>handle SIGUSR1 noprint</code></li> <li><code>handle SIGUSR1 ignore</code><p>* Tell GDB to ignore a certain signal ( <code>SIGUSR1</code> ) when it occurs. There are varying levels of ignoring.</p> </li> </ul>"},{"location":"tech/tools/gdb/#integration-with-emacs","title":"Integration with Emacs","text":"<p>The Emacs text editor integrates well with GDB. Debugging directly inside the editor is great because you can see an entire screen of code at a time. Use <code>M-x gdb</code> to start a new window with GDB and learn more here.</p>"},{"location":"tech/tools/gdb/#tips","title":"Tips","text":"<ul> <li>I often prefer watchpoints to breakpoints. Rather than breaking on every loop and checking a variable, set a watchpoint for when the variable gets to the value you need (i == 25, ptr != null, etc.).</li> <li><code>printf</code> works well for tracing. But wrap <code>printf</code> in a <code>log</code> function for flexibility.</li> <li>Try passing a log level with your message (1 is most important, 3 is least). You can tweak your log function to send email on critical errors, log to a file, etc.</li> <li>Code speaks, so here it is. Use <code>#define LOG_LEVEL LOG_WARN</code> to display warnings and above. Use <code>#define LOG_LEVEL LOG_NONE</code> to turn off debugging.</li> </ul> <pre><code>#include &lt;stdio.h&gt;\n\n#define LOG_NONE 0\n#define LOG_ERROR 1\n#define LOG_WARN 2\n#define LOG_INFO 3\n#define LOG_LEVEL LOG_WARN\n\n// shows msg if allowed by LOG_LEVEL\nint log(char *msg, int level){\n  if (LOG_LEVEL &gt;= level){\n    printf(\"LOG %d: %s\\n\", level, msg);\n    // could also log to file\n  }\n\n  return 0;\n}\n\nint main(int argc, char** argv){\n  printf(\"Hi there!\\n\");\n\n  log(\"Really bad error!\", LOG_ERROR);\n  log(\"Warning, not so serious.\", LOG_WARN);\n  log(\"Just some info, not that important.\", LOG_INFO);\n\n  return 0;\n}\n</code></pre> <ul> <li>Spend the time to learn GDB (or another debugging tool)! I know, it\u2019s like telling people to eat their vegetables, but it really is good for you \u2013 you\u2019ll thank me later.</li> </ul> <p>Tweet 2</p> <p>5</p>"},{"location":"tech/tools/gdb/#8-gdb-tricks-you-should-know-ksplice-blog","title":"8 gdb tricks you should know (Ksplice Blog)","text":"<p>Source URL: https://blogs.oracle.com/ksplice/entry/8_gdb_tricks_you_should</p> <p>\u00ab Coffee shop Internet... | Main | Happy Birthday Kspli... \u00bb </p>"},{"location":"tech/tools/gdb/#8-gdb-tricks-you-should-know","title":"8 gdb tricks you should know","text":""},{"location":"tech/tools/gdb/#by-ksplice-post-importer-on-jan-24-2011","title":"By Ksplice Post Importer on Jan 24, 2011","text":"<p>Despite its age, gdb remains an amazingly versatile and flexible tool, and mastering it can save you huge amounts of time when trying to debug problems in your code. In this post, I'll share 10 tips and tricks for using GDB to debug most efficiently.</p> <p>I'll be using the Linux kernel for examples throughout this post, not because these examples are necessarily realistic, but because it's a large C codebase that I know and that anyone can download and take a look at. Don't worry if you aren't familiar with Linux's source in particular -- the details of the examples won't matter too much.</p> <ol> <li> <p><code>break WHERE if COND</code></p> </li> <li> <p>If you've ever used gdb, you almost certainly know about the \"breakpoint\" command, which lets you break at some specified point in the debugged program.</p> </li> <li> <p>But did you know that you can set conditional breakpoints? If you add <code>if CONDITION</code> to a breakpoint command, you can include an expression to be evaluated whenever the program reaches that point, and the program will only be stopped if the condition is fulfilled. Suppose I was debugging the Linux kernel and wanted to stop whenever init got scheduled. I could do:</p> </li> </ol> <pre><code>(gdb) break context_switch if next == init_task\n</code></pre> <ol> <li> <p>Note that the condition is evaluated by gdb, not by the debugged program, so you still pay the cost of the target stopping and switching to gdb every time the breakpoint is hit. As such, they still slow the target down in relation to to how often the target location is hit, not how often the condition is met.</p> </li> <li> <p><code>command</code></p> </li> <li> <p>In addition to conditional breakpoints, the <code>command</code> command lets you specify commands to be run every time you hit a breakpoint. This can be used for a number of things, but one of the most basic is to augment points in a program to include debug output, without having to recompile and restart the program. I could get a minimal log of every <code>mmap()</code> operation performed on a system using:</p> </li> </ol> <pre><code>(gdb) b do_mmap_pgoff \nBreakpoint 1 at 0xffffffff8111a441: file mm/mmap.c, line 940.\n(gdb) command 1\nType commands for when breakpoint 1 is hit, one per line.\nEnd with a line saying just \"end\".\n&gt;print addr\n&gt;print len\n&gt;print prot\n&gt;end\n(gdb)\n</code></pre> <ol> <li> <p><code>gdb --args</code></p> </li> <li> <p>This one is simple, but a huge timesaver if you didn't know it. If you just want to start a program under gdb, passing some arguments on the command line, you can just build your command-line like usual, and then put \"gdb --args\" in front to launch gdb with the target program and the argument list both set:</p> </li> </ol> <pre><code>[~]$ gdb --args pizzamaker --deep-dish --toppings=pepperoni\n...\n(gdb) show args\nArgument list to give program being debugged when it is started is\n  \" --deep-dish --toppings=pepperoni\".\n(gdb) b main\nBreakpoint 1 at 0x45467c: file oven.c, line 123.\n(gdb) run\n...\n</code></pre> <ol> <li> <p>I find this especially useful if I want to debug a project that has some arcane wrapper script that assembles lots of environment variables and possibly arguments before launching the actual binary (I'm looking at you, libtool). Instead of trying to replicate all that state and then launch gdb, simply make a copy of the wrapper, find the final \"exec\" call or similar, and add \"gdb --args\" in front.</p> </li> <li> <p>Finding source files</p> </li> <li> <p>I run Ubuntu, so I can download debug symbols for most of the packages on my system from ddebs.ubuntu.com, and I can get source using <code>apt-get source</code>. But how do I tell gdb to put the two together? If the debug symbols include relative paths, I can use gdb's <code>directory</code> command to add the source directory to my source path:</p> </li> </ol> <pre><code>[~/src]$ apt-get source coreutils\n[~/src]$ sudo apt-get install coreutils-dbgsym\n[~/src]$ gdb /bin/ls\nGNU gdb (GDB) 7.1-ubuntu\n(gdb) list main\n1192    ls.c: No such file or directory.\n    in ls.c\n(gdb) directory ~/src/coreutils-7.4/src/\nSource directories searched: /home/nelhage/src/coreutils-7.4:$cdir:$cwd\n(gdb) list main\n1192        }\n1193    }\n1194    \n1195    int\n1196    main (int argc, char **argv)\n1197    {\n1198      int i;\n1199      struct pending *thispend;\n1200      int n_files;\n1201\n</code></pre> <ol> <li>Sometimes, however, debug symbols end up with absolute paths, such as the kernel's. In that case, I can use <code>set substitute-path</code> to tell gdb how to translate paths:</li> </ol> <pre><code>[~/src]$ apt-get source linux-image-2.6.32-25-generic\n[~/src]$ sudo apt-get install linux-image-2.6.32-25-generic-dbgsym\n[~/src]$ gdb /usr/lib/debug/boot/vmlinux-2.6.32-25-generic \n(gdb) list schedule\n5519    /build/buildd/linux-2.6.32/kernel/sched.c: No such file or directory.\n    in /build/buildd/linux-2.6.32/kernel/sched.c\n(gdb) set substitute-path /build/buildd/linux-2.6.32 /home/nelhage/src/linux-2.6.32/\n(gdb) list schedule\n5519    \n5520    static void put_prev_task(struct rq *rq, struct task_struct *p)\n5521    {\n5522        u64 runtime = p-&gt;se.sum_exec_runtime - p-&gt;se.prev_sum_exec_runtime;\n5523    \n5524        update_avg(&amp;p-&gt;se.avg_running, runtime);\n5525    \n5526        if (p-&gt;state == TASK_RUNNING) {\n5527            /*\n5528             * In order to avoid avg_overlap growing stale when we are\n</code></pre> <ol> <li> <p>Debugging macros</p> </li> <li> <p>One of the standard reasons almost everyone will tell you to prefer inline functions over macros is that debuggers tend to be better at dealing with inline functions. And in fact, by default, gdb doesn't know anything at all about macros, even when your project was built with debug symbols:</p> </li> </ol> <pre><code>(gdb) p GFP_ATOMIC\nNo symbol \"GFP_ATOMIC\" in current context.\n(gdb) p task_is_stopped(&amp;init_task)\nNo symbol \"task_is_stopped\" in current context.\n</code></pre> <ol> <li>However, if you're willing to tell GCC to generate debug symbols specifically optimized for gdb, using <code>-ggdb3</code>, it can preserve this information:</li> </ol> <pre><code>$ make KCFLAGS=-ggdb3\n...\n(gdb) break schedule\n(gdb) continue\n(gdb) p/x GFP_ATOMIC\n$1 = 0x20\n(gdb) p task_is_stopped_or_traced(init_task)\n$2 = 0\n</code></pre> <ol> <li>You can also use the <code>macro</code> and <code>info macro</code> commands to work with macros from inside your gdb session:</li> </ol> <pre><code>(gdb) macro expand task_is_stopped_or_traced(init_task)\nexpands to: ((init_task-&gt;state &amp; (4 | 8)) != 0)\n(gdb) info macro task_is_stopped_or_traced\nDefined at include/linux/sched.h:218\n  included at include/linux/nmi.h:7\n  included at kernel/sched.c:31\n#define task_is_stopped_or_traced(task) ((task-&gt;state &amp; (__TASK_STOPPED | __TASK_TRACED)) != 0)\n</code></pre> <ol> <li> <p>Note that gdb actually knows which contexts macros are and aren't visible, so when you have the program stopped inside some function, you can only access macros visible at that point. (You can see that the \"included at\" lines above show you through exactly what path the macro is visible).</p> </li> <li> <p>gdb variables</p> </li> <li> <p>Whenever you <code>print</code> a variable in gdb, it prints this weird <code>$NN =</code> before it in the output:</p> </li> </ol> <pre><code>(gdb) p 5+5\n$1 = 10\n</code></pre> <ol> <li>This is actually a gdb variable, that you can use to reference that same variable any time later in your session:</li> </ol> <pre><code>(gdb) p $1\n$2 = 10\n</code></pre> <ol> <li>You can also assign your own variables for convenience, using <code>set</code>:</li> </ol> <pre><code>(gdb) set $foo = 4\n(gdb) p $foo\n$3 = 4\n</code></pre> <ol> <li> <p>This can be useful to grab a reference to some complex expression or similar that you'll be referencing many times, or, for example, for simplicity in writing a conditional breakpoint (see tip 1).</p> </li> <li> <p>Register variables</p> </li> <li> <p>In addition to the numeric variables, and any variables you define, gdb exposes your machine's registers as pseudo-variables, including some cross-architecture aliases for common ones, like <code>$sp</code> for the the stack pointer, or <code>$pc</code> for the program counter or instruction pointer.</p> </li> <li> <p>These are most useful when debugging assembly code or code without debugging symbols. Combined with a knowledge of your machine's calling convention, for example, you can use these to inspect function parameters:</p> </li> </ol> <pre><code>(gdb) break write if $rsi == 2\n</code></pre> <ol> <li> <p>will break on all writes to stderr on amd64, where the <code>$rsi</code> register is used to pass the first parameter.</p> </li> <li> <p>The <code>x</code> command</p> </li> <li> <p>Most people who've used gdb know about the <code>print</code> or <code>p</code> command, because of its obvious name, but I've been surprised how many don't know about the power of the <code>x</code> command.</p> </li> <li> <p><code>x</code> (for \"e x amine\") is used to output regions of memory in various formats. It takes two arguments in a slightly unusual syntax:</p> </li> </ol> <pre><code>x/FMT ADDRESS\n</code></pre> <ol> <li> <p><code>ADDRESS</code>, unsurprisingly, is the address to examine; It can be an arbitrary expression, like the argument to <code>print</code>.</p> </li> <li> <p><code>FMT</code> controls how the memory should be dumped, and consists of (up to) three components:</p> <p>* A numeric COUNT of how many elements to dump   * A single-character FORMAT, indicating how to interpret and display each element   * A single-character SIZE, indicating the size of each element to display. <code>x</code> displays COUNT elements of length SIZE each, starting from ADDRESS, formatting them according to the FORMAT.</p> </li> </ol> <p>There are many valid \"format\" arguments; <code>help x</code> in gdb will give you the full list, so here's my favorites:</p> <p><code>x/x</code> displays elements in hex, <code>x/d</code> displays them as signed decimals, <code>x/c</code> displays characters, <code>x/i</code> disassembles memory as instructions, and <code>x/s</code> interprets memory as C strings.</p> <p>The SIZE argument can be one of: <code>b</code>, <code>h</code>, <code>w</code>, and <code>g</code>, for one-, two-, four-, and eight-byte blocks, respectively.</p> <p>If you have debug symbols so that GDB knows the types of everything you might want to inspect, <code>p</code> is usually a better choice, but if not, <code>x</code> is invaluable for taking a look at memory.</p> <pre><code>[~]$ grep saved_command /proc/kallsyms\nffffffff81946000 B saved_command_line\n\n(gdb) x/s 0xffffffff81946000\nffffffff81946000 &lt;&gt;:     \"root=/dev/sda1 quiet\"\n</code></pre> <p><code>x/i</code> is invaluable as a quick way to disassemble memory:</p> <pre><code>(gdb) x/5i schedule\n   0xffffffff8154804a &lt;schedule&gt;:   push   %rbp\n   0xffffffff8154804b &lt;schedule+1&gt;: mov    $0x11ac0,%rdx\n   0xffffffff81548052 &lt;schedule+8&gt;: mov    %gs:0xb588,%rax\n   0xffffffff8154805b &lt;schedule+17&gt;:    mov    %rsp,%rbp\n   0xffffffff8154805e &lt;schedule+20&gt;:    push   %r15\n</code></pre> <p>If I'm stopped at a segfault in unknown code, one of the first things I try is something like <code>x/20i $ip-40</code>, to get a look at what the code I'm stopped at looks like.</p> <p>A quick-and-dirty but surprisingly effective way to debug memory leaks is to let the leak grow until it consumes most of a program's memory, and then attach <code>gdb</code> and just <code>x</code> random pieces of memory. Since the leaked data is using up most of memory, you'll usually hit it pretty quickly, and can try to interpret what it must have come from.</p> <p>~ nelhage</p> <p>Ksplice is hiring!</p> <p>Do you love tinkering with, exploring, and debugging Linux systems? Does writing Python clones of your favorite childhood computer games sound like a fun weekend project? Have you ever told a joke whose punch line was a git command?</p> <p>Join Ksplice and work on technology that most people will tell you is impossible: updating the Linux kernel while it is running.</p> <p>Help us develop the software and infrastructure to bring rebootless kernel updates to Linux, as well as new operating system kernels and other parts of the software stack. We're hiring backend, frontend, and kernel engineers. Say hello at jobs@ksplice.com!</p> <p>Category: programming :::</p> <p>Tags: c debugging gdb linux tricks  ::: </p> <p>Permanent link to this entry  ::: </p> <p>\u00ab Coffee shop Internet... | Main | Happy Birthday Kspli... \u00bb     Comments:</p> <p>One of my favourite GDB tricks: The @ symbol, used to view many elements of an array/STL vector in one go.</p> <p>With C, it is easy to view the full array:</p> <p>If the code is: int a[ 10 ] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };</p> <p>Then: (gdb) p a $1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}</p> <p>However this is not useful if the array has 1000 entries, and you want to view a handful of entries located somewhere in the middle. Also, this will not work with a C++ vector, because it will dump the vector object's data members.</p> <p>Using the '@' symbol allows us to do both:</p> <p>(gdb) p *&amp;a[0]@10 $1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}</p> <p>This prints the first 10 elements in the vector. Looks ugly, but is not so complicated really: '&amp;a[0]' gets the address of the first element. '*' dereferences the address back to the vector's data type. Finally '@10' pulls out 10 elements.</p> <p>Of course, to view elements 550-553 in a long vector, all you do is 'p *&amp;a[550]@4'.</p> <p>Posted by Niraj on August 28, 2012 at 07:37 AM EDT # </p> <p>Post a Comment:</p> <ul> <li>Name:</li> <li>E-Mail:</li> <li>URL:</li> <li>Notify me by email of new comments</li> <li>Remember Information?</li> <li>Your Comment:</li> <li>HTML Syntax: NOT allowed</li> <li>Please answer this simple math question</li> </ul> <ul> <li>4 + 93 =</li> </ul> <p>http://betterexplained.com/articles/debugging-with-gdb/</p>"},{"location":"tech/tools/jekyll/","title":"Jekyll","text":""},{"location":"tech/tools/jekyll/#techtool","title":"tech/tool","text":""},{"location":"tech/tools/jekyll/#how-to-escape-liquid-template-tags","title":"How to escape liquid template tags?","text":"<p>There is a way to escape without plugins, use the code below:</p> <pre><code>{{ \"{% this \" }}%}\n</code></pre> <p>and for tags, to escape <code>{{ this }}</code> use:</p> <pre><code>{{ \"{{ this \" }}}}\n</code></pre>"},{"location":"tech/tools/keras/","title":"Keras","text":"<p>This is a note about developing Keras.</p>"},{"location":"tech/tools/keras/#tracing","title":"Tracing","text":""},{"location":"tech/tools/keras/#static-values-in-tf_function","title":"Static values in tf_function","text":"<p>All statics will remain constant in <code>tf_function</code>. Any example? <code>Tensor.shape</code> are statics. The TF operations are dynamic. Usually looks like <code>tf.some_operation()</code>. For example, <code>tf.shape()</code> is dynamic.</p>"},{"location":"tech/tools/keras/#testing","title":"Testing","text":"<p>The testing infra is a good practice that can be applied to other projects as well.</p> <pre><code>from keras.testing_infra import test_combinations\nfrom keras.testing_infra import test_utils\n\n# test_combinations.TestCase is a class in Keras for testing.\n# It extends the tf.test.TestCase and absl.testing.parameterized.TestCase\nclass SomeTest(test_combinations.TestCase):\n  @test_combinations.run_with_all_model_types\n  def test_model_instrumentation(self):\n    layers = [\n        layers_module.Dense(10, dtype=np.float64),\n        layers_module.Dense(10, dtype=np.float64)\n    ]\n    model = test_utils.get_model_from_layers(layers, input_shape=(1,))\n</code></pre> <pre><code># The following doesn't control which TF version to use (TF1 or TF2).\n# They only decide how to run the tests based on the current enabled TF version.\n# The TF version is specified by the command for running the tests.\n# Keras style for run all modes. (Recommended)\n# Run once in TF 1 mode.\n# For TF 2 modes, it run twice with `test_utils.should_run_eagerly` equal to `True` and `False`.\n@test_combinations.run_all_keras_modes\ndef some_test(self):\n    ...\n    model.compile(..., run_eagerly=test_utils.should_run_eagerly)\n# Use args to skip TF1 or TF2 modes.\n@test_combinations.run_all_keras_modes(always_skip_v1=True)\n@test_combinations.run_all_keras_modes(always_skip_eager=True)\n\n# Run twice in TF1 (graph &amp; eager).\n# Run once in TF2 (eager).\n# The graph mode is the TF1 legacy mode, which doesn't exist in TF2.\n# No args needed for the test method.\n@test_combinations.generate(test_combinations.combine(mode=['graph', 'eager']))\ndef some_test(self):\n    pass\n\n# Only run once in TF2 with eager mode.\n@test_utils.run_v2_only\n</code></pre> <pre><code>@test_combinations.run_all_keras_modes(always_skip_v1=True)\n</code></pre> <pre><code>@parameterized.parameters(\"h5\", \"tf\")\ndef test_keras_saving_functional(self, save_format):\n    ...\n    model.save(path, save_format=save_format)\n</code></pre> <pre><code># Use tuple if you have multiple args.\n@parameterized.parameters(\n    (\"h5\", 0),\n    (\"tf\", 1))\ndef test_keras_saving_functional(self, save_format, arg2):\n    ...\n    model.save(path, save_format=save_format)\n</code></pre> <pre><code># Giving names to the tests with different params.\n# parameters() would use the param value in the tests names.\n@parameterized.named_parameters((\"name1\", \"h5\"), (\"name2\", \"tf\"))\ndef test_keras_saving_functional(self, save_format):\n    ...\n    model.save(path, save_format=save_format)\n</code></pre> <pre><code># Exhaust all combinations of the values.\n@test_combinations.generate(test_combinations.combine(\n      ragged_query=[True, False],\n      ragged_value=[True, False],\n      ragged_key=[True, False]))\ndef test_ragged_tensor(self, ragged_query, ragged_value, ragged_key):\n    ...\n</code></pre> <pre><code># If you want to save the model.\ndef some_test(self):\n    ...\n    path_string = self.get_temp_dir()\n    model.save(os.path.join(path_string, 'my_model'))\n</code></pre>"},{"location":"tech/tools/pycharm/","title":"Pycharm","text":""},{"location":"tech/tools/pycharm/#techtool","title":"tech/tool","text":"<p>Navigate: open class: cmd+o open file: shift+cmd+o show function code: cmd+y show current file content structure: cmd+F12, cmd+8 next in menu: ctrl+n previous in menu: ctrl+p go to definition: cmd+b go back: cmd+[ split vertically: cmd+\\</p> <p>Edit: redo: shift+cmd+z indent: ctrl+alt+tab, tab show basic completion hint: alt+h</p> <p>Find: find: cmd+f replace: cmd+r find in path: cmd+shift+f</p> <p>Run: run: ctrl+r run current curser: ctrl+shift+r</p> <p>Refactor: rename: shift+F6, cmd+0 find usages: alt+7, alt+F7</p>"},{"location":"tech/tools/screen/","title":"Screen","text":""},{"location":"tech/tools/screen/#techtool","title":"tech/tool","text":"<p>This is used for keep the process running on the machine you ssh to, even you disconnected from the ssh and shutdown your local computer.</p> <p>First ssh to the machine normally. Type \"screen\". It would open a empty shell for you. Run the process in this shell. Press \"Ctrl + A, Ctrl + D\" to switch back to the normal shell. You can log off, shutdown or anything. When you want to see that process again, ssh to the machine and type \"screen -r\".</p>"},{"location":"tech/tools/svn/","title":"Subversion","text":"<p>svn list: show contents svn mkdir [address] -m \"discription of the repository\": create a new repository svn co [address]: check out a directory to local svn add [file/directory]: add to the server svn commit -m \"discription of the transaction\": push changes to the server svn up: update to the newest version svn log: show all the changes</p> <p>how to create a local repository</p> <pre><code>$ mkdir /home/user/svnrep\n$ cd ~/svnrep\n$ svnadmin create project1\n</code></pre>"},{"location":"tech/tools/svn/#techtool","title":"tech/tool","text":""},{"location":"tech/tools/tmux/","title":"TMUX","text":""},{"location":"tech/tools/tmux/#inside","title":"Inside","text":"<p>c-b is the main key to trigger tmux commands.</p> <p>after c-b you can use the following keys to do things.</p>"},{"location":"tech/tools/tmux/#session","title":"session","text":"<p>d \" detach</p>"},{"location":"tech/tools/tmux/#windows","title":"windows","text":"<p>c \" create a new windown</p> <p>w \" list all the windows</p> <p>p \" previous window</p> <p>n \" next window</p> <p>3 \" jump to window 3</p> <p>&amp; \" close window</p> <p>, \" rename window</p>"},{"location":"tech/tools/tmux/#panes","title":"panes","text":"<p>% \" vertical split</p> <p>:sp \" horizontally split</p> <p>x \" close x</p>"},{"location":"tech/tools/tmux/#outside","title":"Outside","text":"<p>When starting tmux, you can do tmux -s name_of_session</p> <p>tmux list-sessions \" to show the existing session</p> <p>tmux attach \" to recover the session</p> <p>tmux attach -b name_of_session</p>"},{"location":"tech/tools/tmux/#rename-session","title":"Rename Session","text":"<p><code>tmux list-sessions</code></p> <p>It shows in the format of <code>name: number of windows</code>.</p> <p><code>tmux rename-session [-t current-name] [new-name]</code></p> <p>if -t is not provided, the most recent one will be used.</p>"},{"location":"tech/tools/vim/","title":"VIM","text":""},{"location":"tech/tools/vim/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/vim/vim &amp;&amp; cd vim\n./configure --enable-python3interp \nsudo make\nsudo make install\n</code></pre>"},{"location":"tech/tools/vim/#navigation","title":"Navigation","text":"<p><code>j</code> down</p> <p><code>k</code> up</p> <p><code>h</code> left</p> <p><code>l</code> right</p> <p><code>$</code> to the end of line</p> <p><code>^</code> to the beginning of the first word</p> <p><code>0</code> move the the beginning of the line</p> <p><code>{</code> to previous empty line</p> <p><code>}</code> to next empty line</p> <p><code>gg</code> to the beginning of the file</p> <p><code>G</code> or <code>:$</code> to the end of the file</p> <p><code>&lt;c-f&gt;</code> forward page</p> <p><code>&lt;c-b&gt;</code> back page</p> <p><code>w</code> or <code>W</code> next word</p> <p><code>b</code> or <code>B</code> beginning of word</p> <p><code>e</code> or <code>E</code> end of word</p> <p><code>z&lt;enter&gt;</code> scroll to let the current line at the top of the screen</p> <p><code>18gg</code> or <code>18G</code> or <code>:18</code> go to line 18</p> <p><code>&lt;c-w&gt;</code> then <code>hjkl</code> switch windows</p> <p><code>&lt;leader&gt;d</code> go to definition of a python object with jedi-vim. <code>&lt;leader&gt;</code> is mapped to <code>\\</code> by default.</p> <p><code>&lt;c-o&gt;</code> go back to where the cursor was just now.</p> <p><code>&lt;c-i&gt;</code> go forward if you used go back.</p> <p><code>&lt;c-]&gt;</code> go to the tag. Usually used in :help.</p> <p><code>&lt;c-[&gt;</code> go back from the tag.</p>"},{"location":"tech/tools/vim/#modify","title":"Modify","text":"<p><code>c</code> change</p> <p><code>y</code> copy</p> <p><code>d</code> delete</p> <p><code>gq</code> format to a paragraph with textwidth.</p>"},{"location":"tech/tools/vim/#registers","title":"Registers","text":"<p><code>\"</code> + <code>[register_name]</code>.</p> <p>The register name can be 0-9 or a-z, or some other special ones.</p> <p><code>\"_</code> the black hole register. <code>\"1yy</code> copy the current line to register 1. <code>\"1p</code> paste the content in register 1.</p>"},{"location":"tech/tools/vim/#search","title":"Search","text":"<p>:vimgrep */.py 'import numpy as np'</p>"},{"location":"tech/tools/vim/#select","title":"Select","text":"<p><code>v</code> select mode</p> <p><code>V</code> select lines</p> <p><code>&lt;c-v&gt;</code> select blocks</p>"},{"location":"tech/tools/vim/#replace","title":"Replace","text":"<p><code>:%s/origin/destiny/g</code> replace all. <code>%</code> means the entire file. Without it, it would only do the current line.</p> <p><code>:%s/origin/destiny/gc</code> replace interactively.</p> <p>You can also use register to copy paste things for the word you want to search and replace. Just select and use <code>y</code> to copy,  and paste with <code>&lt;c-r&gt;\"</code>.</p>"},{"location":"tech/tools/vim/#comment","title":"Comment","text":"<p><code>&lt;c-v&gt;</code> to select a block. <code>I</code> to insert a <code>//</code> or <code>#</code> at the beginning of the line.</p>"},{"location":"tech/tools/vim/#command","title":"Command","text":"<p><code>:e</code> open</p> <p><code>:w</code> save</p> <p><code>:x</code> save &amp; quit</p> <p><code>:q</code> quit</p> <p><code>:make</code> makefile</p> <p><code>:cwindow</code> or <code>:cw</code> quickfix window</p> <p><code>:r</code> insert a file content to curser</p> <p><code>:set nu</code> turn on line number.</p> <p><code>:set nonu</code> turn of line number.</p> <p><code>:set nu!</code> toggle line number.</p> <p>Replace <code>nu</code> with any other option.</p>"},{"location":"tech/tools/vim/#windows","title":"Windows","text":"<p><code>&lt;C-w&gt;n</code> new horizontal split (editing a new empty buffer)</p> <p><code>&lt;C-w&gt;s</code> split window horizontally (editing current buffer)</p> <p><code>&lt;C-w&gt;v</code> vsplit window vertically (editing current buffer)</p> <p><code>&lt;C-w&gt;c</code> close window</p> <p><code>&lt;C-w&gt;o</code> close all windows, leaving :only the current window open</p> <p>za //fold and unfold code blocks</p> <p> //open and close nerd tree <p>+g //go to definition</p> <p> //go back <p> //go forward <p>gt //next tab</p> <p>gT //previous tab</p>"},{"location":"tech/tools/vim/#nerdtree","title":"NerdTree","text":"<p>for directory:</p> <p>p //parent</p> <p>x // close</p> <p>o // open</p> <p>for file:</p> <p>o // open</p> <p>s //split</p> <p>gs //silent split</p>"},{"location":"tech/tools/vim/#vim-test","title":"vim-test","text":"<p><code>&lt;leader&gt;</code>+<code>ta</code> run all tests. This is remaped by me. <code>&lt;leader&gt;</code>+<code>tn</code> nearest. <code>&lt;leader&gt;</code>+<code>tf</code> file.</p>"},{"location":"tech/tools/vim/#search-with-ctrlp","title":"Search with CtrlP","text":"<p>To search for files and open:<code>&lt;c-p&gt;</code>  to change pane."},{"location":"tech/tools/vim/#buffers","title":"Buffers","text":"<p>switch between buffers:</p> <p>:ls \" show buffers</p> <p> \" switch between the current one and the last one <p>4 \" switch to buffer number 4 <p>:bd close buffer</p>"},{"location":"tech/tools/vim/#jedi","title":"jedi","text":"<p>n find all references. d go to definition."}]}